Member Node APIs for V0.3
-------------------------


These APIs are implemented by Member Nodes for version 0.3. This is a reduced
set of functionality compared to the full set of APIs envisioned for Member
Nodes.


Authorization API
~~~~~~~~~~~~~~~~~

There is no authorization API for this version. All authorization and
authentication will be handled by network configuration, out-of-band with
respect to the MN APIs.


CRUD API
~~~~~~~~

.. module:: MN_crud_0_3
   :synopsis: Read operations on Member Nodes.

::

  getSystemMetadata(token, GUID) -> objectMetadata
  get(token, GUID) -> object
  getLogRecords(token, fromDate, toDate)
  log (typeOfOperation, targetGUID, requestorIdentity, dateOfRequest)


.. exception:: NotFound


.. function:: getSystemMetadata(token, GUID) -> system metadata

   Describes the science metadata or data object identified by the GUID 
   by returing the system metadata object associated with the GUID.


   :param token: authentication token; ignored for V0.3

   :param GUID: Identifier for the science data or science metedata object of interest.
 
   :returns: System metadata object describing the object.

   :raises NotFound: There is no data or science metadata identified by the given GUID. 

   .. todo::

     Q. What happens if the GUID is valid within DataONE, but isn't on this MN?
     Is NotFound raised? Or, does the Member Node forward the request to a CN?

     A. Choices are: 1) raise NotFound. 2) resolve the GUID and return
     redirect. 3) redirect to a CN. 4) resolve the GUID and proxy content.

     Options 1 or 3 seem most reasonable, with inclination towards 3.


.. function:: get(token, GUID) -> object

   Retrieve an object identified by GUID from the Member Node.

   :param token: authentication token; ignored for V0.3

   :param GUID: The identifier for the object to be retrieved.

   :rtype: 
    Bytes of the specified object. For data objects, this will be the actual
    bytes of data. For metadata objects, this will be the representation of
    the object as provided by the Member Node.

   :raises NotFound: The object specified by GUID does not exist at this node.

   .. todo:: 

      What happens if the GUID is valid within DataONE, but isn't on this MN?
      Is NotFound raised? Or, does the Member Node forward the request to a
      CN?


.. function:: getLogRecords(token, fromDate, toDate)

   Retrieve log information from the MN for the specified date range
   (inclusive).

   :param token: 
    authentication token; ignored for V0.3

   :param fromDate: specified by appropriate standard (ISO? W3C?)

   :param toDate: specified by appropriate standard (ISO? W3C?)

   :returns: the set of log records specified; format is not yet specified

   .. todo:: Format of the log records need to be specified.


.. function:: log (typeOfOperation, targetGUID, requestorIdentity, dateOfRequest, ...)

   This method is used exclusively internally by a MN. It really isn't part of
   external the API that must be implemented. However, a MN will need to
   implement some sort of logging infrastructure so that it can respond to
   `getLogRecords()`.


Replication API
~~~~~~~~~~~~~~~

The Replication API handles CN-directed replication of content between MNs and
also supports the initial harvesting of science metadata from a MN by a CN.
Method names used for the former (MN-to-MN replication) include some form of
"replication" in their name. Method names used for the latter (MN-to-CN
synchronization) include some form of "synchronize" in their name. Support for
MN-to-MN replication is not part of the V0.3 APIs.


.. module:: MN_replication_0_3
   :synopsis: Supports the harvesting of science metadata from a MN by a CN.

::

  listObjects(token, query) -> list of GUIDs
  synchronizationComplete(token, GUID)
  synchronizationFailed(token, GUID, problemDescription)

.. exception:: InvalidCriteria

.. exception:: InvalidIdentifier

.. exception:: InvalidOperation



.. function::  listObjects (token, query) -> list of GUIDs

   Retrieve the list of GUIDs for objects owned by the MN that meet the query
   criteria. This method supports the synchronization of science metadata from
   a MN to a CN.

   :param token: authentication token; ignored for V0.3

   :param query: 
     The criteria specifying the characteristics of the objects of interest.
     The structure of this query is not yet defined. It must be rich enough so
     that a CN can ask "What science metadata objects do you own, that are not
     yet synchronized to a CN?" There are likely other queries that will need
     to be posed as well.

   :returns: 
     The list of GUIDs that match the query criteria. If none match, an empty
     list is returned.

   :raises InvalidCriteria: The MN cannot understand or parse the query criteria.

   .. todo:: Details of query specification for `listObjects(token, query)` needs to be worked out. 



.. function::  synchronizationComplete (token, GUID)

   This is a callback method used by a CN to indicate to a MN that it has
   completed replication of the science metadata identified by GUID. When
   called, the MN should somehow record that syncrhonization is complete for
   that object so that the next time it reponds to a ``listObjects(token,
   query)`` query the object will not be included as requiring
   synchronization.

   :param token: authentication token; ignored for V0.3

   :param GUID: 

     The GUID of the science metadata object that is now synchronized with the
     CN.

   .. note::
      A CN could use this method to provide the MN with an updated version of
      the system metadata for the object if this method accepted a system
      metadata object instead of a simple GUID as a parameter.

   :returns: A simple acknowledgement.

   :raises InvalidIdentifier: 
     The supplied GUID does not identify a science metadata object owned by
     the MN.

   :raises InvalidOperation: 
     The science metadata object identified by the GUID is already marked as
     synchronized.



.. function::  synchronizationFailed (token, GUID, problemDescription)

   This is a callback method used by a CN to indicate to a MN that it cannot
   complete replication of the science metadata identified by GUID. When
   called, the MN should take steps to record the problem description and
   notify an administrator or the data owner of the issue.

   :param token: authentication token; ignored for V0.3

   :param GUID: 
      The GUID of the science metadata object that was to be synchronized with
      the CN.

   :param problemDescription: 
      Further information about the problem causing the fail to synchronize.
      This might be an unsupported science metadata type, an invalid GUID,
      etc.

   :returns: A simple acknowledgement.

   :raises InvalidIdentifier: 
     The supplied GUID does not identify a science metadata object owned by
     the MN.

   :raises InvalidOperation: 
     The science metadata object identified by the GUID is already marked as
     synchronized.



Capabilities API
~~~~~~~~~~~~~~~~

There is no Capabilities API for this version.



State of Health API
~~~~~~~~~~~~~~~~~~~

Reports on the status of a Member Node.

.. module:: MN_health_0_3
   :synopsis: Reports on the status of a Member Node.
   
::

  heartbeat() -> response

.. function:: heartbeat() -> response

   .. note::
      This method will be used by Use Case 10 "MN Status Reports" for V0.3,
      but that use case will require the use of ``getStatus(token)`` from this
      same API for later versions.

   Low level "Are you alive?" operation. The Member Node should perform some
   minimal internal functionality testing before answering. However, heartbeat
   checks will be frequent (every few minutes) so the internal functionality
   test should not be high impact.

   :returns: 
     A simple chunk of data, perhaps XML, or plain text. Response is a simple
     ACK, including the version number of the MN API supported by the MN, an
     indication if it considers itself fully functional or not, and a
     timestamp from the MN when the response was produced.

   .. todo:: 
      Metrics MNs are to collect and return for the ``getStatus()`` need to be defined.

.. raw:: latex

   \newpage


