Use Case 14 - System Authentication and Authorization
-----------------------------------------------------

Author
  VDC TWG

Date
  - 20090925 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  Draft

Goal

  A system process authenticates and performs some system operation (e.g.
  replication). In this example, a Member Node authenticates to enable
  transfer of content from MN A to MN B.


Summary 

  System operations are required for many operations including the management
  of content across Member Nodes and replication between Coordinating Nodes.
  This use case describes the system level interactions required to perform a
  system level operation.

Actors
  
  - Coordinating Node

  - Member Node(s)

Preconditions 

  - Operational system


Triggers

  - A system level operation is invoked.


Post Conditions

  - The operation is completed

  - The authentication token is optionally disposed


.. figure:: images/14_uc.png
   :width: 100%

   Use case 14.


.. figure:: images/14_interaction.png
   :width: 100%

   Interactions for use case 14.


.. 
  @startuml images/14_uc.png
   !include ../plantuml.conf
   usecase "12. User Authentication" as authen

   actor "Coordinating Node" as CN 
   actor "Member Node A" as MN_A 
   actor "Member Node B" as MN_B 
   usecase "13. User Authorization" as author
   usecase "14. System Operation" as SYSOP
   usecase "9. Replicate MN to MN" as repl
   CN -- SYSOP
   MN_A -- SYSOP
   MN_B -- SYSOP
   SYSOP ..> author: <<includes>>
   SYSOP ..> authen: <<includes>>
   SYSOP ..> repl: <<includes>
  @enduml


..
  @startuml images/14_interaction.png
  !include ../plantuml.conf
  participant "Replication API" as m_rep_a << Member Node A >>
  participant "Replication API" as m_rep_b << Member Node B >>
  participant "Authentication API" as c_authenticate << Coordinating Node >>
  participant "Verify API" as c_ver << Coordinating Node >>
  m_rep_a -> c_authenticate: login(user, pw)
  note right
    The user in this case is the DataONE 
    identity given to MN A.
  end note
  m_rep_a <-- c_authenticate: token or failure
  m_rep_a -> m_rep_b: getContent(token, ...)
  m_rep_b -> c_ver: isAuthorized(token, ...)
  m_rep_b <-- c_ver: True or False
  m_rep_a <-- m_rep_b: content or Fail
  note right
    Member Node A is now in a modified 
    state and should signal this during
    next status request from a CN
  end note
  m_rep_a --> c_authenticate: logout(token)
  @enduml
  

.. raw:: pdf
  
   PageBreak