Authorization in DataONE
========================

:Author: Matt Jones
:Status: Incomplete Draft, Work in Progress being Edited


This document outlines a proposed mechanism for specifying authorization
policies for objects in DataONE and a set of services for controlling access to
those objects on Member Nodes and Coordinating Nodes.

Overview
--------

Users and services authenticate in DataONE to confirm their identity. The
identity is then used for controlling access to objects, systems, and services
within the DataONE framework. Requirements for Authorization are listed here:

.. toctree::
   :maxdepth: 1

   AuthnAndAuthzRequirements

During the first DataONE Federated Security workshop, four phases for
development were identified that involve increasingly sophisticated
authorization and access control mechanisms. The four phases are:

- **Phase 1: Mostly public access (target date: January 2011)**: Only publicly 
  readable content is replicated. Only publicly readable content is indexed for 
  search and retrieval. Access to restricted content is through origin member 
  node only. No authentication is required to search and retrieve public content.
  Authentication is required to upload (create) content.

- **Phase 2: Access control supported for search and retrieval**: ACLs respected 
  by coordinating nodes.  Authenticated users can discover content that is 
  restricted to them or their groups. Restricted access content is not replicated.

- **Phase 3: Access control supported for content replication**: 
  Restricted access content is replicated to member nodes with compatible ACLs 
  and pre-arranged trust agreements.

- **Phase 4: Consistent semantic and functional interoperability for identity and
  security**: Restricted access content is replicated to any member node. 
  Authentication by long-running workflows is supported.


Trust relationships
-------------------

Any authorization system in a federation requires trust among participants.
For DataONE, there are three types of trust relationships among nodes in the
federation:

- **MN to MN**: Member Node to Member Node trust relies on one Member Node
  believing that another Member Node will respect the authorization policies
  that they publish for their objects and services.  In the case of restricted
  access content, Member Nodes that house replicas of an object would need to
  faithfully enforce authorization policies that were expressed by the data
  owner. Because of this, Member Nodes can express replication policies for
  objects that indicate which other Member Nodes are acceptable targets for
  replication, and for which nodes they are willing to serve as replica stores.

- **MN to CN**: Member Nodes need to have trust that Coordinating Nodes will
  respect and enforce their authorization policies, including any restrictions
  placed on where and when to create replicas of objects and on the
  presentation of search results for restricted content. As there are only
  three Coordinating Nodes in the initial deployment, this trust relationship
  should be easy to establish.

- **CN to MN**: Coordinating Nodes rely upon Member Nodes for limited services,
  and mainly expect Member Nodes to accurately implement the DataONE Service
  API, including replication services.

- **CN to CN**: Each Coordinating Node contains a replica of the content of the
  others, and are configured to provide seamless failover and load-balancing
  for all incoming requests across the three nodes. Consequently, the three CNs
  inherently trust one another fully.  As the suite of Coordinating Node
  instances expands to other continents, this relationship may need to be
  re-examined.

Objects Subject to Access Control
---------------------------------

A variety of resources in DataONE would be the subject of authorization
policies.  The permission levels for each of these types of objects include:

* Data objects and Science Metadata objects

   :Read: The ability to view the content of this object

   :Write: The ability to change the content of this object via update services

   :ChangePermission: The ability to change the authorization policies for this object

* MN services (create, update, delete, read, listObjects)

   :Execute: The ability to invoke a service

* CN services (synchronize, search, register)

   :Execute: The ability to invoke a service

* Log records

   :Read: The ability to view the log records for an object or service


Additional Authorization Constraints
------------------------------------
Some nodes may also want to conditionally provide access to some services based
on a principal's current usage of a resource such as node storage or node
bandwidth.

* Create/Update constraints
   * MaximumStorageQuota
   * MaximumNetworkTransferQuota
* Embargoes
   * Add ability to specify an embargo period during which the access policies
     would not be in effect, and rather resources are only privately accessible

.. Note::
    Add constraints and embargoes to the AccessPolicy language described below

Representing Principals (aka Subjects)
--------------------------------------
Principals need to be represented in access policies.  The current syntax of
for the representation of principals as emitted from CILogon authentication
service is:

    ``/DC=org/DC=cilogon/C=US/O=ProtectNetwork/CN=Matthew Jones A332``

For consistency over time, and to eliminate an artifact of using the CILogon
service, it would be better to use the representation for a principal as
returned directly from the IdentityProvider.  In the case of the Protect
Network IdP, this might be:

    ``/C=US/O=ProtectNetwork/CN=Matthew Jones``

.. Note::
    Resolve this discrepancy and decide on a course of action for
    representation of principals in authorization rule statements.

Symbolic Principals
~~~~~~~~~~~~~~~~~~~
Access policies will need to refer to several special symbolic groups of users
that do not need to be explicitly maintained, but include all people in the
system.  The two groups are:

* Authenticated users
    * Any user who has a valid authentication token is considered a member of
      the authenticated users group.  This designation can be used in
      particular to require that user identity information is known and logged
      during read operations.
    * Represented using the special principal '/C=US/O=DataONE/CN=AuthenticatedUser'
* Public user
    * The Public user represents any user accessing services that does not have
      a valid session token, plus all of those who do have a valid token. 
      If a token is found to be invalid, the user's
      priveleges are immediately lowered to those of the symbolic 'Public'
      user.  For create, update, and delete operations, this typically means
      that the user has insufficient priveledges to access the service.  At
      times providers may want to provide Public read access to resources.
    * Represented using the special principal '/C=US/O=DataONE/CN=Public'

Access Policy Language
-----------------------
Several existing authorization policy languages were evaluated for use in the
DataONE architecture.  Given the simplicity of authorization rules that DataONE
needs to express, these specifications were deemed overly complex and would
impose too signification of a cost on Member Node implementations.

.. toctree::
   :maxdepth: 2

   Authorization-technologies

.. Note::
    Survey for additional policy languages to evaluate before deciding on a
    custom specification for DataONE.

DataONE has designed a simple access policy language that can be embedded in
several contexts and can be used to express access rules.  The definitions of
the elements in this AccessPolicy language are:

.. attribute:: accessPolicy

  A set of rules that specifies as a whole the allowable permissions that a
  given user or system has for accessing a resource, including both data and
  metadata resources and service resources. An access policy consists of a
  sequence of allow rules that grant permissions to principals, which can be
  individual users, groups of users, sympolic users, or systems and services.

  :Cardinality:
    1..1

  :ValueSpace:

    :class:`Types.AccessPolicy`

  :Generated By: Client

.. attribute:: allow

  A rule that is used to allow a principal to perform an action (such as
  read or write) on an object in DataONE. Rules are three-tuples (principal,
  permission, resource) specifying which permissions are allowed for the 
  principal(s) for the resource(s) listed. Access control rules are specified
  by the OriginMemberNode when the object is first registered in DataONE. If no
  rules are specified at that time, then the object is deemed to be private and
  the only user with access to the object (read, write, or otherwise) is the
  RightsHolder.

  :Cardinality:
    0..*

  :ValueSpace:
    :class:`Types.AccessRule`

  :Generated By: Client

.. Note::
    The 'deny' directive has been removed for simplicity, and because a survey
    of existing member nodes indicates it is not being used by the community.

.. attribute:: principal

  The unique identifier representing a principal that is allowed or denied
  access to a resource.  Principal identifiers are strings that are found
  transported in the subject field of an identifying certificate produced from
  the authentication system.  Users, groups, systems, and services can all be
  represented as principals.

  :Cardinality:
    1..*

  :ValueSpace:

    :class:`Types.Principal`

  :Generated By: Client

.. attribute:: permission

  A string value indicating the set of actions that can be performed on a
  resource as specified in an access policy.  The set of permissions include
  the ability to read a resource, modify a resource (write), and to change the
  set of access control policies for a resource (changePermission).  In
  addition, there is a permission that controls ability to execute a service
  (execute).

  :Cardinality:
    1..*

  :ValueSpace:
    :class:`Types.Permission`

  :Generated By: Client

.. attribute:: resource

  The unique identifier (pid) for a resource in the system to which the access
  rules in this access policy apply.

  :Cardinality:
    1..*

  :ValueSpace:

    :class:`Types.Identifier`

  :Generated By: Client


An example instance of this syntax is:

.. literalinclude:: /d1_schemas/accesspolicy-example.xml
   :language: xml

The schema for the access language is listed here for convenience.

.. literalinclude:: /d1_schemas/accesspolicy.xsd
   :language: xml

Managing Identities and Groups in DataONE
-----------------------------------------

.. Note::
    InCommon does not provide group management that is under the control of DataONE
    principals.  Need to define how we will manage groups and roles.

DataONE users will have multiple identities from different participating member
nodes, and their affiliations will change over time.  Because of this, DataONE
needs a user Identity mapping system that allows users to authenticate using
one of their identities but still be recognized as equivalent in terms of
access to their DataONE identity.  This IdentityManagement Service will provide a
location to collect and store a user's idnetity information, including mappings
to their multiple identities. Service APIs for managing identity mapping are
outlined below in the Authorization Services section.

In addition, the Identity Management service will provide a system for users to
create, store, and modify groups of users that can be used in access control
directives.  Only the user creating a group will have access to changing the
group.  Service APIs for group management are outlined below in the
Authorization Services section.

Authorization Services
----------------------
In this section, define a set of Authorization services to be implemented at CN
and MN. The current Authorization Service is defined as a standalone service.

isAuthorized(token, pid, action):: boolean
    Determine if the user authenticated by the token can take the action
    specified (read, write, changePermission, execute) on the resource named by
    the identifier pid.

setAccess(token, Types.AccessPolicy):: void
    Set the access policy for a series of resources as specified by the
    provided AccessPolicy document.  The user identified by the authentication
    token must have changePermission permission on all resources named in the
    AccessPolicy.  If so, then the policies for those resources will be
    replaced (or created as needed) by the policies specified in AccessPolicy.
    If the user does not have sufficient permission, then the NotAuthorized
    exception must be thrown, and none of the policies should be applied (it is
    not sufficient to have appropriate permissions on just one resource -- if
    permission is not present for all listed resources, then implementations
    must roll back any changes and return NotAuthorized.

mapIdentity(token1, token2):: void
    Create an equivalence mapping between the identities listed for the 
    users authenticated and represented by token1 and token2.

createGroup(token, groupName)
    Create a named group of users.  Throws IdentifierNotUnique if the group
    name is already in use.

addGroupMembers(token, groupName, memberList)
    Add the listed array of members to the named group, if and only if the user
    represented in token originally created the group.

removeGroupMembers(token, groupName, memberList)
    Remove the listed array of members from the named group, if and only if the 
    user represented in token originally created the group.

Interaction diagrams
--------------------

Phase 1
~~~~~~~

.. uml::

   actor User
   participant MN1
   participant MN2
   participant CN
   User -> CN: login(D1.username, password)
   activate CN
   CN --> MN1: token
   deactivate CN
   User -> MN1: create(token, pid, object, sysmeta)
   activate MN1
   MN1 -> MN1: verify(token)
   MN1 -> MN1: isAuthorized(token, pid, OP_CREATE)
   MN1 --> User: pid
   deactivate MN1

*Figure 1.* Only public objects are searchable and replicated in the system. 
Create, Read, Update, and Delete operations are controlled by member nodes
for private objects, but read for public resources can be handled by any
replicating member node, or a coordinating node in the case of metadata
resources.

.. figure:: images/anaz_phase1.png

*Figure 2.* Trust relationships between components during phase 1 of
Authz/Authn. Triangle = CN, Rectangle = MN, open circle = public data, filled
circle = private data, dashed line = untrusted connection. A Coordinating Node
retrieves only public content from a Member Node (A), and only publicly
readable content is available to users through the Coordinating Nodes (B) and
Member Nodes (C). A Coordinating Node must have a trusted relationship with
Member Nodes to request replication operations (E) even though the content
being replicated is publicly readable and does not require a trusted
connection (D).


Phase 2
~~~~~~~

.. figure:: images/anaz_phase2.png

*Figure 3.* Trust relationships between components during phase 2 of
Authn/Authz. Triangle = CN, Rectangle = MN, open circle = public data, filled
circle = private data, dashed line = untrusted connection, solid line =
trusted connection, user with hat = authenticated user. Coordinating Nodes
synchronize public and private content (A). Authenticated users can retrieve
private data from the origin Member Node (B) and can discover and retrieve
metadata from the Coordinating Nodes (C). Public content is replicated between
Member Nodes (D) under the direction of a trusted connection from the
Coordinating Nodes (E).


Phase 3
~~~~~~~

.. figure:: images/anaz_phase3.png

*Figure 4.* Trust relationships between components during phase 3 of
Authn/Authz. Triangle = CN, Rectangle = MN, open circle = public data, filled
circle = private data, dashed line = untrusted connection, solid line =
trusted connection, user with hat = authenticated user. Member Nodes of
compatible technology (D) have a trust relationship that enables transfer of
protected content from one member node to another (A). An authenticated user
has the same access to private content replicated to other Member Nodes (B).
Member Nodes with incompatible technology (i.e. unable to create a trusted
relationship) are only able to replicate public content (C). Coordinating
Nodes must have trusted relationships to all Member Nodes (E) to direct
replication.

Phase 4
~~~~~~~

TBD

Issues
------
- Located At CN or MN?
   * At CN requires global knowledge of ACLs
   * At CN requires a lot of network traffic for authorization on objects
   * At MN makes authorization of search results impossible

   * Compromise: Federated, each authoritative MN for an object keeps its ACL
     list, which gets synchronized to the CN at sync time

     * Assume most object write is at MN level, so best to not have to go to
       CN
     * Assume MN will want to control their own write access
     * Requires MN Authorization services
     
- Efficiency of search results authorization
   * Need to authorize large number of search results in each operation
   * Has implications for search results cacheing

