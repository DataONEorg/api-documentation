@startuml images/morpho_save_new_package_seq.png

  
   participant ": DataStoreController" as data_store_controller <<Morpho>>
   participant "abstractObject: AbstractObject" as abstract_object <<D1_lib>>
   participant ": DataStoreInterface" as data_store <<D1_lib>>
   participant "abstractMetadata: AbstractMetadata" as abstract_metadata <<Morpho>>
   participant "entity: Entity" as entity <<Morpho>>
   participant "dataPackage: DataPackage" as d1_datapackage <<D1_lib>>
   
   activate data_store_controller
   data_store_controller -> data_store: load(oreId, storeId)
   activate data_store
   abstract_object <- data_store: read(oreId, storeId) creates the abstractObject 
   deactivate data_store
   activate abstract_object
   data_store_controller <- abstract_object: getData() creates the output stream object
   data_store_controller <- abstract_object: getSystemMetadata() creates the system metadata object
   deactivate abstract_object
   data_store_controller -> data_store_controller: parse the ORE input stream and get list of ids
   data_store_controller -> data_store: metadataId,storeId
   activate data_store
   data_store -> abstract_metadata: read(metadataId, storeId) creates the abstractMetadata
   deactivate data_store
   activate abstract_metadata
   abstract_metadata -> d1_datapackage: dataPackage.add(abstractMetadata)
   deactivate abstract_metadata
   activate d1_datapackage  
   loop iterate the entityId list    
       data_store_controller -> data_store: entityId, storeId
       activate data_store
       data_store -> entity: read(entityId, storeId) creates the entity
       deactivate data_store
       activate entity
       entity -> d1_datapackage: dataPackage.add(entity)
       deactivate entity
   end
   data_store_controller -> d1_datapackage: dataPackage.addRelationShip()
   data_store_controller <- d1_datapackage: dataPackage
   deactivate d1_datapackage
   deactivate data_store_controller
  @enduml
