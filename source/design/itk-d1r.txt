DataONE R Client Package
========================

Synopsis
--------

Environmental scientists commonly use the `R Project`_ software system for
statistical analysis and modeling. The R framework is a flexible statistical
computing environment with robust, extensive packages to perform a large
variety of analysis and modeling tasks. Because R is open source and
extensible, it has been widely adopted by the environmental science community,
and it is easy to extend to provide new analysis capabilities.

The `DataONE R Client Package`_ is an R package that provides access to the
DataONE services that are present at Coordinating Nodes and Member Nodes. The
tool will allow an R user to easily load the d1r package (using CRAN_) and
then use functions in R to search the DataONE system, locate data of interest,
load that data into the R environment, process it using R's various tools, and
then upload derived data and metadata back into DataONE.

.. _R Project: http://www.r-project.org
.. _CRAN: http://cran.r-project.org

User stories 
------------

* A scientist with R on their system can easily install d1r from CRAN_

* A scientist can load a data object using its DataONE identifier from the 
  DataONE system into R for further processing by other R functions. The
  data objects supported should minimally include:

   * Data Tables in CSV and other delimited formats
   * NetCDF files
   * Raster images in various formats

* A scientist can use d1r to search for data based on critical metadata,
  including title, creator, keywords, abstract, spatial location, temporal
  coverage, taxonomic coverage, and other relevant fields

* A scientist can load all of the supported data objects into R by using the
  metadata found in a metadata search without directly knowing the
  identifiers for individual data objects

* Given a data object loaded from DataONE into R, a scientist can display
  the science metadata associated with that object from within the R system
  (this might include a link to an external web URI that provides a nice
  human readable version of the metadata too)

* A scientist can authenticate with the DataONE system in order to establish
  their identity to access restricted objects and services

* A scientist can upload an R dataframe as a data set with associated
  science and system metadata for that object from within the R environment

Package design
--------------

Classes, fields, and methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. Note:: 
    All of the classes and methods in R are inverted (ie, classes don't contain methods per se, instead, methods are specialized to work on particular classes, and the class is generally passed in as the first parameter of the method call.  So, all signatures below need to have an added parameter for this object to be passed in.

* D1Client
   * Fields
       * endpoint
       * username
       * cli <D1Client>
       * token <AuthToken>
   * Constructors
       * D1Client(CN_URI)
   * Methods
       * login(username, password): AuthToken
       * logout()
       * getEndpoint(): String
       * getPackage(pid): DataPackage
       * getUsername(): String
       * getToken(): AuthToken
       * search(): ResultSet
       * resolve(pid): [MemberNodeURI]

* DataPackage
   * Fields
       * identifier
       * scimeta
       * sysmeta
       * [dataObject]
   * Constructors
       * DataPackage(identifier, scimeta, sysmeta)
   * Methods
       * addData(DataObject): DataPackage
       * getDataObjectCount(): int
       * getDataObject(index): DataObject
       * getTitle(): String
       * getCreator(): String
       * getDisplayURL(): String

* DataObject
   * Fields
       * sysmeta
       * databytes
   * Constructors
       * DataObject(Identifier, SystemMetadata, databytes)
   * Methods
   
Algorithm for constructing Data Packages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Constructing a data package involves taking a PID as passed to the client,
and using that PID to query the system metadata to find all associated
science metadata objects and other data objects. If the PID points at a
scimeta object, it can be used to loop through all of the data objects it
describes. If the PID points at a data object, trace back to its scimeta
object first, then populate the data package, and then loop over all
associated data objects. In pseudocode:

* mn = cn.resolve(PID)
* sysmeta = getSystemMetadata(PID)
* switch(sysmeta.getObjectFormat())
    1. case: EML or FGDC or other metadata format
        a. scimeta = mn.get(PID)
        b. construct DataPackage dp with sysmeta and scimeta
        c. for each objid in sysmeta.getDescribes()
            * mn = cn.resolve(objid)
            * objsysmeta = cn.getsysmetadata(objid)
            * objdata = mn.get(objid)
            * construct dobj = DataObject(objid, objsysmeta, objdata) 
            * dp.addData(dobj)

    2. case: all other objects considered data objects
        a. scimetaid = sysmeta.getDescribedBy()
        b. mn = cn.resolve(scimetaid)
        c. scisysmeta = cn.getsystemmetadata(scimetaid)
        d. scimeta = mn.get(scimetaid)
        e. construct DataPackage dp with scisysmeta and scimeta
        f. objdata = mn.get(objid)
        g. construct dobj = DataObject(ID, sysmeta, objdata) 
        h. follow step 1.3 above to get remainder of data objects in package

