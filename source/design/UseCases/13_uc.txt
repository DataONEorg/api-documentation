Use Case 13 - User Authorization
--------------------------------

Author
  VDC TWG

Date
  - 20090925 Adding to use case description and documentation
  - 20090114 (TWG meeting).  Subsequent various modifications.

Version 
  Draft

Goal
  Determine if a user is authorized to perform some action on an object (e.g.
  get, put, query, delete, ...).

Summary 

  User authorization is the procedure that is followed to determine if the
  authenticated user is authorized to perform some operation. The result will
  always be True or False.

  Note: Need to define which objects require access control / authorization


Actors

  - User

  - Client application

  - Member Node

  - Coordinating Node

Preconditions 

  - User is at some level of authentication (may be anonymous or logged in)

Triggers

  - User is requesting some operation to be performed on an object

  - An operation acting as a proxy for a user performs some operation on an
    object

Post Conditions

  - The operation continues if the user is authorized or terminates raising an
    unauthorized exception.


.. uml::

   actor User
   participant "Client" as app_client << Application >>
   User -> app_client
   participant "CRUD API" as c_crud << Coordinating Node >>
   participant "Authorization API" as c_authorize << Coordinating Node >>
   app_client -> c_crud: get(auth_token, GUID)
   c_crud -> c_authorize: isAuthorized(auth_token, method, resultset)
   loop for each guid in resultset
     c_authorize -> c_authorize: isAuthorized(auth_token, method, guid)
   end
   c_crud <-- c_authorize: T or F
   app_client <-- c_crud: resultset or raise NotAuthorized
   

*Figure 1.* Interactions for use case 13.
