.. _UC09:

Use Case 09 - Replicate MN to MN
--------------------------------

.. index:: Use Case 09, UC09, Replicate MN, replicate

Revisions
  View document revision history_.

Goal
  Replicate data from Member Node to Member Node.

Summary 
  Replication of content between Member Nodes (MN) is done to improve
  persistence of information (avoid data loss with loss of MN) and to improve
  accessibility (more choices for content retrieval can lower bandwidth
  requirements for any particular MN). The process of replication is controlled
  by a Coordinating Node (CN). 

  A full copy of science data and metadata is made during the replication
  process, so the original science metadata and data is copied to the
  recipient MN.

  Data is copied across as an exact copy. Science metadata may be transformed
  into another format if the original can not be supported. 

  It is important that the original metadata is preserved on the CNs, as
  it is always possible that the original MN where the content was published
  may go offline or be removed from the DataONE system.


Actors
  Member Node x2, Coordinating Node

Preconditions 
  - Content is present on a Member Node

  - The content has been registered with the DataONE system (i.e. Member Node
    Synchronization has occurred for the data and metadata)

Triggers
 - A Coordinating Node detects that there are insufficient copies of the
   object(s) in question.

 - Information on a Member Node is altered

 - Capabilities of a Member Node changes (accepting more or less content)

 - Replication policy of DataONE or a Member Node changes

 - A Member Node goes offline


Post Conditions
  - Content is present on the recipient Member Node

  - System metadata is updated to reflect the change

  - Watchers are notified of the change

  - Member Node and Coordinating Node logs are updated


.. 
   @startuml images/09_uc.png
   usecase "12. Authentication" as authen
   package "DataONE"
     actor "Coordinating Node" as CN
     actor "Member Node 1" as MN1
     actor "Member Node 2" as MN2
     usecase "13. Authorization" as author
     usecase "01. Get Object" as GET
     usecase "04. Create object" as CREATE
     usecase "06. Synchronize content" as SYNC
     usecase "16. Log event" as log
     usecase "21. Notify subscribers" as subscribe
     CN -- CREATE
     CN -- SYNC
     MN1 -- CREATE
     MN2 -- GET
     MN1 -- GET
     GET ..> author: <<includes>>
     GET ..> authen: <<includes>>
     GET ..> log: <<includes>>
     GET ..> subscribe: <<includes>>
     CREATE ..> author: <<includes>>
     CREATE ..> log: <<includes>>
     CREATE ..> subscribe: <<includes>>
    @enduml

.. image:: images/09_uc.png

*Figure 1.* Use case diagram indicating the actors involved in the process of
Member Node replication.

..
  @startuml images/09_seq.png

  title Interactions: 09 - Replicate data from Member Node A to Member Node B

  participant "Replication API" as c_sync << Coordinating Node >>
  participant "CRUD API" as m_crud_b << Member Node B >>
  participant "CRUD API" as m_crud_a << Member Node A >>

    c_sync -> c_sync: placeholder so you can see the line below
    activate c_sync
    note right
      token has the roles:
      1) verifying that the replicate request originates from a CN
      2) enables MN A to verify that the get request from MN B can
      be trusted.
    end note
    c_sync -> m_crud_b: replicate(token, SystemMetadata, SourceNode)
    activate m_crud_b
    c_sync <-- m_crud_b: OK
    deactivate m_crud_b
    c_sync -> c_sync: setReplicationStatus(token, PID, QUEUED)
    deactivate c_sync

    m_crud_b -> m_crud_a: get(token, PID)
    activate m_crud_b
    activate m_crud_a
      m_crud_a -> m_crud_b: bytes
    deactivate m_crud_a
    m_crud_b -> m_crud_b: verify content
    note right
      The MN uses the System Metadata to verify
      the checksum of the object and to determine 
      the access control rules before committing 
      storage of the object.
    end note
    deactivate c_sync
    m_crud_b -> m_crud_b: _store(PID, bytes)
    m_crud_b --> m_crud_b: log(PID, REPLICATE)
    m_crud_b -> c_sync: setReplicationStatus(token, PID, COMPLETE)
    activate c_sync
    note right
      - The MN has a copy of the content that needs to be 
      verified by the CN. 
      - The CN schedules a synchronization operation for 
      that PID and the CN system metadata for the object
      is updated on successful synchronization (UC06).
      - If the synchronization fails, then the MN should be 
      instructed to FAIL that object, which means it should 
      not be offered for synchronization again.
    end note
    c_sync --> m_crud_b: OK
    deactivate c_sync
    deactivate m_crud_b
    c_sync -> c_sync: Use case 06, synchronize content
    activate c_sync
    deactivate c_sync
  @enduml

.. image:: images/09_seq.png

*Figure 2.* Interactions for use case 09. The diagram describes transfer of a
single object from MN_A to MN_B as directed by a CN. It is assumed that the
object does not exist on MN_A and the object has been identified as requiring
replication by the CN checking its status in the system metadata. The end 
state of a replicate operation is that content is available on the MN, the 
MN has notified the CN of such, and the CN will schedule a synchronize 
operation that will verify the copy as legitimate.

Note (2011.01.07 CWB): This simple authentication scheme will not work on
member nodes that have their own access control rules. In this scheme, each
member node will need to have knowledge of the administrative (or replication)
credentials for each of the other member nodes. The CN needs to handle the
login actions for both of the MNs involved and send an authenticated token
from MN_A to MN_B so that it can use that credential to successfully get the
document. This is only the case if the document on MN_A is read protected. If
it is public, not token is needed.

Note that the call setReplicationStatus with a value of *COMPLETE* is 
functionally equivalent to the *notify(objectCreated, identifier)* call 
indicated in use case 06.

.. _history: https://redmine.dataone.org/projects/d1/repository/changes/documents/Projects/cicore/architecture/api-documentation/source/design/UseCases/09_uc.txt
