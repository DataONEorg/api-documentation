System Metadata
===============

.. module:: SystemMetadata


:Revisions:
  ======== ============================================================
  Date     Comment
  ======== ============================================================
  20110725 (D.V.) Updated to match v1 sysmeta, added index suggestions
  20101121 (D.V.) Removed version targets for elements
  20100301 (M.J.) Updated to cluster client-oriented properties
  20100120 (D.V.) Added a quick reference table and link to schema
  20091123 (M.J.) First draft after `CCIT meeting`_
  ======== ============================================================


System metadata (often referred to as :term:`sysmeta`) is the information used
by DataONE to track and manage objects across the distributed Coordinating and
Member Nodes of the network. System metadata documents contain low level
information (e.g. size, type, owner, access control rules) about managed objects
such as science data, science metadata, and resource map objects and the
relationships between objects (e.g. describes and describedBy).


.. figure:: images/sysm_relations.png

   *Figure 1.* Science metadata is used to fully describe science data (1), and
   is intended for use by scientists and systems to better utilize those data. A
   resource map is used to indicate the relationships between objects, for
   example that a science metadata document (7) *describes* a data object (8)
   and the converse. System metadata is associated with every managed object in
   DataONE and is used to record low level properties about the objects (2, 3,
   4). Additionally, system metadata contains a *resourceMap* element that
   optionally refers to a resource map (5, 6). As a single data or system
   metadata object may be part of more than one data package, there may be
   multiple resource maps referenced by a system metadata document..


The information is maintained dynamically by Coordinating Nodes and is mutable
in that it reflects the current state of an object in the system. Initial
properties of system metadata are generated by clients and Member Nodes. After
object synchronization, the Coordinating Nodes hold authoritative copies of
system metadata. Mirror copies of system metadata are maintained at each of the
Coordinating nodes.

.. figure:: images/sysm_generate.png

   *Figure 2.* System metadata is generated by Member Nodes (1) in response to
   the :func:`MN_crud.getSystemMetadata` call by the Coordinating Nodes during
   the Member Node synchronization process (2). The Coordinating Node updates
   the system metadata timestamps and replica location information (3), and
   the copy of system metada is replicated between the Coordinating Nodes (4).
   A user will typically retrieve system metadata from the Coordinating Nodes
   (5) using the :func:`CN_crud.getSystemMetadata` call since that is the
   authoritative source for the information.

System metadata are considered operational information needed to run DataONE,
and can be read by all Coordinating Nodes and Member Nodes in the course of
service provision. In order to reduce issues with third-party tracking of data
status information, users can read system metadata for an object if they have
the access rights to read the corresponding object which a system metadata
record describes.

System Metadata elements are partitioned into two classes: metadata elements
that must be provided by client software to the DataONE system, and elements
that are generated by DataONE itself in the course of managing objects.

The system metadata schema is expressed in XMLSchema and the development
version is available at:

  https://repository.dataone.org/software/cicore/trunk/d1_schemas/dataonetypes.xsd

The most recent release version is available from:

  https://repository.dataone.org/software/cicore/tags/D1_SCHEMA_xxx

This document refers to the current target for release, version 1 which is
located at:

  https://repository.dataone.org/software/cicore/branches/D1_SCHEMA_V1/dataonetypes.xsd

If there are discrepancies between this document and the schema, then the
schema shall be considered authoritative.

----

.. table:: *Table 1.* Quick reference to the System Metadata elements described in
   more detail below.

   ================ =============================== ====================================== =========== ============
   Group            Element                         Type                                   Cardinality Generated By
   ================ =============================== ====================================== =========== ============
   General          \                               \                                      \           \           
   \                :attr:`identifier`              :class:`Types.Identifier`              1           Client      
   \                :attr:`dateUploaded`            :class:`Types.DateTime`                0..1        MN          
   \                :attr:`dateSysMetadataModified` :class:`Types.DateTime`                0..1        MN          
   \                :attr:`fmtid`                   :class:`Types.ObjectFormatIdentifier`  1           Client      
   \                :attr:`size`                    LongInteger                            1           Client      
   Provenance       \                               \                                      \           \           
   \                :attr:`submitter`               :class:`Types.Principal`               1           Client      
   \                :attr:`rightsHolder`            :class:`Types.Principal`               1           Client      
   \                :attr:`originMemberNode`        :class:`Types.NodeReference`           0..1        MN / CN     
   \                :attr:`authoritativeMemberNode` :class:`Types.NodeReference`           0..1        MN / CN     
   \                :attr:`obsoletes`               :class:`Types.Identifier`              0..n        Client      
   \                :attr:`obsoletedBy`             :class:`Types.Identifier`              0..n        Client / MN 
   Replication      \                               \                                      \           \           
   \                :attr:`replica`                 <<child nodes>>                        0..n        CN          
   \                :attr:`replicaMemberNode`       :class:`Types.NodeReference`           1           CN          
   \                :attr:`replicationStatus`       String                                 1           CN          
   \                :attr:`replicaVerified`         :class:`Types.DateTime`                1           CN          
   \                :attr:`replicationPolicy`       String                                 0..1        Client      
   Data Consistency \                               \                                      \           \           
   \                :attr:`checksum`                String                                 1           Client      
   \                :attr:`algorithm`               String                                 1           Client      
   Access Control   \                               \                                      \           \           
   \                :attr:`accessPolicy`            :class:`Types.AccesPolicy`             0..n        Client      
   ================ =============================== ====================================== =========== ============


----

Elements
--------

.. attribute:: identifier

  The identifier of the object that is the primary subject of the system
  metadata document.

  The unique Unicode string that is used to canonically name and identify the
  object in DataONE. Each object in DataONE is immutable, and therefore all
  objects must have a unique Identifier. If two objects are related to one
  another (such as one object is a more recent version of another object), each
  of these two objects will have unique identifiers. The relationship among the
  objects is specified in other metadata fields (see Obsoletes and ObsoletedBy),
  but this does not preclude the inclusion of version information in the
  identifier string. However, DataONE treats all Identifiers as opaque and will
  not try to infer versioning semantics based on the content of the Identifiers
  -- rather, this information is found in the Obsoletes and ObsoletedBy fields.

  Note that identifiers are used in a number of REST API calls as parts of the
  URL path. As such, all special characters such as "/", " ", "+", "\", "%"
  must be properly encoded, e.g. "%2F", "%20", "%2B", "%5C", "%25"
  respectively when used in REST method calls. See RFC3896_ for more details.
  For example, the getObject() call for an object with identifier::

    http://some.location.name/mydata.cgi?id=2088

  would be::

    http://mn1.server.name/mn/http:%2F%2Fsome.location.name%2Fmydata.cgi%3Fid%3D2088

  :Cardinality:
    1

  :ValueSpace: :class:`Types.Identifier`

  :Generated By: Client


.. _RFC3896: http://www.ietf.org/rfc/rfc3896.txt


.. attribute:: dateUploaded

  Date and time (UTC) that the object was uploaded into the DataONE system,
  which is typically the time that the object is first created on a Member
  Node using the 'create()' operation. Note this is independent of the 
  publication or release date of the object.

  :Cardinality:
    1

  :ValueSpace:
    :class:`Types.DateTime` ISO 8601 Date-time value in UTC

  :Generated By: Member Node


.. attribute:: dateSysMetadataModified

  Date and time (UTC) that this system metadata record was last modified in the 
  DataONE system. This is the same timestamp as DateUploaded until the system
  metadata is further modified.

  :Cardinality:
    1

  :ValueSpace:
    :class:`Types.DateTime` ISO 8601 Date-time value in UTC

  :Generated By: Member Node


.. attribute:: fmtid

  Designation of the standard or format that should be used to interpret the
  contents of the object. For metadata objects, this is the namespace of the
  metadata content standard, whereas for data objects it is a well-known data
  representation format. DataONE maintains a list of formats in use and their
  canonical FormatIdentifiers. The format identifier for an object should
  imply its mime type for data objects and metadata type and serialization
  format for metadata objects. Examples include the namespace of the EML 2.1
  metadata specification, the DOCTYPE of the Biological Data Profile, the mime
  type of text/csv files, and the canonincal name of the NetCDF specification.

  :Cardinality:
    1

  :ValueSpace:
    :class:`Types.ObjectFormatIdentifier`

  :Generated By: Client


.. attribute:: size

  The size of the object in bytes.

  :Cardinality:
    1

  :ValueSpace:
    long integer

  :Generated By: Client


Provenance
^^^^^^^^^^

.. attribute:: submitter

  Principal who submitted the associated abject to the DataONE Member Node. The
  Submitter is by default the RightsHolder if a RightsHolder has not been
  specified.

  :Cardinality:
    1

  :ValueSpace:
    :class:`Types.Subject`

  :Generated By: Client


.. attribute:: rightsHolder

  Principal that has ultimate authority for object and is authorized to make all
  decisions regarding the disposition and accessibility of the object. The
  rightsHolder has all rights to access the object, update the object, and grant
  permissions for the object, even if additional access control rules are not
  specified for the object.

  :Cardinality:
    1

  :ValueSpace:
    :class:`Types.Subject`

  :Generated By: Client

  .. Note::
  
     By allowing rightsHolder to be a group or organization, we are making the
     disposition of the object ambiguous if members of the collective
     disagree. It might be better to assign rightsHolder to one individual,
     and instruct that individual to grant any needed additional permissions
     to other individuals or groups. The downside of this approach is that the
     rightsHolder might not be accessible when a decision is needed (due to,
     e.g., retirement, career change, death), which then orphans the object in
     the system (which still may happen even if groups are allowed here).


.. attribute:: originMemberNode

  A reference to the Member Node that originally uploaded the associated
  object. This value should never change, even if the Member Node ceases
  to exist.
  

  :Cardinality:
    0..1

  :ValueSpace:
    :class:`Types.NodeReference`
  
  :Generated By: May be set by MN, otherwise set by the CN


.. attribute:: authoritativeMemberNode

  A reference to the Member Node that acts as the authoritative source for
  an object in the system. The AuthoritativeMemberNode will often also be the 
  OriginMemberNode, unless there has been a need to transfer authority for
  an object to a new node, such as when a Member Node becomes defunct.
  Replication should occur from the AuthoritativeMemberNode.

  :Cardinality:
    0..1

  :ValueSpace:
    :class:`Types.NodeReference`

  :Generated By: Should be set by the MN if necessary, otherwise set by the CN


.. attribute:: obsoletes

  The Identifier of an object that is a prior version of the object
  described in this system metadata record and that is obsoleted by this object.

  :Cardinality:
    0..n

  :ValueSpace:
    :class:`Types.Identifier`

  .. Note::
     System metadata is mutable because it must reflect the current state of
     objects in the system. For preservation purposes, Obsoletes and
     ObsoletedBy may be better managed in the science metadata.

  :Generated By: Client


.. attribute:: obsoletedBy

  The Identifier of an object that is a subsequent version of the object
  described in this system metadata record and that therefore obsoletes this 
  object.

  :Cardinality:
    0..n

  :ValueSpace:
    :class:`Types.Identifier`
    
  .. Note::
  
    System metadata is mutable because it must reflect the current state of 
    objects in the system. For preservation purposes, Obsoletes and ObsoletedBy
    may be better managed in the science metadata.

  :Generated By: Client, and can be set by Member Node


.. attribute:: accessPolicy

  The accessPolicy to be set for an object during a create() or update() call.
  This policy replaces any existing policies that might exist for the object.

  :Cardinality:
    0..1

  :ValueSpace:
    :class:`Types.AccessPolicy`

  :Generated By: Client

Replication
^^^^^^^^^^^

.. attribute:: replica

  A container field used to repeatedly provide several metadata fields about 
  each replica that exists in the system, or is being replicated. Note that
  a Replica field exists even for the Authoritative/Origin Member Nodes so
  that the status of those objects can be tracked.

  :Cardinality:
    0..n

  :ValueSpace: 
    Contains child metadata fields only -- no values per se

  :Generated By: Coordinating Node

  .. attribute:: replicaMemberNode

    A reference to the Member Node that houses this replica, regardless of
    whether it has arrived at the Member Node or not. See ReplicationStatus
    to determine if the replica is completely transferred.

    :Cardinality:
      1

    :ValueSpace:
      :class:`Types.NodeReference`

    :Generated By: Coordinating Node


  .. attribute:: replicationStatus

    A flag indicating the status of the replica throughout its lifecycle.
    Replicas start when they are queued for replication, then transition to
    'Requested' state when the Coordinating Node asks the Member Node to
    replicate the object, and then finish in 'Completed' state after the
    object has been transferred and the Coordinating Node is notified that
    the replication has completed. During the verification process a replica
    may be found to be corrupt, at which point it transitions to
    'Invalidated' to indicate that the replica is no longer valid and needs
    to be transferred again.

    :Cardinality:
      1

    :ValueSpace:
      'queued', 'requested', 'completed', 'invalidated'

    :Generated By: Coordinating Node


  .. attribute:: replicaVerified

    Most recent Date and time (UTC) for which this particular replica was
    verified against its canonical checksum. Because of disk errors and other
    anomolies that consistently corrupt data, all replicas need to be verified
    by comparing them to their checksum. Validation errors cause a change of
    ReplicationStatus to 'Invalidated'.

    :Cardinality:
      1

    :ValueSpace: 
      :class:`Types.DateTime` ISO 8601 Date-time value in UTC

    :Generated By: Coordinating Node


.. attribute:: replicationPolicy

  A controlled list of policy choices that determine how many replicas
  should be maintained for a given object and any preferences or
  requirements as to which Member Nodes should or are allowed to house the
  replicas that are created.
  
  - determines whether replication is allowed

  - number of replicas desired

  - list of preferred MNs (social contract, functional properties (size, etc))

  - list of blocked MNs (political, other)

  :Cardinality:
    1

  .. Note::

    This field probably will be hierarchical, or some of its subfields could
    be broken out as root level fields. Need to determine the vocabularies
    for these replication policies.

  :Generated By: Client


Data Consistency
^^^^^^^^^^^^^^^^

.. attribute:: checksum

  A calculated hash value used to validate object integrity over time and
  after network transfers. The value is calculated using a standard hashing
  algorithm that is accepted by DataONE and that is indicated in
  the included ChecksumAlgorithm attribute.

  :Cardinality:
    1

  :ValueSpace:
    :class:`Types.Checksum` 

  :Generated By: Client


.. attribute:: algorithm

  The name of the checksum algorithm used to calculate the checksum for this 
  object.

  :Cardinality:
    1

  :ValueSpace:
    AlgorithmName drawn from a DataONE controlled list of accepted algorithms.

  :Generated By: Client



Schema Document
---------------

The current development version of the system metadata schema document (version
1.0) is included here for reference. It is located in the source control
repository at:

  https://repository.dataone.org/software/cicore/trunk/d1_schemas/dataonetypes.xsd

.. literalinclude::   /d1_schemas_v1/dataonetypes.xsd
     :language: xml



Example Document
----------------

The example instance document included here was auto-generated so does not
include useful values. It is included here to provide a general indication as
to the structure of a populated system metadata document.

.. literalinclude:: /d1_schemas/instance-eg-v11.xml
   :language: xml


