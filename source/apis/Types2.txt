..
   WARNING! This file is automatically generated. Edits will be lost.

Data Types in CICore
--------------------

.. module:: v2_0.Types
   :synopsis: Catalog of data types (structures) used by the DataONE cicore.

**Quick Reference**

- :class:`v2_0.Types.FormatList`
- :class:`v2_0.Types.Log`
- :class:`v2_0.Types.LogEntry`
- :class:`v2_0.Types.Node`
- :class:`v2_0.Types.NodeList`
- :class:`v2_0.Types.ObjectFormat`
- :class:`v2_0.Types.ObjectFormatList`
- :class:`v2_0.Types.OptionList`
- :class:`v2_0.Types.Property`
- :class:`v2_0.Types.ServiceExtension`
- :class:`v2_0.Types.SystemMetadata`



.. image:: images/v2_0.classes_combined.png


..
  @startuml images/v2_0.classes_combined.png
  class v2_0.SystemMetadata {
    + seriesId : Identifier[0..1]
  }
  v2_0.SystemMetadata .. Identifier
  v2_0.SystemMetadata --|> SystemMetadata

  class v2_0.NodeList {
    + node : v2_0.Node[1..*]
  }
  v2_0.NodeList .. v2_0.Node

  class v2_0.Node {
    + serviceExtensions : v2_0.ServiceExtension[0..1]
    + property : v2_0.Property[0..*]
  }
  v2_0.Node .. v2_0.ServiceExtension
  v2_0.Node .. v2_0.Property
  v2_0.Node --|> Node

  class v2_0.ServiceExtension {
    + name : xs.string[1..1]
    + type : xs.string[0..1]
    + description : xs.string[0..1]
    + connection : xs.anyURI[0..1]
    + formats : v2_0.FormatList[0..1]
  }
  v2_0.ServiceExtension .. xs.string
  v2_0.ServiceExtension .. xs.anyURI
  v2_0.ServiceExtension .. v2_0.FormatList

  class v2_0.FormatList {
    + formatType : ObjectFormatIdentifier[1..*]
  }
  v2_0.FormatList .. ObjectFormatIdentifier

  class v2_0.Property {
    + key : xs.string
    + type : xs.string
  }
  v2_0.Property .. xs.string
  v2_0.Property .. xs.string
  v2_0.Property --|> xs.string

  class v2_0.ObjectFormat {
    + mimeType : xs.string[0..1]
    + extension : xs.string[0..1]
  }
  v2_0.ObjectFormat .. xs.string
  v2_0.ObjectFormat --|> ObjectFormat

  class v2_0.ObjectFormatList {
    + objectFormat : v2_0.ObjectFormat[1..*]
  }
  v2_0.ObjectFormatList .. v2_0.ObjectFormat
  v2_0.ObjectFormatList --|> Slice

  class v2_0.Log {
    + logEntry : v2_0.LogEntry[0..*]
  }
  v2_0.Log .. v2_0.LogEntry
  v2_0.Log --|> Slice

  class v2_0.LogEntry {
    + entryId : NonEmptyString[1..1]
    + identifier : Identifier[1..1]
    + ipAddress : xs.string[1..1]
    + userAgent : xs.string[1..1]
    + subject : Subject[1..1]
    + event : NonEmptyString[1..1]
    + dateLogged : xs.dateTime[1..1]
    + nodeIdentifier : NodeReference[1..1]
  }
  v2_0.LogEntry .. NonEmptyString
  v2_0.LogEntry .. Identifier
  v2_0.LogEntry .. xs.string
  v2_0.LogEntry .. Subject
  v2_0.LogEntry .. xs.dateTime
  v2_0.LogEntry .. NodeReference

  class v2_0.OptionList {
    + option : NonEmptyString[0..*]
    + key : xs.string[1.. 1]
    + description : xs.string[1.. 1]
  }
  v2_0.OptionList .. NonEmptyString
  v2_0.OptionList .. xs.string

  @enduml



..                                    ######
.. class:: SystemMetadata

    Extends :class:`SystemMetadata`

    System metadata (often referred to as :term:`sysmeta`) is the information used by DataONE to track and manage objects across the distributed Coordinating and Member Nodes of the network. System metadata documents contain low level information (e.g. size, type, owner, access control rules) about managed objects such as science data, science metadata, and resource map objects and the relationships between objects (e.g. *obsoletes* and *obsoletedBy*).

    The information is maintained dynamically by Coordinating Nodes and is mutable in that it reflects the current state of an object in the system. Initial properties of system metadata are generated by clients and Member Nodes. After object synchronization, the Coordinating Nodes hold authoritative copies of system metadata. Mirror copies of system metadata are maintained at each of the Coordinating nodes.

    System metadata are considered operational information needed to run DataONE, and can be read by all Coordinating Nodes and Member Nodes in the course of service provision. In order to reduce issues with third-party tracking of data status information, users can read system metadata for an object if they have the access rights to read the corresponding object which a system metadata record describes.

    System Metadata elements are partitioned into two classes: metadata elements that must be provided by client software to the DataONE system, and elements that are generated by DataONE itself in the course of managing objects.

    .. attribute:: seriesId

      Type: :class:`Identifier`

      The :term:`seriesId` is a unique Unicode string that can be used to identify an object revision chain in DataONE. When included, the seriesId can be used to reference the latest version of and object in the revision chain. API methods that rely on byte fixity (e.g. for content replication) will not accept seriesId in place of discrete identifiers. The values used for seriesId must be unique within DataONE and cannot be the same as the primary identifier of an object. The same encoding rules used for identifier values apply to seriesId values.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="SystemMetadata">
         <xs:complexContent>
            <xs:extension base="d1:SystemMetadata">
               <xs:sequence>
                  <xs:element name="seriesId" type="d1:Identifier" minOccurs="0">
                  </xs:element>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_v2_0.SystemMetadata.png

    ..
      @startuml images/class_v2_0.SystemMetadata.png

      class v2_0.SystemMetadata {
        + seriesId : Identifier[0..1]
      }
      v2_0.SystemMetadata .. Identifier
      v2_0.SystemMetadata --|> SystemMetadata

      @enduml


..                                    ######
.. class:: NodeList

    A list of :class:`Types.Node` entries returned by :func:`CNCore.listNodes()`.

    NodeList is described in :mod:`NodeList`.

    .. attribute:: node

      Type: :class:`v2_0.Types.Node`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NodeList">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" xmlns:d1_v1.1="http://ns.dataone.org/service/types/v1.1" xmlns:d1_v2.0="http://ns.dataone.org/service/types/v2.0" maxOccurs="unbounded" name="node" type="d1_v2.0:Node" minOccurs="1"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_v2_0.NodeList.png

    ..
      @startuml images/class_v2_0.NodeList.png

      class v2_0.NodeList {
        + node : v2_0.Node[1..*]
      }
      v2_0.NodeList .. v2_0.Node

      @enduml


..                                    ######
.. class:: Node

    Extends :class:`Node`

    A set of values that describe a member or coordinating node, its Internet location, and the services it supports. Several nodes may exist on a single physical device or hostname.

    .. attribute:: serviceExtensions

      Type: :class:`v2_0.Types.ServiceExtension`

      TODO: define the content of this?


    .. attribute:: property

      Type: :class:`v2_0.Types.Property`

      Allows additional attributes be added to the Node document as needed


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Node">
         <xs:complexContent>
            <xs:extension base="d1:Node">
               <xs:sequence>
                  <xs:element name="serviceExtensions" type="d1_v2.0:ServiceExtension" minOccurs="0">
                  </xs:element>
                  <xs:element name="property" type="d1_v2.0:Property" minOccurs="0" maxOccurs="unbounded">
                  </xs:element>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_v2_0.Node.png

    ..
      @startuml images/class_v2_0.Node.png

      class v2_0.Node {
        + serviceExtensions : v2_0.ServiceExtension[0..1]
        + property : v2_0.Property[0..*]
      }
      v2_0.Node .. v2_0.ServiceExtension
      v2_0.Node .. v2_0.Property
      v2_0.Node --|> Node

      @enduml


..                                    ######
.. class:: ServiceExtension

    The goal of Member Node Service Registration (MNSR) is to assist clients in discovery of services exposed by Member Nodes that may be applicable to a particular type of object

    .. attribute:: name

      Type: :class:`xs.string`

      Descriptive human-readable name of the service.


    .. attribute:: type

      Type: :class:`xs.string`

      Unique Service Type identifier.


    .. attribute:: description

      Type: :class:`xs.string`

      Brief human readable description of service to be presented in user interfaces.


    .. attribute:: connection

      Type: :class:`xs.anyURI`

      Endpoint where the service is available


    .. attribute:: formats

      Type: :class:`v2_0.Types.FormatList`

      A list of formats supported by the service.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ServiceExtension">
         <xs:sequence>
            <xs:element name="name" type="xs:string">
            </xs:element>
            <xs:element name="type" type="xs:string" minOccurs="0">
            </xs:element>
            <xs:element name="description" type="xs:string" minOccurs="0">
            </xs:element>
            <xs:element name="connection" type="xs:anyURI" minOccurs="0">
            </xs:element>
            <xs:element name="formats" type="d1_v2.0:FormatList" minOccurs="0" maxOccurs="1">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_v2_0.ServiceExtension.png

    ..
      @startuml images/class_v2_0.ServiceExtension.png

      class v2_0.ServiceExtension {
        + name : xs.string[1..1]
        + type : xs.string[0..1]
        + description : xs.string[0..1]
        + connection : xs.anyURI[0..1]
        + formats : v2_0.FormatList[0..1]
      }
      v2_0.ServiceExtension .. xs.string
      v2_0.ServiceExtension .. xs.anyURI
      v2_0.ServiceExtension .. v2_0.FormatList

      @enduml


..                                    ######
.. class:: FormatList

    A list of ObjectFormatId elements

    .. attribute:: formatType

      Type: :class:`ObjectFormatIdentifier`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="FormatList">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" xmlns:d1_v1.1="http://ns.dataone.org/service/types/v1.1" xmlns:d1_v2.0="http://ns.dataone.org/service/types/v2.0" name="formatType" type="d1:ObjectFormatIdentifier" minOccurs="1" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_v2_0.FormatList.png

    ..
      @startuml images/class_v2_0.FormatList.png

      class v2_0.FormatList {
        + formatType : ObjectFormatIdentifier[1..*]
      }
      v2_0.FormatList .. ObjectFormatIdentifier

      @enduml


..                                    ######
.. class:: Property

    Additional Property elements can be included to describe the Node in more detail. Some properties will come from controlled vocabularies, indicated by the type attribute, while others will be free-form key value pairs.

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Property">
         <xs:simpleContent>
            <xs:extension base="xs:string">
               <xs:attribute name="key" type="xs:string" use="required">
               </xs:attribute>
               <xs:attribute name="type" type="xs:string" use="optional">
               </xs:attribute>
            </xs:extension>
         </xs:simpleContent>
      </xs:complexType>


    .. image:: images/class_v2_0.Property.png

    ..
      @startuml images/class_v2_0.Property.png

      class v2_0.Property {
        + key : xs.string
        + type : xs.string
      }
      v2_0.Property .. xs.string
      v2_0.Property .. xs.string
      v2_0.Property --|> xs.string

      @enduml


..                                    ######
.. class:: ObjectFormat

    Extends :class:`ObjectFormat`

    One value from the DataONE Object Format Vocabulary which is returned by :func:`CNCore.getFormat()`.

    An *ObjectFormat* is the structure returned from the :func:`CNCore.getFormat()` method of the CN REST interface. It provides the unique identifier and the name associated with the object format. Future versions may contain additional structured content from external common typing systems.

    .. attribute:: mimeType

      Type: :class:`xs.string`

      The MIME type for this object format.


    .. attribute:: extension

      Type: :class:`xs.string`

      The extension to be used when serializing the object to a file.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectFormat">
         <xs:complexContent>
            <xs:extension base="d1:ObjectFormat">
               <xs:sequence>
                  <xs:element name="mimeType" type="xs:string" minOccurs="0">
                  </xs:element>
                  <xs:element name="extension" type="xs:string" minOccurs="0">
                  </xs:element>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_v2_0.ObjectFormat.png

    ..
      @startuml images/class_v2_0.ObjectFormat.png

      class v2_0.ObjectFormat {
        + mimeType : xs.string[0..1]
        + extension : xs.string[0..1]
      }
      v2_0.ObjectFormat .. xs.string
      v2_0.ObjectFormat --|> ObjectFormat

      @enduml


..                                    ######
.. class:: ObjectFormatList

    Extends :class:`Slice`

    An ObjectFormatList is the structure returned from the :func:`CNCore.listFormats()` method of the CN REST interface. It provides a list of named object formats defined in the DataONE system. Each :class:`Types.ObjectFormat` returned in the list describes the object format via its name, and future versions may contain additional structured content from common external typing systems.

    .. attribute:: objectFormat

      Type: :class:`v2_0.Types.ObjectFormat`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectFormatList">
         <xs:complexContent>
            <xs:extension base="d1:Slice">
               <xs:sequence>
                  <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" xmlns:d1_v1.1="http://ns.dataone.org/service/types/v1.1" xmlns:d1_v2.0="http://ns.dataone.org/service/types/v2.0" name="objectFormat" type="d1_v2.0:ObjectFormat" minOccurs="1" maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_v2_0.ObjectFormatList.png

    ..
      @startuml images/class_v2_0.ObjectFormatList.png

      class v2_0.ObjectFormatList {
        + objectFormat : v2_0.ObjectFormat[1..*]
      }
      v2_0.ObjectFormatList .. v2_0.ObjectFormat
      v2_0.ObjectFormatList --|> Slice

      @enduml


..                                    ######
.. class:: Log

    Extends :class:`Slice`

    Represents a collection of :class:`Types.LogEntry` elements, used to transfer log information between DataONE components.

    .. attribute:: logEntry

      Type: :class:`v2_0.Types.LogEntry`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Log">
         <xs:complexContent>
            <xs:extension base="d1:Slice">
               <xs:sequence>
                  <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" xmlns:d1_v1.1="http://ns.dataone.org/service/types/v1.1" xmlns:d1_v2.0="http://ns.dataone.org/service/types/v2.0" name="logEntry" type="d1_v2.0:LogEntry" minOccurs="0" maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_v2_0.Log.png

    ..
      @startuml images/class_v2_0.Log.png

      class v2_0.Log {
        + logEntry : v2_0.LogEntry[0..*]
      }
      v2_0.Log .. v2_0.LogEntry
      v2_0.Log --|> Slice

      @enduml


..                                    ######
.. class:: LogEntry

    A single log entry as reported by a Member Node or Coordinating Node through the :func:`MNCore.getLogRecords` or :func:`CNCore.getLogRecords` methods.

    .. attribute:: entryId

      Type: :class:`NonEmptyString`

      A unique identifier for this log entry. The identifier should be unique for a particular node; This is not drawn from the same value space as other identifiers in DataONE, and so is not subjec to the same restrictions.


    .. attribute:: identifier

      Type: :class:`Identifier`

      The :term:`identifier` of the object that was the target of the operation which generated this log entry.


    .. attribute:: ipAddress

      Type: :class:`xs.string`

      The IP address, as reported by the service receiving the request, of the request origin.


    .. attribute:: userAgent

      Type: :class:`xs.string`

      The user agent of the client making the request, as reported in the User-Agent HTTP header.


    .. attribute:: subject

      Type: :class:`Subject`

      The :term:`Subject` used for making the request. This may be the DataONE :term:`public` user if the request is not authenticated, otherwise it will be the *Subject* of the certificate used for authenticating the request.


    .. attribute:: event

      Type: :class:`NonEmptyString`

      A non-empty string that indicates the type of even logged. A value from the :class:`Types.Event` enumeration is recommended but no longer required.


    .. attribute:: dateLogged

      Type: :class:`xs.dateTime`

      A :class:`Types.DateTime` time stamp indicating when the event triggering the log message ocurred. Note that all time stamps in DataONE are in UTC.


    .. attribute:: nodeIdentifier

      Type: :class:`NodeReference`

      The unique identifier for the node where the log message was generated.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="LogEntry">
         <xs:sequence>
            <xs:element name="entryId" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="identifier" type="d1:Identifier" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="ipAddress" type="xs:string" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="userAgent" type="xs:string" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="event" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="dateLogged" type="xs:dateTime" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="nodeIdentifier" type="d1:NodeReference" minOccurs="1" maxOccurs="1">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_v2_0.LogEntry.png

    ..
      @startuml images/class_v2_0.LogEntry.png

      class v2_0.LogEntry {
        + entryId : NonEmptyString[1..1]
        + identifier : Identifier[1..1]
        + ipAddress : xs.string[1..1]
        + userAgent : xs.string[1..1]
        + subject : Subject[1..1]
        + event : NonEmptyString[1..1]
        + dateLogged : xs.dateTime[1..1]
        + nodeIdentifier : NodeReference[1..1]
      }
      v2_0.LogEntry .. NonEmptyString
      v2_0.LogEntry .. Identifier
      v2_0.LogEntry .. xs.string
      v2_0.LogEntry .. Subject
      v2_0.LogEntry .. xs.dateTime
      v2_0.LogEntry .. NodeReference

      @enduml


..                                    ######
.. class:: OptionList

    A list of options that indicate the possible values for a DataONE service. Each option that can be validly sent to a service is listed, providing the specific key that should be used when interacting with the service, as well as a description of that key that allows API users to understand the usage of the key. For example, an OptionList might contain a list of themes that can be used with the MNView.view service, or for other services that have a configurable but controlled set of parameters.

    .. attribute:: option

      Type: :class:`NonEmptyString`

      The key to be used within an API call to a DataONE service, including a description of the key and its impact on the service. For example, a key 'default' can be provided as the theme for the MNView.view service. Keys must not contain characters that will need to be URL escaped.


    .. attribute:: key

      Type: :class:`xs.string`

      A value that can be used with a DataONE service. Key values must not contain any characters that need to be URL escaped, and should be short and informative.


    .. attribute:: description

      Type: :class:`xs.string`

      The description of an option, indicating its intended use and impact on a DataONE service invocation.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="OptionList">
         <xs:sequence>
            <xs:element name="option" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
         </xs:sequence>
         <xs:attribute name="key" use="required" type="xs:string">
         </xs:attribute>
         <xs:attribute name="description" use="required" type="xs:string">
         </xs:attribute>
      </xs:complexType>


    .. image:: images/class_v2_0.OptionList.png

    ..
      @startuml images/class_v2_0.OptionList.png

      class v2_0.OptionList {
        + option : NonEmptyString[0..*]
        + key : xs.string[1.. 1]
        + description : xs.string[1.. 1]
      }
      v2_0.OptionList .. NonEmptyString
      v2_0.OptionList .. xs.string

      @enduml

