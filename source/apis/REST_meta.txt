The System Metadata Collection ``/meta``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _MN_crud.getSystemMetadata:
.. _CN_crud.getSystemMetadata:

``GET /meta/<pid>``
...................

Requests the :class:`Types.SystemMetadata` for the specified object. Although
this access point is supported by both Member and Coordinating Nodes, only the
responses from Coordinating Nodes should be considered authoritative,
especially with respect to the :attr:`SystemMetadata.replica` entries.

The ``/meta`` response format defaults to ``text/xml`` and is the only
format currently supported. Other formats such as JSON may be supported in the
future.


Implemented by the methods:

- :func:`MN_crud.getSystemMetadata`

- :func:`CN_crud.getSystemMetadata`

Returns :class:`Types.SystemMetadata`


**Examples**

(GET) Retrieve system metadata from a Member Node for object "XYZ332" which
happens to be science metadata (an EML document) that describes dataset
identified by "XYZ333"::

  curl http://m1.dataone.org/meta/XYZ332

  <?xml version="1.0" encoding="UTF-8"?>
  <d1:systemMetadata xmlns:d1="http://dataone.org/coordinating_node_sysmeta_0.1"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://dataone.org/coordinating_node_sysmeta_0.1 https://repository.dataone.org/software/cicore/trunk/schemas/coordinating_node_sysmeta.xsd">
      <!-- This instance document was auto generated by oXygen XML for testing purposes.
           It contains no useful information.
      -->
      <identifier>Identifier0</identifier>
      <objectFormat>eml://ecoinformatics.org/eml-2.0.1</objectFormat>
      <size>0</size>
      <submitter>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</submitter>
      <rightsHolder>uid=jones,o=NCEAS,dc=ecoinformatics,dc=org</rightsHolder>
      <describes>XYZ333</describes>
      <checksum algorithm="SHA-1">2e01e17467891f7c933dbaa00e1459d23db3fe4f</checksum>
      <embargoExpires>2006-05-04T18:13:51.0Z</embargoExpires>
      <accessRule rule="allow" service="read" principal="Principal0"/>
      <accessRule rule="allow" service="read" principal="Principal1"/>
      <replicationPolicy replicationAllowed="true" numberReplicas="2">
          <preferredMemberNode>MemberNode12</preferredMemberNode>
          <preferredMemberNode>MemberNode13</preferredMemberNode>
          <blockedMemberNode>MemberNode6</blockedMemberNode>
          <blockedMemberNode>MemberNode7</blockedMemberNode>
      </replicationPolicy>
      <dateUploaded>2006-05-04T18:13:51.0Z</dateUploaded>
      <dateSysMetadataModified>2009-05-04T18:13:51.0Z</dateSysMetadataModified>
      <originMemberNode>mn1.dataone.org/</originMemberNode>
      <authoritativeMemberNode>mn1.dataone.org/</authoritativeMemberNode>
  </d1:systemMetadata>


(GET) Attempt to retrieve system metadata for an object that does not exist.::

  curl http://cn.dataone.org/cn/meta/SomeObjectID

  <error errorCode='404' detailCode='4060'>
    <description>The specified object does not exist on this node.</description>
    <traceInformation>
      <value key='identifier'>SomeObjectID</value>
      <value key='method'>cn.getSystemMetadat</value>
      <value key='hint'>http://cn.dataone.org/cn/resolve/SomeObjectID</value>
    </traceInformation>
  </error>


``HEAD /meta/<pid>``
....................

HEAD     Returns basic information about the system metadata object.

         ``Last-Modified:`` Date collection was last modified.

         ``Content-Type:`` The MIME type of the object

         ``Content-Length:`` Byte size of the object


.. _MN_crud.getChecksum:

``GET /checksum/<pid>``
.......................

Implemented by the methods:

-:func:`MN_crud.getChecksum`

Returns :class:`Types.Checksum`

.. _MN_authorization.isAuthorized:
.. _CN_authorization.isAuthorized:


``GET /isAuthorized/<pid>``
...........................

Implemented by the methods:

- :func:`MN_authorization.isAuthorized` 
- :func:`CN_authorization.isAuthorized`

Returns a boolean result.  "1" = true, "0" = false.


.. _CN_crud.assertRelation:

``GET /assertRelation/<pidOfSubject>``
......................................

Implemented by the methods:

- :func:`CN_crud.assertRelation`

Returns a boolean result. "1" = true, "0" = false.


``GET /accessRules/<pid>``
..........................

pass


.. _CN_authorization.setAccess:

``PUT /accessRules/<pid>``
..........................

Implemented by the methods:

- :func:`CN_authorization.setAccess`

Returns a boolean result. "1" = true, "0" = false.


``GET /owner/<pid>``
....................

pass


.. _CN_authentication.setOwner:

``PUT /owner/<pid>``
....................

Implemented by the methods:

- :func:`CN_authentication.setOwner`

Returns :class:`Types.Identifier`
