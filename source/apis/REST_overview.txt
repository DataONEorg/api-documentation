REST Interface Overview
-----------------------

This document describes how the Member (:doc:`MN_APIs`) and Coordinating
(:doc:`CN_APIs`) Node APIs are implemented using a Representational State
Transfer (REST) approach over HTTP.

- Content is modeled as collections, with :class:`PIDs <Types.Identifier>`
  identifying individual items of a collection.

- The HTTP verbs HEAD, GET, POST, PUT, DELETE are used for retrieving
  information about content, retrieving content, creating content, updating
  content, and deleting content respectively.

- State information, if required, is passed in the HTTP headers.

- Identity transfer is performed using SSL, with the :term:`subject` certificate
  accessible through implementation specific mechanisms supported by the
  respective server environment.

- Hints to support efficient caching (e.g. content time stamps) should be
  respected. Caching is an important mechanism for achieving scalability.

- Several URL patterns described in these documents support parameters as key,
  value pairs. Unless otherwise indicted, the key and value are case sensitive
  and SHOULD be preserved or the request MAY be rejected with an
  :exc:`Exceptions.InvalidRequest` exception.

Collections exposed by :term:`Member Node`\s and :term:`Coordinating Node`\s
include:

:``/object``:
  The set of objects available for retrieval from the node.

:``/meta``:
  Metadata about objects available for retrieval from the node.
  
:``/formats``:
  Object formats registered on the node.

:``/log``:
  Log records held on the node.

:``/reserve``:
  Identifiers that have been reserved for future use.

:``/accounts``:
  Principal and ownership related functionality.

:``/sessions``:
  Authenticated session management functions.

:``/node``:
  Service and status information for all nodes on the system.

:``/monitor``: 
  Node health monitoring

:``/replicate``:
  Member node to member node replication functionality


REST Endpoint Summary
~~~~~~~~~~~~~~~~~~~~~

.. include:: generated/generated_rest_summarytable.txt


Message Serialization
~~~~~~~~~~~~~~~~~~~~~

The format of the response (except for responses from :func:`MNRead.get` or
:func:`CNRead.get`) is determined by the *Accept:* header provided in the
request. 

The default serialization format is XML and MUST be supported by all services.

Acceptable content types include:

:``application/json``:
   The response structure is returned as a JSON_ encoded string. The service
   should support an additional parameter "jsonvar" which would cause the
   value of the parameter to be set as a variable name for the resulting JSON
   block (e.g. ``&jsonvar=rs1`` would cause the JSON output to be "rs1=...").

:``text/xml``:

  The response is serialized as XML.

:``application/rdf+xml``:

  The response is serialized in RDF-XML.

:``text/csv``:

  The response is serialized as a comma delimited set of fields, with records
  delimited by a new line.

:``text/html``:

  A HTML rendering of the response.

Regardless of the format, the response is always encoded using the UTF-8
character set.

If the service is not able to provide a response in the specified format, then
the node should return an error code of :exc:`Exceptions.NotImplemented`, with
the HTTP error code set to 406.


.. _JSON: http://www.json.org/


Parameters in Requests
~~~~~~~~~~~~~~~~~~~~~~

Many of the URL patterns described here accept parameters in the URL and as
components of a MIME multipart-mixed message body.

Unless otherwise indicated, all parameter names and values should be considered
case sensitive. 

:Session Information:

  Session information (formerly referred to as a *token*) is obtained from the
  client side authentication certificate held by the SSL processing library of
  the HTTPS service handling the request. Hence, even though a *session*
  parameter may be present in the method signature, the session information
  itself is transported as part of the HTTPS handshaking process and is not
  present in the body or header section of the HTTP request.

:Boolean Parameters in URLs:

  Where a boolean parameter value is being specified as the value portion of a
  key-value pair appearing in a URL, the strings "true" and "false" MUST be
  used to indicate logical true and logical false respectively.

:Message Body in PUT or POST:

  Requests sent using the HTTP POST or PUT verbs MUST use MIME multipart-mixed
  encoding of the message body as described in RFC2046_. In most cases and
  unless otherwise indicated, all the parameters except the authorization
  token will be sent in the message body (as opposed to URL parameters).

.. _RFC2046: http://tools.ietf.org/html/rfc2046#section-5.1.3



.. 
  Wildcards and Range Operators
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Several of the REST calls support filtering using wildcards and/or range
  operators. When such filtering is supported, it is explicitly noted in the
  documentation for a given REST call.

  The basic approach is the use of name/value pairs (NVPs) in the URL to
  construct a filter for restricting results to a portion of a data set. All
  NVPs are combined using the AND operator.

  Wildcards are typically supported for string values and allow substring
  filters to be specified by including one or more of the following wildcard
  characters in the string.

  :\*: Match a string of zero or more random characters
  :\?: Match a single random character

  Range operators are typically supported for values that represent a continuous
  series, such as byte sizes and datetimes. A range operator is specified by
  appending it to a name. Valid range operators are:

  ======= ===========================
  Suffix  Range Operator
  ======= ===========================
  None    Equals (==) (default)
  _eq     Equals (==)
  _lt     Less than (<)
  _le     Less than or equals (<=)
  _gt     Greater than (>)
  _ge     Greater than or equals (>=)
  ======= ===========================

  Wildcards and range operators cannot be combined in a single NVP.

  **Examples**

  Return only objects that have been modified since 6AM on the first of January,
  2010 UTC::

    ../object?qt=nvp&lastModified_gt=2010-01-01T06:00:00Z

  Return only objects that were last modified in 2005::

    ../object?qt=nvp&lastModified_ge=2005-01-01-T00:00:00Z&lastModified_lt=2006-01-01-T00:00:00Z

  .. TODO:: Define the fields that should be supported for filtering for each type of collection.


