..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_authorization`
   :widths: 10 10 30
   :header-rows: 1

   * - REST
     - Function
     - Parameters
   * - :ref:`MN_authorization.isAuthorized`
     - :func:`isAuthorized`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`,
       :class:`operation<Types.Event>`) ``->`` boolean




.. function:: isAuthorized(token,pid,operation) -> boolean

   Test if the user identified by the provided token has authorization for
   operation on the specified object.

   .. Note:: Should perhaps add convenience methods for "canRead()" and
     "canWrite()" to verify that a user is able to read / write an object.

   :Use Cases:

     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC37 </design/UseCases/37_uc>`

   :REST URL: MN :ref:`MN_authorization.isAuthorized`

   :param token:

   :type token: :class:`Types.AuthToken`

   :param pid:

   :type pid: :class:`Types.Identifier`

   :param operation:

   :type operation: :class:`Types.Event`

   :returns: True if the operation is allowed

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1760)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1780)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1800)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1820)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1840)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1761)``


