..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CN_core`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /formats``
     - :func:`listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - ``GET /formats/{fmtid}``
     - :func:`getFormat`
     - (:class:`fmtid<Types.Identifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - ``GET /log``
     - :func:`getLogRecords`
     - (:class:`cert<Types.X509Certificate>`, :class:`fromDate<Types.DateTime>`,
       :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`) ``->``
       :class:`Types.LogRecords`
   * - Tier 1
     - ``GET /node``
     - :func:`listNodes`
     - () ``->`` :class:`Types.NodeList`




.. function:: listFormats() -> ObjectFormatList

   Returns a list of all object formats registered in the DataONE Object Format
   Vocabulary.

   :REST URL: ``GET /formats``

   :returns: The list of object formats registered in the DataONE Object Format
     Vocabulary

   :rtype: :class:`Types.ObjectFormatList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4840)``

     The service is not implemented.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4841)``

     Unexpected exception from the service.


   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4842)``

     The request was invalid.


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4843)``

     The object formats collection could not be found at this node.


   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4844)``

     The object formats collection could not be found at this node.



.. include:: ../examples/cn_listObjectFormats.txt




.. function:: getFormat(fmtid) -> ObjectFormat

   Returns the object format registered in the dataONE Object Format Vocabulary
   for the given format identifier.

   :REST URL: ``GET /formats/{fmtid}``

   :param fmtid: Unique Identifier for the object format

   :type fmtid: :class:`Types.Identifier`

   :returns: The object format registered in the DataONE Object Format
     Vocablulary

   :rtype: :class:`Types.ObjectFormat`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4845)``

     The service is not implemented.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4846)``

     Unexpected exception from the service.


   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4847)``

     The request was invalid.


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4848)``

     The format specified by *fmtid* does not exist at this node.


   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4849)``

     The object format could not be found at this node.



.. include:: ../examples/cn_getFormat.txt




.. function:: getLogRecords(cert,fromDate,[toDate],[event]) -> LogRecords

   Retrieves consolidated log information for the specified date range
   (inclusive) for the entire DataONE infrastructure

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``GET /log``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param fromDate: Starting time for records in response

   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response. If not specified, then
     defaults to now.

   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.
     Default is all.

   :type event: :class:`Types.Event`

   :returns:

   :rtype: :class:`Types.LogRecords`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

.. TODO::
    Define the response structure and access control rules

.. TODO::
    getLogRecords should really be able to respond to a query rather than just a
    simple date range




.. function:: listNodes() -> NodeList

   Returns a list of nodes that have been registered with the DataONE
   infrastructure.

   :Use Cases:

     :doc:`UC39 </design/UseCases/39_uc>`

   :REST URL: ``GET /node``

   :returns: List of nodes

   :rtype: :class:`Types.NodeList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4800)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4801)``


