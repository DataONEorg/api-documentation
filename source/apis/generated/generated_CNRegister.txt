..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNRegister`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 2
     - ``PUT /node/{pid}``
     - :func:`addNodeCapabilities`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``POST /node``
     - :func:`register`
     - (:class:`session<Types.Session>`) ``->`` :class:`Types.Identifier`




.. function:: addNodeCapabilities(session,pid,capabilities) -> Boolean

   

   :REST URL: ``PUT /node/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param capabilities:
   :type capabilities: 

   :returns: True if operation is successful
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4820)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4821)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4822)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4823)``




.. function:: register(session,capabilities) -> Identifier

   

   :REST URL: ``POST /node``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param capabilities:
   :type capabilities: 

   :returns: The identifier of the new node entry.
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4840)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4841)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4842)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4843)``


