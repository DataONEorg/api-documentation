..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNIdentity`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 2
     - ``POST /accounts``
     - :func:`registerAccount`
     - (:class:`session<Types.Session>`, :class:`person<Types.Person>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - ``PUT /accounts``
     - :func:`updateAccount`
     - (:class:`session<Types.Session>`, :class:`person<Types.Person>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - ``POST /accounts/{subject}``
     - :func:`verifyAccount`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``GET /accounts/{subject}``
     - :func:`getSubjectInfo`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.SubjectList`
   * - Tier 2
     - ``GET /accounts?query={query}[&start={start}&count={count}]``
     - :func:`listSubjects`
     - (:class:`session<Types.Session>`, :class:`query<Types.String>`, ``start``, ``count``) ``->`` :class:`Types.SubjectList`
   * - Tier 2
     - ``POST /accounts/map``
     - :func:`mapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``POST /accounts/map``
     - :func:`confirmMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``POST /groups/{groupName}``
     - :func:`createGroup`
     - (:class:`session<Types.Session>`, :class:`groupName<Types.Subject>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``PUT /groups/{groupName}``
     - :func:`addGroupMembers`
     - (:class:`session<Types.Session>`, :class:`groupName<Types.Subject>`, :class:`members<Types.SubjectList>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``DELETE /groups/{groupName}``
     - :func:`removeGroupMembers`
     - (:class:`session<Types.Session>`, :class:`groupName<Types.Subject>`, :class:`members<Types.SubjectList>`) ``->`` :class:`Types.Boolean`




.. function:: registerAccount(session,person) -> Subject

   Create a new :term:`subject` in the DataONE system. Note that there should probably be a lot more metadata captured about the new user, and there should be a mechanism for specifying the default access control rules for the new account.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /accounts``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param person: Information about the Person to be registered with the account, including the real name and email address for the individual.  The Subject with the Person must match the subject of the X.509 certificate associated with the authenticated SSL session via client-side authentication, and must not have been registered previously.
   :type person: :class:`Types.Person`

   :returns: The new subject in the DataONE system.  This may be a simple identifier.
   :rtype: :class:`Types.Subject`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4520)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4521)``

     The chosen identity already exists in the system

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4522)``

     Raised if the supplied credentials are invalid, such as an invalid X.509 certificate.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4523)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4524)``




.. function:: updateAccount(session,person) -> Subject

   Update an existing :term:`subject` in the DataONE system. The target subject is determined from the X509Certificate. Note that there should probably be a policy for verifying the details that change via this method.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``PUT /accounts``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param person: New information about the Person. The subject of the Person cannot be updated with this method and must match the subject of the X.509 certificate associated with the authenticated SSL session via client-side authentication.
   :type person: :class:`Types.Person`

   :returns: The Subject in the DataONE system that was updated.
   :rtype: :class:`Types.Subject`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4530)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4531)``

     Raised if the supplied credentials are invalid, such as an invalid X.509 certificate.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4532)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4533)``




.. function:: verifyAccount(session,subject) -> Boolean

   Verify that the Person data associated with this Subject is a true representation of the real world person.

   This service can only be called by users who have an administrative role for the domain of users in question.

   :REST URL: ``POST /accounts/{subject}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param subject: The Subject identifier of the Person to be verified.  After this service is called for a subject by an authorized user, the account is marked as verified by this user.
   :type subject: :class:`Types.Subject`

   :returns: True if the account verification succeeds, otherwise false.
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4540)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4541)``

     This error is raised if the person attempting to validate the account is not authorized to verify accounts.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4542)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4543)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4544)``




.. function:: getSubjectInfo(session,subject) -> SubjectList

   Get the information about a Person (their equivalent identities, and the Groups to which they belong) or the Group (including members).

   :Use Cases:
     :doc:`UC12 </design/UseCases/12_uc>`
   :REST URL: ``GET /accounts/{subject}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param subject: The Subject identifier of the Person or Group details to be returned.
   :type subject: :class:`Types.Subject`

   :returns: The Person or Group details are contained in the returned SubjectList for the given Subject
   :rtype: :class:`Types.SubjectList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4560)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4561)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4562)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4563)``




.. function:: listSubjects(session,query,start,count) -> SubjectList

   List the subjects, including users, groups, and systems, that match search criteria.

   The list can be restricted to subjects whose identifier matches certain substrings, and the size of the resultset can be paged through.

   :REST URL: ``GET /accounts?query={query}[&start={start}&count={count}]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param query: A query string criteria to be matched using a case-insensitive substring match against the identifier for the principal, the givenName or familyName of users, and the groupName of groups.  The function returns the union of all successful matches against these fields.
   :type query: :class:`Types.String`

   :param start: The starting record number for the records to be returned.
   :type start: integer

   :param count: The number of records to be returned.
   :type count: integer

   :returns: The list of people and groups that match the query.
   :rtype: :class:`Types.SubjectList`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2290)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2270)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2260)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2261)``




.. function:: mapIdentity(session,subject) -> Boolean

   Map the two authenticated identities, asserting that they represent the same subject.

   Mapping identities is a two-step process wherein a map request is made by a primary Subject and a subsequent (confirmation) map request is made by the secondary Subject. This ensures that mappings are performed only by those that have authority to do so.

   :REST URL: ``POST /accounts/map``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service.
   :type session: :class:`Types.Session`

   :param subject: The Subject identifier to be used for equivalentIdentity. This Subject will not match the Subject named in the certificate.
   :type subject: :class:`Types.Subject`

   :returns: True if the mapping was successfully initiated, false otherwise.
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2390)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2370)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2360)``

     The supplied principal does not have permission to map these two identities

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2340)``

     The specified principal does not exist in the DataONE system

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2361)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2342)``




.. function:: confirmMapIdentity(session,subject) -> Boolean

   Confirms a previously initiated identity mapping. If subject A asserts that B is the same identity through :func:`CNIdentity.mapIdentity`, then this method is called by B to confirm that assertion.

   :REST URL: ``POST /accounts/map``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service.
   :type session: :class:`Types.Session`

   :param subject: The Subject identifier to be used for equivalentIdentity. This Subject will not match the Subject named in the certificate.
   :type subject: :class:`Types.Subject`

   :returns: True if the map was successfully created, false otherwise.
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2390)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2370)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2360)``

     The supplied principal does not have permission to map these two identities

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2340)``

     The specified principal does not exist in the DataONE system

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2361)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2342)``




.. function:: createGroup(session,groupName) -> Boolean

   Create a group with the given name.

   Groups are lists of subjects that allow all members of the group to be referenced by listing solely the subject name of the group.  Group names must be unique within the DataONE system, and can only be modified by their creator.

   :REST URL: ``POST /groups/{groupName}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param groupName: The name of the group to be created.
   :type groupName: :class:`Types.Subject`

   :returns: True if group was created successfully, false otherwise
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2470)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2460)``

     The supplied principal does not have permission to create a group

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2440)``

     The specified principal does not exist in the DataONE system

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2442)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=2400)``

     A group by this name already exists




.. function:: addGroupMembers(session,groupName,members) -> Boolean

   Add members to the named group.

   Group members can be added by the original creator of the group, otherwise a NotAuthorized exception is thrown.  Group members are provided as a list of subjects to be added to the group.

   :REST URL: ``PUT /groups/{groupName}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param groupName: The identifier of the group to be modified.
   :type groupName: :class:`Types.Subject`

   :param members: The list of members to be added to the group.
   :type members: :class:`Types.SubjectList`

   :returns: True if the group that was modified successfully, false otherwise
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2590)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2570)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2560)``

     The supplied principal does not have permission to add to a group

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2540)``

     The specified group does not exist in the DataONE system

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2561)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2542)``




.. function:: removeGroupMembers(session,groupName,members) -> Boolean

   Remove members to the named group.

   Group members can be removed by the original creator of the group, otherwise a NotAuthorized exception is thrown.  Group members are provided as a list of subjects to be removed from the group.

   :REST URL: ``DELETE /groups/{groupName}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param groupName: The identifier of the group to be modified.
   :type groupName: :class:`Types.Subject`

   :param members: The list of members to be removed from the group.
   :type members: :class:`Types.SubjectList`

   :returns: True if the group that was modified successfully, false otherwise
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2690)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2670)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2660)``

     The supplied principal does not have permission to remove from a group

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2640)``

     The specified group does not exist in the DataONE system

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2661)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2642)``

.. TODO::
    Evaluate the REST endpoint for this method and determine if DELETE is the appropriate http method.

