..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MNCore`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /monitor/ping``
     - :func:`ping`
     - () ``->`` null
   * - Tier 1
     - ``GET /log``
     - :func:`getLogRecords`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`, ``[start=0]``, ``[count=1000]``) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``GET /  and  GET /node``
     - :func:`getCapabilities`
     - () ``->`` :class:`Types.Node`




.. function:: ping() -> null

   Low level "are you alive" operation. A valid ping response is indicated by a HTTP status of 200. A timestmap indicating the current system time (UTC) on the node MUST be returned in the HTTP Date header.

   The Member Node should perform some minimal internal functionality testing before answering. However, ping checks will be frequent (every few minutes) so the internal functionality test should not be high impact.

   Any status response other than 200 indicates that the node is offline for DataONE operations.

   Note that the timestamp returned in the Date header should follow the semantics as described in the HTTP specifications, http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18

   The response body will be ignored by the caller expect in the case of an error, in which case the response body should contain the appropriate DataONE exception.

   :Use Cases:
     :doc:`UC10 </design/UseCases/10_uc>`
   :REST URL: ``GET /monitor/ping``
   :returns: Null body or Exception
   :rtype: null

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2042)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2045)``

     A ping response may return InsufficientResources if for example the system is in a state where normal DataONE operations may be impeded by an unusually high load on the node.


.. include:: ../examples/ping.txt




.. function:: getLogRecords(session,[fromDate],[toDate],[event],[start=0],[count=1000]) -> Log

   Retrieve log information from the Member Node for the specified date range and even type.

   This method is used primarily by the log aggregator to generate aggregate statistics for nodes, objects, and the methods of access.

   The response MUST contain only records for which the requestor has permission to read.

   Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed.

   :REST URL: ``GET /log``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param fromDate: Records with time stamp greater than or equal to (>=) this value will be returned.
   :type fromDate: :class:`Types.DateTime`

   :param toDate: Records with a time stamp less than (<) this value will be returned. If not specified, then defaults to *now*.
   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.  Default is *all*.
   :type event: :class:`Types.Event`

   :param start=0: Optional zero based offset from the first record in the set of matching log records. Used to assist with paging the response.
   :type start=0: integer

   :param count=1000: Optional maximum number of log records to return in the response. Used to assist with paging the response.
   :type count=1000: integer

   :returns:
   :rtype: :class:`Types.Log`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

     The request parameters were malformed or an invalid date range was specified.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``


.. include:: ../examples/getLogRecords.txt




.. function:: getCapabilities() -> Node

   Returns a document describing the capabilities of the Member Node.

   The response at the Member Node base URL is for convenience only. Clients of Member Nodes SHOULD use the /node URL to retrieve the node capabilities document.

   :REST URL: ``GET /  and  GET /node``
   :returns: The technical capabilities of the Member Node
   :rtype: :class:`Types.Node`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2160)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2162)``


