..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNCore`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /formats``
     - :func:`listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - ``GET /formats/{fmtid}``
     - :func:`getFormat`
     - (:class:`fmtid<Types.ObjectFormatIdentifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - ``GET /log?fromdate={fromDate}[&todate={toDate}&event={event}]``
     - :func:`getLogRecords`
     - (:class:`session<Types.Session>`, :class:`fromDate<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``GET /node``
     - :func:`listNodes`
     - () ``->`` :class:`Types.NodeList`
   * - Tier 1
     - ``POST /meta``
     - :func:`registerSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Boolean`




.. function:: listFormats() -> ObjectFormatList

   Returns a list of all object formats registered in the DataONE Object Format Vocabulary.

   :REST URL: ``GET /formats``
   :returns: The list of object formats registered in the DataONE Object Format Vocabulary
   :rtype: :class:`Types.ObjectFormatList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4840)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4841)``

     Unexpected exception from the service.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4842)``

     The request was invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4843)``

     The object formats collection could not be found at this node.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4844)``

     The object formats collection could not be found at this node.


.. include:: ../examples/cn_listObjectFormats.txt




.. function:: getFormat(fmtid) -> ObjectFormat

   Returns the object format registered in the DataONE Object Format Vocabulary for the given format identifier.

   :REST URL: ``GET /formats/{fmtid}``
   :param fmtid: Unique ObjectFormatIdentifier for the object format
   :type fmtid: :class:`Types.ObjectFormatIdentifier`

   :returns: The object format registered in the DataONE Object Format Vocablulary
   :rtype: :class:`Types.ObjectFormat`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4845)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4846)``

     Unexpected exception from the service.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4847)``

     The request was invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4848)``

     The format specified by *fmtid* does not exist at this node.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4849)``

     The object format could not be found at this node.


.. include:: ../examples/cn_getFormat.txt




.. function:: getLogRecords(session,fromDate,[toDate],[event]) -> Log

   Retrieves consolidated log information for the specified date range (inclusive) for the entire DataONE infrastructure

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /log?fromdate={fromDate}[&todate={toDate}&event={event}]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param fromDate: Starting time for records in response
   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response. If not specified, then defaults to now.
   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.  Default is all.
   :type event: :class:`Types.Event`

   :returns:
   :rtype: :class:`Types.Log`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

.. TODO::
    Define the response structure and access control rules
.. TODO::
    getLogRecords should really be able to respond to a query rather than just a simple date range



.. function:: listNodes() -> NodeList

   Returns a list of nodes that have been registered with the DataONE infrastructure.

   :Use Cases:
     :doc:`UC39 </design/UseCases/39_uc>`
   :REST URL: ``GET /node``
   :returns: List of nodes from the registry
   :rtype: :class:`Types.NodeList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4800)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4801)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4823)``




.. function:: registerSystemMetadata(session,pid,sysmeta) -> Boolean

   Provides a mechanism for adding system metadata independently of its associated object, such as when adding system metadata for data objects.

   This method is used internally by Coordinating Nodes.

   :REST URL: ``POST /meta``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param sysmeta:
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: True on success
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4860)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4861)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4862)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4863)``

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4864)``


