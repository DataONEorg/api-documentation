..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNCore`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``POST /object/{pid}``
     - :func:`create`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /formats``
     - :func:`listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - ``GET /formats/{fmtid}``
     - :func:`getFormat`
     - (:class:`fmtid<Types.ObjectFormatIdentifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - ``GET /log?fromdate={fromDate}[&todate={toDate}&event={event}]``
     - :func:`getLogRecords`
     - (:class:`session<Types.Session>`, :class:`fromDate<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``POST /reserve``
     - :func:`reserveIdentifier`
     - (:class:`session<Types.Session>`, :class:`[pid]<Types.Identifier>`, ``[scope]``, ``[format]``) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /node``
     - :func:`listNodes`
     - () ``->`` :class:`Types.NodeList`
   * - Tier 1
     - ``POST /meta``
     - :func:`registerSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Boolean`




.. function:: create(session,pid,object,sysmeta) -> Identifier

   Used intenrally within a Coordinating Node to add a new object to the object store.

   This method is not publicly exposed by a Coordinating Node.

   :Use Cases:
     :doc:`UC04 </design/UseCases/04_uc>`, :doc:`UC09 </design/UseCases/09_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /object/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier that should be used in DataONE to identify and access the object. This is an Unicode string that follows the constraints on identifiers described in :doc:`/design/PIDs`.
   :type pid: :class:`Types.Identifier`

   :param object: The object (i.e. Science Metadata) bytes.
   :type object: bytes

   :param sysmeta: The complete system metadata document describing the object.
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the system.
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1100)``

     The provided identity does not have permission to WRITE to the Member Node.

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=1120)``

     The requested identifier is already used by another object and therefore can not be used for this object. Clients should choose a new identifier that is unique and retry the operation or use :func:`CN_crud.reserveIdentifier` to reserve one.

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=4895)``

     The object store is unable to store the provided content.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4897)``

     The CN object store is unable to execute the transfer because of resource limitations.

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4896)``

     The supplied system metadata is invalid. This could be because some required field is not set, the metadata document is malformed, or the value of some field is not valid.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4893)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4894)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4890)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4891)``




.. function:: listFormats() -> ObjectFormatList

   Returns a list of all object formats registered in the DataONE Object Format Vocabulary.

   :REST URL: ``GET /formats``
   :returns: The list of object formats registered in the DataONE Object Format Vocabulary
   :rtype: :class:`Types.ObjectFormatList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4840)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4841)``

     Unexpected exception from the service.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4842)``

     The request was invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4843)``

     The object formats collection could not be found at this node.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4844)``

     The object formats collection could not be found at this node.


.. include:: ../examples/cn_listObjectFormats.txt




.. function:: getFormat(fmtid) -> ObjectFormat

   Returns the object format registered in the DataONE Object Format Vocabulary for the given format identifier.

   :REST URL: ``GET /formats/{fmtid}``
   :param fmtid: Unique ObjectFormatIdentifier for the object format
   :type fmtid: :class:`Types.ObjectFormatIdentifier`

   :returns: The object format registered in the DataONE Object Format Vocablulary
   :rtype: :class:`Types.ObjectFormat`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4845)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4846)``

     Unexpected exception from the service.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4847)``

     The request was invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4848)``

     The format specified by *fmtid* does not exist at this node.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4849)``

     The object format could not be found at this node.


.. include:: ../examples/cn_getFormat.txt




.. function:: getLogRecords(session,fromDate,[toDate],[event]) -> Log

   Retrieves consolidated log information for the specified date range (inclusive) for the entire DataONE infrastructure

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /log?fromdate={fromDate}[&todate={toDate}&event={event}]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param fromDate: Starting time for records in response
   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response. If not specified, then defaults to now.
   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.  Default is all.
   :type event: :class:`Types.Event`

   :returns:
   :rtype: :class:`Types.Log`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

.. TODO::
    Define the response structure and access control rules
.. TODO::
    getLogRecords should really be able to respond to a query rather than just a simple date range



.. function:: reserveIdentifier(session,[pid],[scope],[format]) -> Identifier

   Given an optional scope and format, reserves and returns an identifier within that scope and format that is unique and will not be used by any other sessions. Future calls to :func:`MN_storage.create` and :func:`MN_storage.update` that reference this ID must originate from the :term:`session` in which the identifier was reserved, otherwise an error is raised on those methods.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /reserve``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: An optional identifier proposed by the client. If no identifier is provided then one will be automatically generated.
   :type pid: :class:`Types.Identifier`

   :param scope: An optional string to be used to qualify the scope of the identifier namespace, which is applied differently depending on the format requested. If scope is not supplied, a default scope will be used.
   :type scope: string

   :param format: The optional name of the identifier format to be used, drawn from a DataONE-specific vocabulary of identifier format names, including several common syntaxes such as DOI, LSID, UUID, and LSRN, among others. If the format is not supplied by the caller, the CN service will use a default identifier format, which may change over time.
   :type format: string

   :returns: The identifier that was reserved
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4190)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4210)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4180)``

     Supplied credentials does not have WRITE permission

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4200)``

     The format requested is not a valid format accepted by this service

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4210)``

     The requested identifier can not be reserved because it already exists in the DataONE system or has already been reserved.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4191)``




.. function:: listNodes() -> NodeList

   Returns a list of nodes that have been registered with the DataONE infrastructure.

   :Use Cases:
     :doc:`UC39 </design/UseCases/39_uc>`
   :REST URL: ``GET /node``
   :returns: List of nodes from the registry
   :rtype: :class:`Types.NodeList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4800)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4801)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4823)``




.. function:: registerSystemMetadata(session,pid,sysmeta) -> Boolean

   Provides a mechanism for adding system metadata independently of its associated object, such as when adding system metadata for data objects.

   This method is used internally by Coordinating Nodes.

   :REST URL: ``POST /meta``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param sysmeta:
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: True on success
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4860)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4861)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4862)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4863)``

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4864)``


