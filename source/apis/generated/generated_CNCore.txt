..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNCore`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``POST /object/{pid}``
     - :func:`create`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /formats``
     - :func:`listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - ``GET /formats/{formatId}``
     - :func:`getFormat`
     - (:class:`formatId<Types.ObjectFormatIdentifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - ``GET /log?[fromdate={fromDate}][&todate={toDate}][&event={event}][&start={start}][&count={count}]``
     - :func:`getLogRecords`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`, ``[start]``, ``[count]``) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``POST /reserve``
     - :func:`reserveIdentifier`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``POST /generate``
     - :func:`generateIdentifier`
     - (:class:`session<Types.Session>`, ``scheme``, ``[fragment]``) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /checksum``
     - :func:`getChecksumAlgorithms`
     - () ``->`` :class:`Types.ChecksumAlgorithmList`
   * - Tier 1
     - ``GET /node``
     - :func:`listNodes`
     - () ``->`` :class:`Types.NodeList`
   * - Tier 1
     - ``POST /meta/{pid}``
     - :func:`registerSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - 
     - ``GET /reserve/{pid}``
     - :func:`hasReservation`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` boolean




.. function:: create(session,pid,object,sysmeta) -> Identifier

   Used internally within a Coordinating Node to add a new object to the object store.

   This method is not publicly exposed by a Coordinating Node.

   :Use Cases:
     :doc:`UC04 </design/UseCases/04_uc>`, :doc:`UC09 </design/UseCases/09_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /object/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier that should be used in DataONE to identify and access the object. This is an Unicode string that follows the constraints on identifiers described in :doc:`/design/PIDs`.
   :type pid: :class:`Types.Identifier`

   :param object: The object (i.e. Science Metadata) bytes.
   :type object: bytes

   :param sysmeta: The complete system metadata document describing the object.
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the system. This should be the same as the identifier provided as the *pid* parameter.
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1100)``

     The provided identity does not have permission to WRITE to the Member Node.

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=1120)``

     The requested identifier is already used by another object and therefore can not be used for this object. Clients should choose a new identifier that is unique and retry the operation or use :func:`CNCore.reserveIdentifier` to reserve one.

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=4895)``

     The object store is unable to store the provided content.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4897)``

     The CN object store is unable to execute the transfer because of resource limitations.

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4896)``

     The supplied system metadata is invalid. This could be because some required field is not set, the metadata document is malformed, or the value of some field is not valid.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4893)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4894)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4890)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4891)``




.. function:: listFormats() -> ObjectFormatList

   Returns a list of all object formats registered in the DataONE Object Format Vocabulary.

   :REST URL: ``GET /formats``
   :returns: The list of object formats registered in the DataONE Object Format Vocabulary
   :rtype: :class:`Types.ObjectFormatList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4840)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4841)``

     Unexpected exception from the service.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4844)``

     The object formats collection could not be found at this node.


.. include:: ../examples/cn_listObjectFormats.txt




.. function:: getFormat(formatId) -> ObjectFormat

   Returns the object format registered in the DataONE Object Format Vocabulary for the given format identifier.

   :REST URL: ``GET /formats/{formatId}``
   :param formatId: Unique ObjectFormatIdentifier for the object format
   :type formatId: :class:`Types.ObjectFormatIdentifier`

   :returns: The object format registered in the DataONE Object Format Vocablulary
   :rtype: :class:`Types.ObjectFormat`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4845)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4846)``

     Unexpected exception from the service.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4847)``

     The request was invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4848)``

     The format specified by *formatId* does not exist at this node.


.. include:: ../examples/cn_getFormat.txt




.. function:: getLogRecords(session,[fromDate],[toDate],[event],[start],[count]) -> Log

   Retrieves consolidated log information for the specified date range (inclusive) for the entire DataONE infrastructure

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /log?[fromdate={fromDate}][&todate={toDate}][&event={event}][&start={start}][&count={count}]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param fromDate: Starting time for records in response. Defaults to include all records.
   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response. If not specified, then defaults to now.
   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.  Default is all.
   :type event: :class:`Types.Event`

   :param start: The zero based index of the first log record to return. Default is 0.
   :type start: integer

   :param count: The number of log records to return in the response. Default is 1000.
   :type count: integer

   :returns:
   :rtype: :class:`Types.Log`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=1481)``

     The request could not be serviced due to a limitation of resources - too many requests, internal service timeout, or another similar failure.




.. function:: reserveIdentifier(session,pid) -> Identifier

   Reserves the identifier that is unique and can not be used by any other sessions. Future calls to :func:`MNStorage.create` and :func:`MNStorage.update` that reference this ID must originate from the :term:`session` in which the identifier was reserved, otherwise an error is raised on those methods.

   The requested identifier is transmitted in a MIME Multipart/form-data body with *pid* as key, and the identifier string as value.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /reserve``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier used by the client.
   :type pid: :class:`Types.Identifier`

   :returns: The identifier that was reserved
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4190)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4210)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4180)``

     Supplied credentials does not have WRITE permission

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4200)``

     The identifier requested is not a valid format accepted by this service

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4210)``

     The requested identifier can not be reserved because it already exists in the DataONE system or has already been reserved.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4191)``




.. function:: generateIdentifier(session,scheme,[fragment]) -> Identifier

   Given a scheme and optional fragment, generates an identifier with that scheme and fragment that is unique.

   The message body is encoded as MIME Multipart/form-data

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /generate``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param scheme: The name of the identifier scheme to be used, drawn from a DataONE-specific vocabulary of identifier scheme names, including several common syntaxes such as DOI, ARK, LSID, UUID, and LSRN, among others.
   :type scheme: string

   :param fragment: The optional fragment to include in the generated Identifier
   :type fragment: string

   :returns: The identifier that was generated
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4190)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4210)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4180)``

     Supplied credentials does not have WRITE permission

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4200)``

     The schme requested is not a valid schme accepted by this service

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4191)``

.. TODO::
    Need to provide a list of recommended identifier schemes.



.. function:: getChecksumAlgorithms() -> ChecksumAlgorithmList

   Returns a list of checksum algorithms that are supported by DataONE.

   :REST URL: ``GET /checksum``
   :returns: A list of supported checksum algorithms.
   :rtype: :class:`Types.ChecksumAlgorithmList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4880)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4881)``

     A problem occurred with the service that prevented it from returning the expected response.

.. TODO::
    ChecksumAlgorithmList needs to be defined



.. function:: listNodes() -> NodeList

   Returns a list of nodes that have been registered with the DataONE infrastructure.

   :Use Cases:
     :doc:`UC39 </design/UseCases/39_uc>`
   :REST URL: ``GET /node``
   :returns: List of nodes from the registry
   :rtype: :class:`Types.NodeList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4800)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4801)``




.. function:: registerSystemMetadata(session,pid,sysmeta) -> Identifier

   Provides a mechanism for adding system metadata independently of its associated object, such as when adding system metadata for data objects.

   This method is used internally by Coordinating Nodes.

   :REST URL: ``POST /meta/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param sysmeta:
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The pid that was updated.
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4860)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4861)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4862)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4863)``

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4864)``




.. function:: hasReservation(session,pid) -> boolean

   Checks to determine if the caller (as determined by session) has the reservation (i.e. is the owner) of the specified PID.

   :REST URL: ``GET /reserve/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier that is being checked for existing as a reserved identifier.
   :type pid: :class:`Types.Identifier`

   :returns: True - subject has the reservation on the PID; False - the PID does not exist; False - the PID is already in use; False - the PID is reserved by somone else.
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=)``

     The method functionality is not implemented.

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=)``

     The PID exists but the caller does not own the reservation

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=)``

     An internal server error occurred.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=)``

     The PID does not exist as a reservation or an existing object.

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=)``

     The session information is invalid.


