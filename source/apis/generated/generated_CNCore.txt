..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNCore`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /monitor/ping``
     - :func:`ping`
     - () ``->`` null
   * - Tier 1
     - ``POST /object/{pid}``
     - :func:`create`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /formats``
     - :func:`listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - ``GET /formats/{formatId}``
     - :func:`getFormat`
     - (:class:`formatId<Types.ObjectFormatIdentifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - ``GET /log?[fromdate={fromDate}][&todate={toDate}][&event={event}][&start={start}][&count={count}]``
     - :func:`getLogRecords`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`, ``[start]``, ``[count]``) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``POST /reserve``
     - :func:`reserveIdentifier`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``POST /generate``
     - :func:`generateIdentifier`
     - (:class:`session<Types.Session>`, ``scheme``, ``[fragment]``) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /checksum``
     - :func:`listChecksumAlgorithms`
     - () ``->`` :class:`Types.ChecksumAlgorithmList`
   * - 
     - ``PUT /obsoletedBy/{pid}``
     - :func:`setObsoletedBy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`obsoletedByPid<Types.Identifier>`, ``serialVersion``) ``->`` boolean
   * - Tier 1
     - ``GET /node``
     - :func:`listNodes`
     - () ``->`` :class:`Types.NodeList`
   * - Tier 1
     - ``POST /meta/{pid}``
     - :func:`registerSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - 
     - ``POST /hasReservation``
     - :func:`hasReservation`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`, :class:`pid<Types.Identifier>`) ``->`` boolean




.. function:: ping() -> null

   Low level "are you alive" operation. A valid ping response is indicated by a HTTP status of 200. A timestmap indicating the current system time (UTC) on the node MUST be returned in the HTTP Date header.

   The Member Node should perform some minimal internal functionality testing before answering. However, ping checks will be frequent (every few minutes) so the internal functionality test should not be high impact.

   Any status response other than 200 indicates that the node is offline for DataONE operations.

   Note that the timestamp returned in the Date header should follow the semantics as described in the HTTP specifications, http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18

   The response body will be ignored by the caller expect in the case of an error, in which case the response body should contain the appropriate DataONE exception.

   :Use Cases:
     :doc:`UC10 </design/UseCases/10_uc>`
   :REST URL: ``GET /monitor/ping``
   :returns: Null body or Exception. The body of the message is ignored by the caller. The HTTP header *Date* MUST be set in the response.
   :rtype: null

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2042)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2045)``

     A ping response may return InsufficientResources if for example the system is in a state where normal DataONE operations may be impeded by an unusually high load on the node.


.. include:: /apis/examples/ping.txt




.. function:: create(session,pid,object,sysmeta) -> Identifier

   Used internally within a Coordinating Node to add a new object to the object store.

   This method is not publicly exposed by a Coordinating Node.

   :Use Cases:
     :doc:`UC04 </design/UseCases/04_uc>`, :doc:`UC09 </design/UseCases/09_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /object/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier that should be used in DataONE to identify and access the object. This is an Unicode string that follows the constraints on identifiers described in :doc:`/design/PIDs`.
   :type pid: :class:`Types.Identifier`

   :param object: The object (i.e. Science Metadata) bytes.
   :type object: bytes

   :param sysmeta: The complete system metadata document describing the object.
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the system. This should be the same as the identifier provided as the *pid* parameter.
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1100)``

     The provided identity does not have permission to WRITE to the Member Node.

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=1120)``

     The requested identifier is already used by another object and therefore can not be used for this object. Clients should choose a new identifier that is unique and retry the operation or use :func:`CNCore.reserveIdentifier` to reserve one.

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=4895)``

     The object store is unable to store the provided content.

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=4897)``

     The CN object store is unable to execute the transfer because of resource limitations.

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4896)``

     The supplied system metadata is invalid. This could be because some required field is not set, the metadata document is malformed, or the value of some field is not valid.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4893)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4894)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4890)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4891)``




.. function:: listFormats() -> ObjectFormatList

   Returns a list of all object formats registered in the DataONE Object Format Vocabulary.

   :REST URL: ``GET /formats``
   :returns: The list of object formats registered in the DataONE Object Format Vocabulary
   :rtype: :class:`Types.ObjectFormatList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4840)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4841)``

     An error occurred when attempting to service the request.


.. include:: /apis/examples/cn_listObjectFormats.txt




.. function:: getFormat(formatId) -> ObjectFormat

   Returns the object format registered in the DataONE Object Format Vocabulary for the given format identifier.

   :REST URL: ``GET /formats/{formatId}``
   :param formatId: Unique ObjectFormatIdentifier for the object format
   :type formatId: :class:`Types.ObjectFormatIdentifier`

   :returns: The object format registered in the DataONE Object Format Vocablulary
   :rtype: :class:`Types.ObjectFormat`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4845)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4846)``

     Unexpected exception from the service.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4848)``

     The format specified by *formatId* does not exist at this node.


.. include:: /apis/examples/cn_getFormat.txt




.. function:: getLogRecords(session,[fromDate],[toDate],[event],[start],[count]) -> Log

   Retrieves consolidated log information for the specified date range (fromDate < timestamp <= toDate) for the entire DataONE infrastructure

   Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /log?[fromdate={fromDate}][&todate={toDate}][&event={event}][&start={start}][&count={count}]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param fromDate: Starting time for records in response, entries with timestamp greater than or equal to (>=) this value will be returned. Defaults to include all records.
   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response, entries with timestamp less than (<) this value will be returned. If not specified, then defaults to now.
   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.  Default is all.
   :type event: :class:`Types.Event`

   :param start: The zero based index of the first log record to return. Default is 0.
   :type start: integer

   :param count: The number of log records to return in the response. Default is 1000.
   :type count: integer

   :returns:
   :rtype: :class:`Types.Log`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=1481)``

     The request could not be serviced due to a limitation of resources - too many requests, internal service timeout, or another similar failure.




.. function:: reserveIdentifier(session,pid) -> Identifier

   Reserves the identifier that is unique and can not be used by any other sessions. Future calls to :func:`MNStorage.create` and :func:`MNStorage.update` that reference this ID must be made by the same :term:`principal` making the reservation, otherwise an error is raised on those methods.

   The requested identifier is transmitted in a MIME Multipart/form-data body with *pid* as key, and the identifier string as value.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /reserve``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier used by the client.
   :type pid: :class:`Types.Identifier`

   :returns: The identifier that was reserved
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4190)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4210)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4180)``

     Supplied credentials does not have WRITE permission

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4200)``

     The identifier requested is not a valid format accepted by this service

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4210)``

     The requested identifier can not be reserved because it already exists in the DataONE system or has already been reserved.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4191)``




.. function:: generateIdentifier(session,scheme,[fragment]) -> Identifier

   Given a scheme and optional fragment, generates an identifier with that scheme and fragment that is unique.

   The message body is encoded as MIME Multipart/form-data

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``POST /generate``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param scheme: The name of the identifier scheme to be used, drawn from a DataONE-specific vocabulary of identifier scheme names, including several common syntaxes such as DOI, ARK, LSID, UUID, and LSRN, among others. The first version of this method only supports the UUID scheme, and ignores the fragment parameter.
   :type scheme: string

   :param fragment: The optional fragment to include in the generated Identifier
   :type fragment: string

   :returns: The identifier that was generated
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4190)``

     The supplied authentication token is not a proper certificate, or missing required fields, or otherwise proves invalid.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4210)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4180)``

     Supplied credentials does not have WRITE permission

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4200)``

     The schme requested is not a valid schme accepted by this service

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4191)``

.. TODO::
    Need to provide a list of recommended identifier schemes.



.. function:: listChecksumAlgorithms() -> ChecksumAlgorithmList

   Returns a list of checksum algorithms that are supported by DataONE.

   :REST URL: ``GET /checksum``
   :returns: A list of supported checksum algorithms.
   :rtype: :class:`Types.ChecksumAlgorithmList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4880)``

     The service is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4881)``

     A problem occurred with the service that prevented it from returning the expected response.




.. function:: setObsoletedBy(session,pid,obsoletedByPid,serialVersion) -> boolean

   Updates the :attr:`Types.SystemMetadata.obsoletedBy` property for an object, indicating that the object specified by *pid* has been obsoleted by the identifier in *obsoletedByPid*.

   :REST URL: ``PUT /obsoletedBy/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The :term:`Subject` of the session MUST have *write* permission on the object.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object system metadata being updated.
   :type pid: :class:`Types.Identifier`

   :param obsoletedByPid: Identifier of the object that obsoletes the object identified by *pid*
   :type obsoletedByPid: :class:`Types.Identifier`

   :param serialVersion: The serial version of the system metadata being updated. If the specified *serialVersion* does not match the current version at the Coordinating Nodes, then a :exc:`Exceptions.VersionMismatch` error is raised and no changes are made.
   :type serialVersion: unsigned long

   :returns: True if the operation succeeds, otherwise false.
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4940)``

     The service endpoint has not yet been fully implemented

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4941)``

     A problem occurred with the service that prevented it from returning the expected response.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4942)``

     The request was malformed and could not be processed.

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4943)``

     The supplied session information could not be verified as a valid DataONE session.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4944)``

     The specified *pid* does not exist.

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4945)``

     The credentials provided with the request in the *session* do not have *write* privileges on *pid*.

   :raises Exceptions.VersionMismatch: ``(errorCode=409, detailCode=4946)``

     The provided *serialVersion* does not match the latest version that is held by the CN. The client should refresh it's copy, verify that the update is still necessary, and resubmit the request with the updated information.




.. function:: listNodes() -> NodeList

   Returns a list of nodes that have been registered with the DataONE infrastructure.

   :Use Cases:
     :doc:`UC39 </design/UseCases/39_uc>`
   :REST URL: ``GET /node``
   :returns: List of nodes from the registry
   :rtype: :class:`Types.NodeList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4800)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4801)``




.. function:: registerSystemMetadata(session,pid,sysmeta) -> Identifier

   Provides a mechanism for adding system metadata independently of its associated object, such as when adding system metadata for data objects.

   This method is used internally by Coordinating Nodes.

   :REST URL: ``POST /meta/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param sysmeta:
   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The pid that was updated.
   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4860)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4861)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4862)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4863)``

   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=4864)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4865)``




.. function:: hasReservation(session,subject,pid) -> boolean

   Checks to determine if the supplied *subject* is the owner of the reservation of *pid*.

   A positive response (that the *pid* is reserved and owned by *subject*) is indicated by a return of a HTTP status of 200.

   A negative response is indicated by an exception and the associated HTTP status code.

   The *pid* and *subjectInfo* are transmitted as a MIME Multipart/form-data message body.

   :REST URL: ``POST /hasReservation``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to an authority trusted by the DataONE Coordinating Nodes.
   :type session: :class:`Types.Session`

   :param subject: The subject of the :term:`principal` (user) that made the reservation.
   :type subject: :class:`Types.Subject`

   :param pid: The identifier that is being checked for existing as a reserved identifier or is in use as an identifier for an existing object.
   :type pid: :class:`Types.Identifier`

   :returns: True - subject has the reservation on the PID; False - the PID does not exist; False - the PID is already in use; False - the PID is reserved by somone else.
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4920)``

     The method functionality is not implemented.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4921)``

     An internal server error occurred.

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4922)``

     The session information is invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4923)``

     The PID does not exist as a reservation or an existing object and is not in use as an identifier.

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4924)``

     The PID is reserved but the owner is not the :term:`principal` identified by the *subjectInfo* OR the provide *session* does not have authority to access this service.

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4925)``

     The PID is in use to identify an already existing object in the DataONE system.


