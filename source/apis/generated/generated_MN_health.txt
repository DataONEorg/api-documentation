..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_health`
   :widths: 10 10 30
   :header-rows: 1

   * - REST
     - Function
     - Parameters
   * - :ref:`MN_health.ping`
     - :func:`ping`
     - () ``->`` :class:`Types.PingResponse`
   * - :ref:`MN_health.getObjectStatistics`
     - :func:`getObjectStatistics`
     - (:class:`token<Types.AuthToken>`, :class:`time<Types.DateTime Range>`,
       :class:`format<Types.ObjectFormat>`, ``day``) ``->``
       :class:`Types.ObjectStatistics`
   * - :ref:`MN_health.getOperationStatistics`
     - :func:`getOperationStatistics`
     - (:class:`token<Types.AuthToken>`, :class:`time<Types.DateTime Range>`,
       :class:`requestorIdentitity<Types.Principal>`, ``day``,
       :class:`typeOfOperation<Types.Event>`) ``->``
       :class:`Types.OperationStatistics`
   * - :ref:`MN_health.getStatus`
     - :func:`getStatus`
     - () ``->`` :class:`Types.StatusResponse`




.. function:: ping() -> PingResponse

   Low level "are you alive" operation. Response is simple ACK, but may be
   reasonable to overload with a couple of flags that could indicate
   availability of new data or change in capabilities.

   The Member Node should perform some minimal internal functionality testing
   before answering. However, ping checks will be frequent (every few minutes)
   so the internal functionality test should not be high impact.

   :Use Cases:

     :doc:`UC10 </design/UseCases/10_uc>`

   :REST URL: MN :ref:`MN_health.ping`

   :returns: Null body

   :rtype: :class:`Types.PingResponse`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2042)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2043)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2044)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2045)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2046)``




.. function:: getObjectStatistics(token,time,format,day) -> ObjectStatistics

   Called by the monitoring system to find how many objects are stored on the
   MN, cumulative or for each day in a given range.

   :REST URL: MN :ref:`MN_health.getObjectStatistics`

   :param token: Identity with authority to retrieve the statistics.

   :type token: :class:`Types.AuthToken`

   :param time: Limit to date range. See Wildcards and Range Operators.

   :type time: :class:`Types.DateTime Range`

   :param format: Limit to objects of given format.

   :type format: :class:`Types.ObjectFormat`

   :param day: Flag that causes a separate set of statistics to be returned for
     each day. Without this flag, a single, cumulative set of statistics is
     returned.

   :type day: flag

   :returns: List of statistics.

   :rtype: :class:`Types.ObjectStatistics`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2060)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2061)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2062)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2063)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2064)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2065)``




.. function:: getOperationStatistics(token,time,requestorIdentitity,day,typeOfOperation) -> OperationStatistics

   Called by the monitoring system to find how many operations have been
   performed on the MN, cumulative or for each day in a given range.

   :REST URL: MN :ref:`MN_health.getOperationStatistics`

   :param token: Identity with authority to retrieve the statistics.

   :type token: :class:`Types.AuthToken`

   :param time: Limit to date range. See Wildcards and Range Operators.

   :type time: :class:`Types.DateTime Range`

   :param requestorIdentitity: Limit to operations performed by given requestor.

   :type requestorIdentitity: :class:`Types.Principal`

   :param day: Flag that causes a separate set of statistics to be returned for
     each day. Without this flag, a single, cumulative set of statistics is
     returned.

   :type day: flag

   :param typeOfOperation: Enumerated value

   :type typeOfOperation: :class:`Types.Event`

   :returns: List of statistics.

   :rtype: :class:`Types.OperationStatistics`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2080)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2081)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2082)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2083)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2084)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2085)``




.. function:: getStatus() -> StatusResponse

   This function is similar to :func:`MN_health.ping` but returns a more
   complete status which may include information such as planned service
   outages.

   :Use Cases:

     :doc:`UC10 </design/UseCases/10_uc>`

   :REST URL: MN :ref:`MN_health.getStatus`

   :returns: Undefined

   :rtype: :class:`Types.StatusResponse`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2100)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2101)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2102)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2103)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2104)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2105)``


