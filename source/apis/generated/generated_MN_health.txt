..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_health`
   :widths: 10 10 30
   :header-rows: 1

   * - REST
     - Function
     - Parameters
   * - ``GET /monitor/ping``
     - :func:`ping`
     - () ``->`` :class:`Types.Boolean`
   * - ``GET /monitor/object``
     - :func:`getObjectStatistics`
     - (:class:`token<Types.AuthToken>`, :class:`[time]<Types.DateTime>`,
       :class:`[format]<Types.ObjectFormat>`, :class:`[day]<Types.Integer>`,
       :class:`[pid]<Types.Identifier>`) ``->`` :class:`Types.MonitorList`
   * - ``GET /monitor/event``
     - :func:`getOperationStatistics`
     - (:class:`token<Types.AuthToken>`, :class:`[time]<Types.DateTime>`,
       :class:`[requestor]<Types.Principal>`, :class:`[day]<Types.Integer>`,
       :class:`[event]<Types.Event>`, :class:`[eventTime]<Types.DateTime>`,
       :class:`[format]<Types.ObjectFormat>`) ``->`` :class:`Types.MonitorList`
   * - ``GET /monitor/status``
     - :func:`getStatus`
     - () ``->`` :class:`Types.StatusResponse`




.. function:: ping() -> Boolean

   Low level "are you alive" operation. Response is simple ACK, but may be
   reasonable to overload with a couple of flags that could indicate
   availability of new data or change in capabilities.

   The Member Node should perform some minimal internal functionality testing
   before answering. However, ping checks will be frequent (every few minutes)
   so the internal functionality test should not be high impact.

   :Use Cases:

     :doc:`UC10 </design/UseCases/10_uc>`

   :REST URL: ``GET /monitor/ping``

   :returns: Null body or Exception

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2042)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2043)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2044)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2045)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2046)``


.. include:: ../examples/ping.txt



----

.. function:: getObjectStatistics(token,[time],[format],[day],[pid]) -> MonitorList

   Called by the monitoring system to find how many objects are stored on the
   MN, cumulative or for each day in a given range.

   :REST URL: ``GET /monitor/object``

   :param token: Identity with authority to retrieve the statistics.

   :type token: :class:`Types.AuthToken`

   :param time: An ISO8601 compatible DateTime range specifying the time range
     for which to return object statistics.

   :type time: :class:`Types.DateTime`

   :param format: Limit to objects of given format.

   :type format: :class:`Types.ObjectFormat`

   :param day: Flag that causes a separate set of statistics to be returned for
     each day. Without this flag, a single, cumulative set of statistics is
     returned.

   :type day: :class:`Types.Integer`

   :param pid: Filter on identifier (with wildcards)

   :type pid: :class:`Types.Identifier`

   :returns: List of statistics.

   :rtype: :class:`Types.MonitorList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2060)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2061)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2062)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2063)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2064)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2065)``


.. include:: ../examples/getObjectStatistics.txt



----

.. function:: getOperationStatistics(token,[time],[requestor],[day],[event],[eventTime],[format]) -> MonitorList

   Called by the monitoring system to find how many operations have been
   performed on the MN, cumulative or for each day in a given range.

   :REST URL: ``GET /monitor/event``

   :param token: Identity with authority to retrieve the statistics.

   :type token: :class:`Types.AuthToken`

   :param time: An ISO8601 compatible DateTime range specifying the time range
     for which to return operation statistics.

   :type time: :class:`Types.DateTime`

   :param requestor: Limit to operations performed by given requestor identity.

   :type requestor: :class:`Types.Principal`

   :param day: Flag that causes a separate set of statistics to be returned for
     each day (non-zero). Without this flag (or = 0), a single, cumulative set
     of statistics is returned.

   :type day: :class:`Types.Integer`

   :param event: Enumerated value

   :type event: :class:`Types.Event`

   :param eventTime: An ISO8601 compatible DateTime range specifying the time
     range that that objects were created for which to return operation
     statistics.

   :type eventTime: :class:`Types.DateTime`

   :param format: Limit to events involving objects of the specified format.

   :type format: :class:`Types.ObjectFormat`

   :returns: List of statistics.

   :rtype: :class:`Types.MonitorList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2080)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2081)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2082)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2083)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2084)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2085)``


.. include:: ../examples/getOperationStatistics.txt



----

.. function:: getStatus() -> StatusResponse

   This function is similar to :func:`MN_health.ping` but returns a more
   complete status which may include information such as planned service
   outages.

   This method provide a mechanism for notification to Coordinating Nodes at a
   higher frequency than through setting properties in the node registry
   information.

   The response to a *getStatus* request is currently undefined, but will be a
   structure containing information that can be used by the Coordinating Nodes
   for notification of pending outages, software changes, or other significant
   events as described in :doc:`/design/UseCases/10_uc`.

   :Use Cases:

     :doc:`UC10 </design/UseCases/10_uc>`

   :REST URL: ``GET /monitor/status``

   :returns: Undefined

   :rtype: :class:`Types.StatusResponse`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2100)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2101)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2102)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2103)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2104)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2105)``



----