..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNRead`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /object/{pid}``
     - :func:`get`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - ``GET /meta/{pid}``
     - :func:`getSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.SystemMetadata`
   * - Tier 1
     - ``GET /resolve/{pid}``
     - :func:`resolve`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.ObjectLocationList`
   * - Tier 1
     - ``GET /assertRelation/{pidOfSubject}?relationship={relationship}&pidofobject={pidOfObject}``
     - :func:`assertRelation`
     - (:class:`session<Types.Session>`, :class:`pidOfSubject<Types.Identifier>`, :class:`relationship<Types.RelationshipEnum>`, :class:`pidOfObject<Types.Identifier>`) ``->`` boolean
   * - Tier 1
     - ``GET /checksum/{pid}``
     - :func:`getChecksum`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Checksum`
   * - Tier 1
     - ``GET /object[?fromDate={fromDate}&toDate={toDate}&formatid= {formatId}&replicaStatus={replicaStatus}&start={start}&count={count}]``
     - :func:`listObjects`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[formatId]<Types.ObjectFormatIdentifier>`, ``[replicaStatus]``, ``[start=0]``, ``[count=1000]``) ``->`` :class:`Types.ObjectList`
   * - Tier 1
     - ``GET /search[?qt={queryType}[&{query}]]``
     - :func:`search`
     - (:class:`session<Types.Session>`, :class:`queryType<Types.QueryType>`, ``query``) ``->`` :class:`Types.ObjectList`




.. function:: get(session,pid) -> OctetStream

   Retrieves the object identified by *pid* from the node. If the object is not present on the node, then an :exc:`Exceptions.NotFound` error is raised, regardless of whether the object exists on another node in the DataONE system.

   :Use Cases:
     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC16 </design/UseCases/16_uc>`, :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``GET /object/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object to be retrieved
   :type pid: :class:`Types.Identifier`

   :returns: For science metadata objects, this will be the exact byte stream of the science metadata object as it was original ingested. Note that additional object types may in the future be returned by the get method.
   :rtype: :class:`Types.OctetStream`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1000)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1001)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1020)``

     The object specified by the identifier is not present on this (or any) CN. The response body should contain a reference to :func:`CNRead.resolve`.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1030)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1010)``


.. include:: ../examples/cn_get.txt




.. function:: getSystemMetadata(session,pid) -> SystemMetadata

   Returns the :term:`system metadata` that contains DataONE specific information about the object identified by *pid*. Authoritative copies of system metadata are only available from the Coordinating Nodes.

   :Use Cases:
     :doc:`UC36 </design/UseCases/36_uc>`, :doc:`UC37 </design/UseCases/37_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /meta/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier for the object of interest.
   :type pid: :class:`Types.Identifier`

   :returns: A system metadata document describing the object.
   :rtype: :class:`Types.SystemMetadata`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1050)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1090)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1040)``

     The principal identified by token does not have READ permission on the object.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1060)``

     There is no object identified by *pid* and so no system metadata can be returned.


.. include:: ../examples/cn_getSystemMetadata.txt




.. function:: resolve(session,pid) -> ObjectLocationList

   Returns a list of nodes (MNs or CNs) known to hold copies of the object identified by *pid*. The object resolution process is intended to provide a simple mechanism for a client to discover from which node(s) a particular object may be retrieved. Details about method interfaces (i.e. REST URLs) exposed by a particular node can be determined by examining the response from the *node* collection. For convenience, the :func:`MNRead.get` URL is included in the response as is the base URL of the node REST services.

   Note also that the same functionality as *resolve()* can be implemented by retrieving a copy of the system metadata for the object and utilizing the node registry to discover the base URL from which the client can construct the *get()* URL. Resolve is provided for efficiency since the response size is much smaller.

   :Use Cases:
     :doc:`UC36 </design/UseCases/36_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /resolve/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier being resolved.
   :type pid: :class:`Types.Identifier`

   :returns: A list of nodes known to contain copies of the target object, plus the URLs known to resolve to the node get methods.
   :rtype: :class:`Types.ObjectLocationList`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4130)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4150)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4120)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4140)``

     There is no object identified by the given identifier

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4131)``


.. include:: ../examples/resolve.txt




.. function:: assertRelation(session,pidOfSubject,relationship,pidOfObject) -> boolean

   DEPRECATED for v1.0.0

   Tests that the specified relationship between *pidOfSubject* and *pidOfObject* exists.

   A passing assertion is indicated by returning a response with a HTTP status of 200.

   Failed assertion MUST be indicated by returning an appropriate exception such as :exc:`NotAuthorized`.

   :REST URL: ``GET /assertRelation/{pidOfSubject}?relationship={relationship}&pidofobject={pidOfObject}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pidOfSubject: The subject of the relationship being tested
   :type pidOfSubject: :class:`Types.Identifier`

   :param relationship: Relationship between *pidOfSubject* and *pidOfObject* being evaluated
   :type relationship: :class:`Types.RelationshipEnum`

   :param pidOfObject: The object of the relationship
   :type pidOfObject: :class:`Types.Identifier`

   :returns: True if the relationship exists.
   :rtype: boolean

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4230)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4270)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4220)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4240)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4260)``

     Raised if the parameters are incorrect (e.g. unknown relationship type specified)

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4221)``




.. function:: getChecksum(session,pid) -> Checksum

   Returns the checksum for the specified object as reported in the system metadata.

   Note that the signature of this method differs from :func:`MNRead.getChecksum` as that method takes an optional algorithm parameter.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``GET /checksum/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object for which checksum is being requested
   :type pid: :class:`Types.Identifier`

   :returns: The checksum of the specified object
   :rtype: :class:`Types.Checksum`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1402)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1410)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1420)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1400)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1430)``




.. function:: listObjects(session,[fromDate],[toDate],[formatId],[replicaStatus],[start=0],[count=1000]) -> ObjectList

   Retrieve the list of objects present on the CN that match the calling parameters. At a minimum, this method should be able to return a list of objects that match::

     fromDate < SystemMetadata.dateSysMetadataModified

   but is expected to also support date range (by also specifying *toDate*), and should also support slicing of the matching set of records by indicating the starting *index* of the response (where 0 is the index of the first item) and the *count* of elements to be returned.

   Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed.

   :Use Cases:
     :doc:`UC06 </design/UseCases/06_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /object[?fromDate={fromDate}&toDate={toDate}&formatid= {formatId}&replicaStatus={replicaStatus}&start={start}&count={count}]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param fromDate: Entries with :attr:`SystemMetadata.dateSysMetadataModified` greater than (>) *fromDate* must be returned.
   :type fromDate: :class:`Types.DateTime`

   :param toDate: Entries with :attr:`SystemMetadata.dateSysMetadataModified` equal to or less than (<=) *toDate* must be returned.
   :type toDate: :class:`Types.DateTime`

   :param formatId: Restrict results to the specified object format.
   :type formatId: :class:`Types.ObjectFormatIdentifier`

   :param replicaStatus: Indicates if replicated objects should be returned in the list (i.e. any entries present in the :attr:`SystemMetadata.replica`, objects that have been replicated to this node). If ``false``, then no objects that have been replicated should be returned. If ``true``, then any objects can be returned, regardless of replication status. The default value is ``true``.
   :type replicaStatus: boolean

   :param start=0: The zero-based index of the first value, relative to the first record of the resultset that matches the parameters.
   :type start=0: integer

   :param count=1000: The maximum number of entries that should be returned in the response. The Member Node may return less entries than specified in this value.
   :type count=1000: integer

   :returns: The list of PIDs that match the query criteria. If none match, an empty list is returned.
   :rtype: :class:`Types.ObjectList`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1520)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1540)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1560)``

     Raised if some functionality requested is not implemented. In the case of an optional request parameter not being supported, the errorCode should be 400. If the requested format (through HTTP Accept headers) is not supported, then the standard HTTP 406 error code should be returned.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1580)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1530)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1521)``




.. function:: search(session,queryType,query) -> ObjectList

   Search the metadata catalog and return identifiers of metadata records that match the criteria.

   Implemented asa proxy to the SOLR search index. All readonly operations supported with standard SOLR parameters.

   :Use Cases:
     :doc:`UC02 </design/UseCases/02_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /search[?qt={queryType}[&{query}]]``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param queryType: An identifier for the type of query expression provided in the query.
   :type queryType: :class:`Types.QueryType`

   :param query: The criteria for matching the characteristics of the metadata objects of interest.
   :type query: string

   :returns: A list of objects that match the specified search criteria
   :rtype: :class:`Types.ObjectList`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4290)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4310)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4280)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4300)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4281)``


