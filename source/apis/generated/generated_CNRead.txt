..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNRead`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /object/{pid}``
     - :func:`get`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - ``GET /meta/{pid}``
     - :func:`getSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.SystemMetadata`
   * - Tier 1
     - ``GET /resolve/{pid}``
     - :func:`resolve`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.ObjectLocationList`
   * - Tier 1
     - ``GET /assertRelation/{pidOfSubject}?relationship={relationship}&pidofobject={pidOfObject}``
     - :func:`assertRelation`
     - (:class:`session<Types.Session>`, :class:`pidOfSubject<Types.Identifier>`, :class:`relationship<Types.RelationshipEnum>`, :class:`pidOfObject<Types.Identifier>`) ``->`` :class:`Types.Boolean`
   * - Tier 1
     - ``GET /checksum/{pid}``
     - :func:`getChecksum`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Checksum`
   * - Tier 1
     - ``GET /object?querytype={queryType}&query={query}``
     - :func:`search`
     - (:class:`session<Types.Session>`, :class:`queryType<Types.QueryType>`, ``query``) ``->`` :class:`Types.ObjectList`




.. function:: get(session,pid) -> OctetStream

   Retrieves the object identified by *pid* from the node. If the object is not present on the node, then an :exc:`Exceptions.NotFound` error is raised (regardless of whether the object exists on another node in the DataONE system).

   :Use Cases:
     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC16 </design/UseCases/16_uc>`, :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``GET /object/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object to be retrieved
   :type pid: :class:`Types.Identifier`

   :returns: For science metadata objects, this will be the exact byte stream of the science metadata object as it was original ingested. Note that additional object types may in the future be returned by the get method.
   :rtype: :class:`Types.OctetStream`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1000)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1001)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1020)``

     The object specified by the identifier is not present on this (or any) CN. The response body should contain a reference to :func:`CN_crud.resolve`.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1030)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1010)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1002)``


.. include:: ../examples/cn_get.txt




.. function:: getSystemMetadata(session,pid) -> SystemMetadata

   Returns the :term:`system metadata` that contains DataONE specific information about the object identified by *pid*. Note that authoritative copies of system metadata are only available from the Coordinating Nodes.

   :Use Cases:
     :doc:`UC36 </design/UseCases/36_uc>`, :doc:`UC37 </design/UseCases/37_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /meta/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier for the object of interest.
   :type pid: :class:`Types.Identifier`

   :returns: A system metadata document describing the object.
   :rtype: :class:`Types.SystemMetadata`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1050)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1090)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1040)``

     The principal identified by token does not have READ permission on the object.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1060)``

     There is no object identified by *pid* and so no system metadata can be returned.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1080)``


.. include:: ../examples/cn_getSystemMetadata.txt




.. function:: resolve(session,pid) -> ObjectLocationList

   Implemented by CNs, returns the nodes (MNs or CNs) known to hold copies of the object identified by *pid*. The object resolution process is intended to provide a simple mechanism for a client to discover from which node(s) a particular object may be retrieved, and this information is returned as a list of node identifiers. Details about method interfaces (i.e. REST URLs) exposed by a particular node can be determined by examining the response from the *node* collection. For convenience, the :func:`MN_read.get` URL is included in the response as is the base URL of the node REST services.

   Note also that the same functionality as *resolve()* can be implemented by retrieving a copy of the system metadata for the object and utilizing the node registry to discover the base URL from which the client can construct the *get()* URL. Resolve is provided for efficiency since the response size is much smaller.

   :Use Cases:
     :doc:`UC36 </design/UseCases/36_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /resolve/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier for the object of interest.
   :type pid: :class:`Types.Identifier`

   :returns: A list of nodes known to contain copies of the target object, plus the URLs known to resolve to the node get methods.
   :rtype: :class:`Types.ObjectLocationList`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4130)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4150)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4120)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4140)``

     There is no object identified by the given identifier

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4131)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4132)``


.. include:: ../examples/resolve.txt




.. function:: assertRelation(session,pidOfSubject,relationship,pidOfObject) -> Boolean

   Tests that the specified relationship between *pidOfSubject* and *pidOfObject* exists.

   :REST URL: ``GET /assertRelation/{pidOfSubject}?relationship={relationship}&pidofobject={pidOfObject}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pidOfSubject: The subject of the relationship being tested
   :type pidOfSubject: :class:`Types.Identifier`

   :param relationship: Relationship between *pidOfSubject* and *pidOfObject* being evaluated
   :type relationship: :class:`Types.RelationshipEnum`

   :param pidOfObject: The object of the relationship
   :type pidOfObject: :class:`Types.Identifier`

   :returns: True if the relationship exists.
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4230)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4270)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4220)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4240)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4260)``

     Raised if the parameters are incorrect (e.g. unknown relationship type specified)

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4221)``

.. TODO::
    Define what is meant by relationship - what is the type for this?



.. function:: getChecksum(session,pid) -> Checksum

   Returns the checksum for the specified object as reported in the system metadata.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``GET /checksum/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object
   :type pid: :class:`Types.Identifier`

   :returns: The checksum of the specified object
   :rtype: :class:`Types.Checksum`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1402)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1410)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1420)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1400)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1402)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1430)``




.. function:: search(session,queryType,query) -> ObjectList

   Search the metadata catalog and return identifiers of metadata records that match the criteria.

   :Use Cases:
     :doc:`UC02 </design/UseCases/02_uc>`, :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``GET /object?querytype={queryType}&query={query}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param queryType: An identifier for the type of query expression provided in the query.
   :type queryType: :class:`Types.QueryType`

   :param query: The criteria for matching the characteristics of the metadata objects of interest.
   :type query: string

   :returns: A list of objects that match the specified search criteria
   :rtype: :class:`Types.ObjectList`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4290)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4310)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4280)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4300)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4281)``


