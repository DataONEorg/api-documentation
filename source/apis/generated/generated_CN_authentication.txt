..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CN_authentication`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - 
     - ``POST /sessions``
     - :func:`login`
     - (:class:`userId<Types.Principal>`, :class:`password<Types.String>`)
       ``->`` :class:`Types.AuthToken`
   * - 
     - ``POST /sessions``
     - :func:`sessionRequest`
     - (:class:`certificate<Types.X509Certificate>`) ``->``
       :class:`Types.Challenge`
   * - 
     - ``POST /sessions``
     - :func:`challengeResponse`
     - (:class:`userId<Types.Principal>`, :class:`password<Types.String>`)
       ``->`` :class:`Types.AuthToken`
   * - 
     - ``GET /sessions/{token}``
     - :func:`getAuthSession`
     - (:class:`token<Types.AuthToken>`) ``->`` :class:`Types.AuthSession`
   * - 
     - ``PUT /owner/{pid}``
     - :func:`setOwner`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`,
       :class:`userId<Types.Principal>`) ``->`` :class:`Types.Identifier`
   * - 
     - ``POST /accounts``
     - :func:`newAccount`
     - (``username``, ``password``,
       :class:`[authSystem]<Types.AuthenticationSystem>`) ``->``
       :class:`Types.Principal`
   * - 
     - ``GET /sessions/verifyToken``
     - :func:`verifyToken`
     - (:class:`token<Types.AuthToken>`) ``->`` :class:`Types.Boolean`
   * - 
     - ``POST /accounts/map``
     - :func:`mapIdentity`
     - (:class:`token1<Types.AuthToken>`, :class:`token2<Types.AuthToken>`)
       ``->`` :class:`Types.Boolean`
   * - 
     - ``POST /groups/{groupName}``
     - :func:`createGroup`
     - (:class:`token<Types.AuthToken>`, :class:`groupName<Types.Principal>`)
       ``->`` :class:`Types.Identifier`
   * - 
     - ``PUT /groups/{groupName}``
     - :func:`addGroupMembers`
     - (:class:`token<Types.AuthToken>`, :class:`groupName<Types.Principal>`,
       :class:`members<Types.PrincipalList>`) ``->`` :class:`Types.Identifier`
   * - 
     - ``DELETE /groups/{groupName}``
     - :func:`removeGroupMembers`
     - (:class:`token<Types.AuthToken>`, :class:`groupName<Types.Principal>`,
       :class:`members<Types.PrincipalList>`) ``->`` :class:`Types.Identifier`




.. function:: login(userId,password) -> AuthToken

   Authenticate using a standard username and password to DataONE, which
   validates the pair and if valid returns an AuthToken referencing an
   AuthSession.

   :Use Cases:

     :doc:`UC12 </design/UseCases/12_uc>`

   :REST URL: ``POST /sessions``

   :param userId: The string identifying the Principal to be authenticated.

   :type userId: :class:`Types.Principal`

   :param password: The password to be used for authentication.

   :type password: :class:`Types.String`

   :returns: An identifier that uniquely identifies an authenticated session.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1920)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=1940)``

     The requesting client credentials were not sufficent to authenticate.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1900)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1901)``



----

.. function:: sessionRequest(certificate) -> Challenge

   Authenticate using an X.509 certificate to DataONE, which validates
   certificate using two-phase challenge/response.  This method is phase one,
   which returns an ecrypted Challenge to the client.

   :Use Cases:

     :doc:`UC12 </design/UseCases/12_uc>`

   :REST URL: ``POST /sessions``

   :param certificate: The client's X.509 public certificate, to be used in two
     phase authentication.

   :type certificate: :class:`Types.X509Certificate`

   :returns: The Challenge returned to the client, including both the server's
     public key and an encrypted Nonce.

   :rtype: :class:`Types.Challenge`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2020)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=2040)``

     The requesting client credentials were not sufficent to authenticate.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2000)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2001)``



----

.. function:: challengeResponse(userId,password) -> AuthToken

   The second phase of two-phase authentication, in which the client has
   decrypted the challenge, and then re-encrypts it using the server's public
   key.  If the response is validate, then the server returns an AuthToken
   referencing an AuthSession.

   :Use Cases:

     :doc:`UC12 </design/UseCases/12_uc>`

   :REST URL: ``POST /sessions``

   :param userId: The string identifying the Principal to be authenticated.

   :type userId: :class:`Types.Principal`

   :param password: The password to be used for authentication.

   :type password: :class:`Types.String`

   :returns: An identifier that uniquely identifies an authenticated session.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1720)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=1740)``

     The requesting client credentials were not sufficent to authenticate.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1700)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1701)``



----

.. function:: getAuthSession(token) -> AuthSession

   Retrieves information about an authenticated session, including the
   Principal's identity, a list of equivalent identities for the user, and a
   list of groups in which the user is a member.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``GET /sessions/{token}``

   :param token: An AuthToken identifier that references an authenticated
     session. Note that, unlike most AuthToken parameters, this one is not
     passed in the HTTP header because it does not reference the current session
     (rather, it references a third party's session).

   :type token: :class:`Types.AuthToken`

   :returns: A SAML assertion comtaining the user identiites and groups.

   :rtype: :class:`Types.AuthSession`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1620)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1640)``

     The requesting client is not authorized to retrieve this session
     information.


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1660)``

     There is no session information available for the given AuthToken.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1600)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1601)``



----

.. function:: setOwner(token,pid,userId) -> Identifier

   Changes ownership (RightsHolder) of the specified object to the
   :term:`principal` specified by `userId`

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``PUT /owner/{pid}``

   :param token: The authentication token returned by
     :func:`CN_authentication.login`. Used to verify that the calling user has
     authority to modify access control for the object.

   :type token: :class:`Types.AuthToken`

   :param pid: Identifier of the object to be modified

   :type pid: :class:`Types.Identifier`

   :param userId: The principal that will be taking ownership of the specified
     object.

   :type userId: :class:`Types.Principal`

   :returns: Identifier of the object that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4480)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4440)``

     The supplied principal does not have permission to change ownership of the
     object


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4460)``

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4441)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4442)``



----

.. function:: newAccount(username,password,[authSystem]) -> Principal

   Create a new :term:`principal` in the DataONE system. Note that there should
   probably be a lot more metadata captured about the new user, and there should
   be a mechanism for specifying the default access control rules for the new
   account.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``POST /accounts``

   :param username: Requested username.  Must be unique within the DataONE
     system.

   :type username: string

   :param password: Secret that conforms to appropriate standards

   :type password: string

   :param authSystem: Selection from potentially multiple authentication systems

   :type authSystem: :class:`Types.AuthenticationSystem`

   :returns: The new principal in the DataONE system.  This may be a simple
     identifier.

   :rtype: :class:`Types.Principal`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4530)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4500)``

     The chosen identity already exists in the system


   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4520)``

     Raised if the supplied credentials are invalid, such asa password that is
     too weak or inappropriate user name.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4501)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4502)``



----

.. function:: verifyToken(token) -> Boolean

   Test if the provided token is valid.

   The token is passed to the method end point using the normal authentication
   token transfer mechanism (e.g. HTTP Auth header).

   Note that there is a potential security issue here as open access to this
   method enables a malicious user to potentially probe a large number of
   generated tokens to determine properties of the system, and perhaps even
   generate a token that matches a system token. Hence another level of
   restriction (perhaps network level blocking / limiting) is necessary.

   :REST URL: ``GET /sessions/verifyToken``

   :param token: The token to be tested.

   :type token: :class:`Types.AuthToken`

   :returns: True if the supplied token is valid, otherwise False.

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4550)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4540)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4541)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4555)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4542)``



----

.. function:: mapIdentity(token1,token2) -> Boolean

   Map the two authenticated identities, asserting that they represent the same
   principal.

   The two identities are represented as AuthToken objects, which allows the CN
   to determine if both identities have been properly authenticated, which
   demonstrates that the user has control of both identities.

   :REST URL: ``POST /accounts/map``

   :param token1: The authentication token returned by
     :func:`CN_authentication.getAuthToken`. Used to verify that the calling
     user has control of this identity.

   :type token1: :class:`Types.AuthToken`

   :param token2: The authentication token returned by
     :func:`CN_authentication.getAuthToken`. Used to verify that the calling
     user has control of this identity.

   :type token2: :class:`Types.AuthToken`

   :returns: True if the map was successfully created, false otherwise.

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=)``

     The supplied principal does not have permission to map these two identities


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=)``

     The specified principal does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=)``

.. TODO::
    Detail codes have not been properly mapped for this method.  Need to
    reassign them.



----

.. function:: createGroup(token,groupName) -> Identifier

   Create a group with the given name.

   Groups are lists of principals that allow all members of the group to be
   referenced by listing solely the subject name of the group.  Group names must
   be unique within the DataONE system, and can only be modified by their
   creator.

   :REST URL: ``POST /groups/{groupName}``

   :param token: The authentication token returned by
     :func:`CN_authentication.getAuthToken`. Used to verify that the calling
     user has rights to create a group.

   :type token: :class:`Types.AuthToken`

   :param groupName: The name of the group to be created.

   :type groupName: :class:`Types.Principal`

   :returns: Identifier of the group that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=)``

     The supplied principal does not have permission to create a group


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=)``

     The specified principal does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=)``

     A group by this name already exists


.. TODO::
    Detail codes have not been properly mapped for this method.  Need to
    reassign them.



----

.. function:: addGroupMembers(token,groupName,members) -> Identifier

   Add members to the named group.

   Group members can be added by the original creator of the group, otherwise a
   NotAuthorized exception is thrown.  Group members are provided as a list of
   principals to be added to the group.

   :REST URL: ``PUT /groups/{groupName}``

   :param token: The authentication token returned by
     :func:`CN_authentication.getAuthToken`. Used to verify that the calling
     user has rights to modify a group.

   :type token: :class:`Types.AuthToken`

   :param groupName: The identifier of the group to be modified.

   :type groupName: :class:`Types.Principal`

   :param members: The list of members to be added to the group.

   :type members: :class:`Types.PrincipalList`

   :returns: Identifier of the group that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=)``

     The supplied principal does not have permission to add to a group


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=)``

     The specified group does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=)``

.. TODO::
    Detail codes have not been properly mapped for this method.  Need to
    reassign them.



----

.. function:: removeGroupMembers(token,groupName,members) -> Identifier

   Remove members to the named group.

   Group members can be removed by the original creator of the group, otherwise
   a NotAuthorized exception is thrown.  Group members are provided as a list of
   principals to be removed from the group.

   :REST URL: ``DELETE /groups/{groupName}``

   :param token: The authentication token returned by
     :func:`CN_authentication.login`. Used to verify that the calling user has
     rights to modify a group.

   :type token: :class:`Types.AuthToken`

   :param groupName: The identifier of the group to be modified.

   :type groupName: :class:`Types.Principal`

   :param members: The list of members to be removed from the group.

   :type members: :class:`Types.PrincipalList`

   :returns: Identifier of the group that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=)``

     The supplied principal does not have permission to remove from a group


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=)``

     The specified group does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=)``

.. TODO::
    Detail codes have not been properly mapped for this method.  Need to
    reassign them.

.. TODO::
    Evaluate the REST endpoint for this method and determine if DELETE is the
    appropriate http method.



----