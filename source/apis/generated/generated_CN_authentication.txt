..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CN_authentication`
   :widths: 10 30
   :header-rows: 1

   * - Function
     - Parameters
   * - :func:`login`
     - (``user``, ``password``,
       :class:`[authSystem]<Types.AuthenticationSystem>`) ``->``
       :class:`Types.AuthToken`
   * - :func:`setOwner`
     - (:class:`token<Types.AuthToken>`, :class:`id<Types.Identifier>`,
       :class:`userId<Types.Principal>`) ``->`` :class:`Types.Identifier`
   * - :func:`newAccount`
     - (``username``, ``password``,
       :class:`[authSystem]<Types.AuthenticationSystem>`) ``->``
       :class:`Types.PrincipalType`
   * - :func:`verifyToken`
     - (:class:`token<Types.AuthToken>`) ``->`` boolean



----

.. function:: login(user,password,[authSystem]) -> AuthToken

   Authenticates a user for interaction with the DataONE system. The returned
   token is trusted throughout the DataONE system as a reliable statement as to
   the identity of the authenticated user.

   :func:`login` may delegate the actual login to an authentication service, and
   a given user may utilize several authentication services. If this is the case
   then an additional parameter identifying the authentication service to use
   will be required.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: MN :ref:`CN_authentication.login`

   :param user: User name

   :type user: string

   :param password: Secret

   :type password: string

   :param authSystem: Place holder for support of multiple authentication
     services for a single user.

   :type authSystem: :class:`Types.AuthenticationSystem`

   :returns: A composite of the user id and authentication token.

   :rtype: :class:`Types.AuthToken`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1620)``

   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=1640)``

     The supplied credentials were invalid (password + username don't jive)


   :raises Exceptions.AuthenticationTimeout: ``(errorCode=408, detailCode=1680)``

     A response from the authentication service was not received before the
     operation timed out.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1600)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1601)``



----

.. function:: setOwner(token,id,userId) -> Identifier

   Changes ownership of the specified object to the :term:`principal` specified
   by `userId`

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: MN :ref:`CN_authentication.setOwner`

   :param token: The authentication token returned by :func:`login`. Used to
     verify that the calling user has authority to modify access control for the
     object.

   :type token: :class:`Types.AuthToken`

   :param id: Identifier of the object to be modified

   :type id: :class:`Types.Identifier`

   :param userId: The principal that will be taking ownership of the specified
     object.

   :type userId: :class:`Types.Principal`

   :returns: Identifier of the object that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4480)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4440)``

     The supplied principal does not have permission to change ownership of the
     object


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4460)``

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4441)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4442)``



----

.. function:: newAccount(username,password,[authSystem]) -> PrincipalType

   Create a new :term:`principal` in the DataONE system. Note that there should
   probably be a lot more metadata captured about the new user, and there should
   be a mechanism for specifying the default access control rules for the new
   account.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: MN :ref:`CN_authentication.newAccount`

   :param username: Requested username.  Must be unique within the DataONE
     system.

   :type username: string

   :param password: Secret that conforms to appropriate standards

   :type password: string

   :param authSystem: Selection from potentially multiple authentication systems

   :type authSystem: :class:`Types.AuthenticationSystem`

   :returns: The new principal in the DataONE system.  This may be a simple
     identifier.

   :rtype: :class:`Types.PrincipalType`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4530)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4500)``

     The chosen identity already exists in the system


   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4520)``

     Raised if the supplied credentials are invalid, such asa password that is
     too weak or inappropriate user name.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4501)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4502)``



----

.. function:: verifyToken(token) -> boolean

   Test if the provided token is valid.

   The token is passed to the method end point using the normal authentication
   token transfer mechanism (e.g. HTTP Auth header).

   Note that there is a potential security issue here as open access to this
   method enables a malicious user to potentially probe a large number of
   generated tokens to determine properties of the system, and perhaps even
   generate a token that matches a system token. Hence another level of
   restriction (perhaps network level blocking / limiting) is necessary.

   :REST URL: MN :ref:`CN_authentication.verifyToken`

   :param token: The token to be tested.

   :type token: :class:`Types.AuthToken`

   :returns: True if the supplied token is valid, otherwise False.

   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4550)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4540)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4541)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4555)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4542)``


