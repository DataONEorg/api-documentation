..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MNAuthorization`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 2
     - ``GET /isAuthorized/{pid}?action={action}``
     - :func:`isAuthorized`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`action<Types.Permission>`) ``->`` boolean
   * - Tier 2
     - ``PUT /accessRules/{pid}``
     - :func:`setAccessPolicy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`accessPolicy<Types.AccessPolicy>`) ``->`` boolean




.. function:: isAuthorized(session,pid,action) -> boolean

   Test if the user identified by the provided token has authorization for operation on the specified object.

   .. Note:: Should perhaps add convenience methods for "canRead()" and "canWrite()" to verify that a user is able to read / write an object.

   :Use Cases:
     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC37 </design/UseCases/37_uc>`
   :REST URL: ``GET /isAuthorized/{pid}?action={action}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: A successful response is indicated by a response HTTP status of 200. The body of the response is arbitrary and SHOULD be ignored by the caller.
   :type pid: :class:`Types.Identifier`

   :param action: If the action is not authorized, then a :exc:`NotAuthorized` exception MUST be raised.
   :type action: :class:`Types.Permission`

   :returns: True if the operation is allowed
   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1760)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1780)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1800)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1820)``

     This error is raised if the request comes from a black listed source (e.g. a temporary block may be imposed on a source that calls this method too many times within some time interval)

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1840)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1761)``




.. function:: setAccessPolicy(session,pid,accessPolicy) -> boolean

   Sets the access permissions for an object identified by *pid*.

   A successful operation is indicated by a return HTTP status of 200.

   Failure is indicated by an exception such as :exc:`NotAuthorized` being returned.

   :Use Cases:
     :doc:`UC16 </design/UseCases/16_uc>`
   :REST URL: ``PUT /accessRules/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The object for which access control is being edited.
   :type pid: :class:`Types.Identifier`

   :param accessPolicy: The desired privileges to be assigned to the object, sent in the message body.
   :type accessPolicy: :class:`Types.AccessPolicy`

   :returns: True if the operation succeeds, otherwise false.
   :rtype: boolean

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4410)``

     The supplied token is invalid

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4430)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4400)``

     The specified object does not exist in the DataONE system

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4420)``

     The :term:`principal` does not have permission to alter access control rules for the object.

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4401)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4402)``

.. TODO::
    Should permissions cascade? e.g. Should setting permission on a Data Package cascade to the contained objects as well (the experiment metadata and data)?
.. TODO::
    .. Note:: Setting access rules on a MN implies that the rules are propogated to the CNs and to all MNs holding a copy of the object

