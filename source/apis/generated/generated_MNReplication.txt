..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MNReplication`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 4
     - ``POST /replicate``
     - :func:`replicate`
     - (:class:`session<Types.Session>`, :class:`sysmeta<Types.SystemMetadata>`, :class:`sourceNode<Types.NodeReference>`) ``->`` boolean
   * - Tier 4
     - ``GET /replica/{pid}``
     - :func:`getReplica`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.OctetStream`




.. function:: replicate(session,sysmeta,sourceNode) -> boolean

   Called by a Coordinating Node to request that the Member Node create a copy of the specified object by retrieving it from another Member Nodeode and storing it locally so that it can be made accessible to the DataONE system.

   A successful operation is indicated by a HTTP status of 200 on the response.

   Failure of the operation MUST be indicated by returning an appropriate exception.

   Access control for this method MUST be configured to allow calling by Coordinating Nodes.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``POST /replicate``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param sysmeta: Copy of the CN held system metadata for the object. Transmitted as a *File Part* of a mime-multipart mixed message body.
   :type sysmeta: :class:`Types.SystemMetadata`

   :param sourceNode: A reference to node from which the content should be retrieved. The reference should be resolved by checking the CN node registry. Transmitted as a *Param Part* of a mime-multipart mixed message body.
   :type sourceNode: :class:`Types.NodeReference`

   :returns: True if everything works OK, otherwise an error is returned.
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2150)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2151)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2152)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2153)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2154)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2155)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2156)``


.. include:: /apis/examples/replicate.txt




.. function:: getReplica(session,pid) -> OctetStream

   Called by a target Member Node to fullfill the replication request originated by a Coordinating Node calling :func:`MNReplication.replicate`. This is a request to make a replica copy of the object, and differs from a call to GET /object in that it should be logged as a replication event rather than a read event on that object.

   A successful operation is indicated by a HTTP status of 200 on the response.

   Failure of the operation MUST be indicated by returning an appropriate exception.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``GET /replica/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: The identifier of the object to get as a replica
   :type pid: :class:`Types.Identifier`

   :returns: Bytes of the specified object.
   :rtype: :class:`Types.OctetStream`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2180)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2181)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2182)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2183)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2184)``

     The node is unable to service the request due to insufficient resources such as CPU, memory, or bandwidth being over utilized.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2185)``


