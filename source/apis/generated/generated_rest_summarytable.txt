.. list-table:: REST URLs implemented on Member Nodes.
   :widths: 10 10 30
   :header-rows: 1

   * - Path
     - Method
     - Description
   * - GET /monitor/ping
     - :func:`MNCore.ping`
     - Low level "are you alive" operation. A valid ping response is indicated by a HTTP status of 200. A timestmap indicating the current system time (UTC) on the node MUST be returned in the HTTP Date header. The Member Node should perform some minimal internal functionality testing before answering. However, ping checks will be frequent (every few minutes) so the internal functionality test should not be high impact. Any status response other than 200 indicates that the node is offline for DataONE operations. Note that the timestamp returned in the Date header should follow the semantics as described in the HTTP specifications, http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18 The response body will be ignored by the caller expect in the case of an error, in which case the response body should contain the appropriate DataONE exception.
   * - GET /log
     - :func:`MNCore.getLogRecords`
     - Retrieve log information from the Member Node for the specified date range and even type. This method is used primarily by the log aggregator to generate aggregate statistics for nodes, objects, and the methods of access. The response MUST contain only records for which the requestor has permission to read. Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed. Access control for this method MUST be configured to allow calling by Coordinating Nodes and MAY be configured to allow more general access.
   * - GET /  and  GET /node
     - :func:`MNCore.getCapabilities`
     - Returns a document describing the capabilities of the Member Node. The response at the Member Node base URL is for convenience only. Clients of Member Nodes SHOULD use the /node URL to retrieve the node capabilities document.
   * - GET /object/{pid}
     - :func:`MNRead.get`
     - Retrieve an object identified by *pid* from the node. The response MUST contain the bytes of the indicated object, and the checksum of the bytes retrieved SHOULD match the :attr:`SystemMetadata.checksum` recorded in the  :class:`Types.SystemMetadata`. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` must be raised even if the object exists on another node in the DataONE system. Also implmented by Coordinating Nodes as :func:`CNRead.get`.
   * - GET /meta/{pid}
     - :func:`MNRead.getSystemMetadata`
     - Describes the object identified by *pid* by returning the associated system metadata object. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` MUST be raised even if the object exists on another node in the DataONE system.
   * - HEAD /object/{pid}
     - :func:`MNRead.describe`
     - This method provides a lighter weight mechanism than :func:`MNRead.getSystemMetadata` for a client to determine basic properties of the referenced object. The response should indicate properties that are typically returned in a HTTP HEAD request: the date late modified, the size of the object, the type of the object (the :attr:`SystemMetadata.formatId`). The principal indicated by *token* must have read privileges on the object, otherwise :exc:`Exceptions.NotAuthorized` is raised. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` must be raised even if the object exists on another node in the DataONE system. Note that this method is likely to be called frequently and so efficiency should be taken into consideration during implementation.
   * - GET /checksum/{pid}[?checksumAlgorithm={checksumAlgorithm}]
     - :func:`MNRead.getChecksum`
     - Returns a :class:`Types.Checksum` for the specified object using an accepted hashing algorithm. The result is used to determine if two instances referenced by a PID are identical, hence it is necessary that MNs can ensure that the returned checksum is valid for the referenced object either by computing it on the fly or by using a cached value that is certain to be correct.
   * - GET /object[?fromDate={fromDate}&toDate={toDate}&formatid={formatId}&replicaStatus={replicaStatus}&start={start}&count={count}]
     - :func:`MNRead.listObjects`
     - Retrieve the list of objects present on the MN that match the calling parameters. This method is required to support the process of :term:`Member Node synchronization`. At a minimum, this method MUST be able to return a list of objects that match::   fromDate < SystemMetadata.dateSysMetadataModified but is expected to also support date range (by also specifying *toDate*), and should also support slicing of the matching set of records by indicating the starting *index* of the response (where 0 is the index of the first item) and the *count* of elements to be returned. Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed. Access control for this method MUST be configured to allow calling by Coordinating Nodes and MAY be configured to allow more general access.
   * - POST /error
     - :func:`MNRead.synchronizationFailed`
     - This is a callback method used by a CN to indicate to a MN that it cannot complete synchronization of the science metadata identified by *pid*. When called, the MN should take steps to record the problem description and notify an administrator or the data owner of the issue. A successful response is indicated by a HTTP status of 200. An unsuccessful call is indicated by a returned exception and associated HTTP status code. Access control for this method MUST be configured to allow calling by Coordinating Nodes and MAY be configured to allow more general access.
   * - GET /isAuthorized/{pid}?action={action}
     - :func:`MNAuthorization.isAuthorized`
     - Test if the user identified by the provided session has authorization for operation on the specified object. A successful operation is indicated by a return HTTP status of 200. Failure is indicated by an exception such as :exc:`NotAuthorized` being returned. The body of the response is arbitrary and SHOULD be ignored by the caller. If the action is not authorized, then a :exc:`NotAuthorized` exception MUST be raised. .. Note:: Should perhaps add convenience methods for "canRead()" and "canWrite()" to verify that a user is able to read / write an object.
   * - POST /object
     - :func:`MNStorage.create`
     - Called by a client to adds a new object to the Member Node. The *pid* must not exist in the DataONE system or should have been previously reserved using  :func:`CNCore.reserveIdentifier`. The caller MUST have authorization to write or create content on the Member Node.
   * - PUT /object/{pid}
     - :func:`MNStorage.update`
     - This method is called by clients to update objects on Member Nodes.  Updates an existing object by creating a new object identified by *newPid* on the Member Node which explicitly obsoletes the object identified by *pid* through appropriate changes to the SystemMetadata of *pid* and *newPid*.  The *pid* of the object being obsoleted is passed in as a parameter, and the Member Node should record the update by storing the :attr:`SystemMetadata.obsoletes` and :attr:`SystemMetadata.obsoletedBy` fields for the respective objects in their system metadata. The Member Node MUST check or set the values of :attr:`SystemMetadata.obsoletes` and :attr:`SystemMetadata.obsoletedBy` so that they accurately represent the relationship between the new and old objects. If the client sets these values and they are incorrect, then an :exc:`InvalidSystemMetadata` MUST be raised.  The Member Node MUST also set :attr:`SystemMetadata.dateSysMetadataModified`. The modified system metadata entries must then be available in :func:`MNRead.listObjects` to ensure that a Coordinating Node will pick up the changes when filtering on :attr:`SystmeMetadata.dateSysMetadataModified`.
   * - DELETE /object/{pid}
     - :func:`MNStorage.delete`
     - Deletes an object managed by DataONE from the Member Node. This method is called by clients to delete objects on Member nodes. Member Nodes MUST check that the caller is authorized to perform this function. The operation does not delete the object bytes, but instead sets the :attr:`Types.SystemMetadata.archived` flag to True. This ensures that the object can still be resolved (and hence remain valid for existing citations and cross references), though will not appear in searches. If the object does not exist on the node servicing the request, then an :exc:`Exceptions.NotFound` exception is raised. The message body of the exception SHOULD contain a hint as to the location of the :func:`CNRead.resolve` method.
   * - POST /dirtySystemMetadata
     - :func:`MNStorage.systemMetadataChanged`
     - Notifies the Member Node that the authoritative copy of system metadata on the Coordinating Nodes has changed. The Member Node SHOULD schedule an update to its information about the affected object by retrieving an authoritative copy from a Coordinating Node. Note that date time precision is limited to one millisecond.  Access control for this method MUST be configured to allow calling by Coordinating Nodes.
   * - POST /replicate
     - :func:`MNReplication.replicate`
     - Called by a Coordinating Node to request that the Member Node create a copy of the specified object by retrieving it from another Member Nodeode and storing it locally so that it can be made accessible to the DataONE system.   A successful operation is indicated by a HTTP status of 200 on the response.  Failure of the operation MUST be indicated by returning an appropriate exception. Access control for this method MUST be configured to allow calling by Coordinating Nodes.
   * - GET /replica/{pid}
     - :func:`MNReplication.getReplica`
     - Called by a target Member Node to fullfill the replication request originated by a Coordinating Node calling :func:`MNReplication.replicate`. This is a request to make a replica copy of the object, and differs from a call to GET /object in that it should be logged as a replication event rather than a read event on that object. A successful operation is indicated by a HTTP status of 200 on the response. Failure of the operation MUST be indicated by returning an appropriate exception.


.. list-table:: REST URLs implemented on Coordinating Nodes.
   :widths: 10 10 30
   :header-rows: 1

   * - Path
     - Method
     - Description
   * - GET /monitor/ping
     - :func:`CNCore.ping`
     - Low level "are you alive" operation. A valid ping response is indicated by a HTTP status of 200. A timestmap indicating the current system time (UTC) on the node MUST be returned in the HTTP Date header. The Member Node should perform some minimal internal functionality testing before answering. However, ping checks will be frequent (every few minutes) so the internal functionality test should not be high impact. Any status response other than 200 indicates that the node is offline for DataONE operations. Note that the timestamp returned in the Date header should follow the semantics as described in the HTTP specifications, http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.18 The response body will be ignored by the caller expect in the case of an error, in which case the response body should contain the appropriate DataONE exception.
   * - POST /object
     - :func:`CNCore.create`
     - Used internally within a Coordinating Node to add a new object to the object store. This method is not publicly exposed by a Coordinating Node.
   * - GET /formats
     - :func:`CNCore.listFormats`
     - Returns a list of all object formats registered in the DataONE Object Format Vocabulary.
   * - GET /formats/{formatId}
     - :func:`CNCore.getFormat`
     - Returns the object format registered in the DataONE Object Format Vocabulary for the given format identifier.
   * - GET /log?[fromdate={fromDate}][&todate={toDate}][&event={event}][&start={start}][&count={count}]
     - :func:`CNCore.getLogRecords`
     - Retrieves consolidated log information for the specified date range (fromDate < timestamp <= toDate) for the entire DataONE infrastructure Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed.
   * - POST /reserve
     - :func:`CNCore.reserveIdentifier`
     - Reserves the identifier that is unique and can not be used by any other sessions. Future calls to :func:`MNStorage.create` and :func:`MNStorage.update` that reference this ID must be made by the same :term:`principal` making the reservation, otherwise an error is raised on those methods. The requested identifier is transmitted in a MIME Multipart/form-data body with *pid* as key, and the identifier string as value.
   * - POST /generate
     - :func:`CNCore.generateIdentifier`
     - Given a scheme and optional fragment, generates an identifier with that scheme and fragment that is unique. The message body is encoded as MIME Multipart/form-data
   * - GET /checksum
     - :func:`CNCore.listChecksumAlgorithms`
     - Returns a list of checksum algorithms that are supported by DataONE.
   * - PUT /obsoletedBy/{pid}
     - :func:`CNCore.setObsoletedBy`
     - Updates the :attr:`Types.SystemMetadata.obsoletedBy` property for an object, indicating that the object specified by *pid* has been obsoleted by the identifier in *obsoletedByPid*.
   * - GET /node
     - :func:`CNCore.listNodes`
     - Returns a list of nodes that have been registered with the DataONE infrastructure.
   * - POST /meta
     - :func:`CNCore.registerSystemMetadata`
     - Provides a mechanism for adding system metadata independently of its associated object, such as when adding system metadata for data objects. This method is used internally by Coordinating Nodes.
   * - POST /hasReservation
     - :func:`CNCore.hasReservation`
     - Checks to determine if the supplied *subject* is the owner of the reservation of *pid*. A positive response (that the *pid* is reserved and owned by *subject*) is indicated by a return of a HTTP status of 200. A negative response is indicated by an exception and the associated HTTP status code. The *pid* and *subjectInfo* are transmitted as a MIME Multipart/form-data message body.
   * - GET /object/{pid}
     - :func:`CNRead.get`
     - Retrieves the object identified by *pid* from the node. If the object is not present on the node, then an :exc:`Exceptions.NotFound` error is raised, regardless of whether the object exists on another node in the DataONE system.
   * - GET /meta/{pid}
     - :func:`CNRead.getSystemMetadata`
     - Returns the :term:`system metadata` that contains DataONE specific information about the object identified by *pid*. Authoritative copies of system metadata are only available from the Coordinating Nodes.
   * - HEAD /object/{pid}
     - :func:`CNRead.describe`
     - This method provides a lighter weight mechanism than :func:`CNRead.getSystemMetadata` for a client to determine basic properties of the referenced object. The response should indicate properties that are typically returned in a HTTP HEAD request: the date late modified, the size of the object, the type of the object (the :attr:`SystemMetadata.formatId`). The principal indicated by *token* must have read privileges on the object, otherwise :exc:`Exceptions.NotAuthorized` is raised. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` must be raised even if the object exists on another node in the DataONE system. Note that this method is likely to be called frequently and so efficiency should be taken into consideration during implementation.
   * - GET /resolve/{pid}
     - :func:`CNRead.resolve`
     - Returns a list of nodes (MNs or CNs) known to hold copies of the object identified by *pid*. The object resolution process is intended to provide a simple mechanism for a client to discover from which node(s) a particular object may be retrieved. Details about method interfaces (i.e. REST URLs) exposed by a particular node can be determined by examining the response from the *node* collection. For convenience, the :func:`MNRead.get` URL is included in the response as is the base URL of the node REST services. Note also that the same functionality as *resolve()* can be implemented by retrieving a copy of the system metadata for the object and utilizing the node registry to discover the base URL from which the client can construct the *get()* URL. Resolve is provided for efficiency since the response size is much smaller. Resolve will return a HTTP status of 303 (see other) on success. The HTTP header "Location" MUST be set, and it's value SHOULD be the full get() URL for retrieving the object from the first location in the resolve response.
   * - GET /checksum/{pid}
     - :func:`CNRead.getChecksum`
     - Returns the checksum for the specified object as reported in the system metadata. Note that the signature of this method differs from :func:`MNRead.getChecksum` as that method takes an optional algorithm parameter.
   * - GET /object[?fromDate={fromDate}&toDate={toDate}&formatid= {formatId}&replicaStatus={replicaStatus}&start={start}&count={count}]
     - :func:`CNRead.listObjects`
     - Retrieve the list of objects present on the CN that match the calling parameters. At a minimum, this method should be able to return a list of objects that match::   fromDate < SystemMetadata.dateSysMetadataModified but is expected to also support date range (by also specifying *toDate*), and should also support slicing of the matching set of records by indicating the starting *index* of the response (where 0 is the index of the first item) and the *count* of elements to be returned. Note that date time precision is limited to one millisecond. If no timezone information is provided, the UTC will be assumed.
   * - GET /search?q={query}
     - :func:`CNRead.search`
     - Search the metadata catalog and return identifiers of metadata records that match the criteria. Implemented as a connection to the SOLR search index. The query syntax is the same as for SOLR. Examples queries and available search fields are described in :doc:`SearchMetadata`.
   * - PUT /owner/{pid}
     - :func:`CNAuthorization.setRightsHolder`
     - Changes ownership (RightsHolder) of the specified object to the :term:`subject` specified by `userId`
   * - GET /isAuthorized/{pid}?action={action}
     - :func:`CNAuthorization.isAuthorized`
     - Test if the user identified by the provided token has authorization for operation on the specified object. A successful operation is indicated by a return HTTP status of 200. Failure is indicated by an exception such as :exc:`NotAuthorized` being returned. A successful response is indicated by a response HTTP status of 200. The body of the response is arbitrary and SHOULD be ignored by the caller. If the action is not authorized, then a :exc:`NotAuthorized` exception MUST be raised. .. Note:: Should perhaps add convenience methods for "canRead()" and "canWrite()" to verify that a user is able to read / write an object.
   * - PUT /accessRules/{pid}
     - :func:`CNAuthorization.setAccessPolicy`
     - Sets the access permissions for an object identified by *pid*. Triggers a change to the system metadata modified time stamp. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception such as :exc:`NotAuthorized`.
   * - POST /accounts
     - :func:`CNIdentity.registerAccount`
     - Create a new :term:`subject` in the DataONE system.  Note that there should probably be a lot more metadata captured about the new user, and there should be a mechanism for specifying the default access control rules for the new account.
   * - PUT /accounts/{subject}
     - :func:`CNIdentity.updateAccount`
     - Update an existing :term:`subject` in the DataONE system. The target subject is determined from subject provided in the URL.  The use calling this method must have write access to the account details. Note that there should be a policy for verifying the details that change via this method.
   * - PUT /accounts/verification/{subject}
     - :func:`CNIdentity.verifyAccount`
     - Verify that the Person data associated with this Subject is a true representation of the real world person. This service can only be called by users who have an administrative role for the domain of users in question. A successful completion of this operation is indicated by returning a HTTP status of 200. An exeption MUST be returned if the account verification is not successful.
   * - GET /accounts/{subject}
     - :func:`CNIdentity.getSubjectInfo`
     - Get the information about a Person (their equivalent identities, and the Groups to which they belong) or the Group (including members).
   * - GET /accounts?query={query}[&status={status}&start={start}&count={count}]
     - :func:`CNIdentity.listSubjects`
     - List the subjects, including users, groups, and systems, that match search criteria. The list can be restricted to subjects whose identifier matches certain substrings, and the size of the resultset can be paged through.
   * - POST /accounts/map
     - :func:`CNIdentity.mapIdentity`
     - Create a new mapping between the two identities, asserting that they represent the same subject. Mapping identities with this method requires explicit authorization for the user given in the Session object. The caller must have made sure that the primary and secondary identities represent one and the same individual. Successful completion of the request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - DELETE /accounts/map/{subject}
     - :func:`CNIdentity.removeMapIdentity`
     - Removes a previously asserted identity mapping from the Subject in the Session to the Subject given by the parameter. The reciprocol mapping entry is also removed. A successful request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - POST /accounts/pendingmap
     - :func:`CNIdentity.requestMapIdentity`
     - Request a new mapping between the authenticated identity in the session and the given identity, asserting that they represent the same subject. Mapping identities is a two-step process wherein a map request is made by a primary Subject and a subsequent (confirmation) map request is made by the secondary Subject. This ensures that mappings are performed only by those that have authority to do so. Successful completion of the request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - PUT /accounts/pendingmap/{subject}
     - :func:`CNIdentity.confirmMapIdentity`
     - Confirms a previously initiated identity mapping. If subject A asserts that B is the same identity through :func:`CNIdentity.requestMapIdentity`, then this method is called by B to confirm that assertion. A successful request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - GET /accounts/pendingmap/{subject}
     - :func:`CNIdentity.getPendingMapIdentity`
     - Gets the SubjectInfo of a previously initiated identity mapping. A successful request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - DELETE /accounts/pendingmap/{subject}
     - :func:`CNIdentity.denyMapIdentity`
     - Denies a previously initiated identity mapping. If subject A asserts that B is the same identity through :func:`CNIdentity.requestMapIdentity`, then this method is called by B to deny that assertion. A successful request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - POST /groups
     - :func:`CNIdentity.createGroup`
     - Create a group with the given name. Groups are lists of subjects that allow all members of the group to be referenced by listing solely the subject name of the group.  Group names must be unique within the DataONE system. Groups can only be modified by Subjects listed as rightsHolders.
   * - PUT /groups
     - :func:`CNIdentity.updateGroup`
     - Add members to the named group. Group members can be modified only by the original creator of the group, otherwise a NotAuthorized exception is thrown.  Group members are provided as a list of subjects that replace the group membership. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.
   * - PUT /replicaNotifications/{pid}
     - :func:`CNReplication.setReplicationStatus`
     - Update the replication status of the system metadata, ensuring that the change is appropriate for the given state of system metadata.  For example, a MN can not change the status to *COMPLETED* unless the CN previously requested replication of the object and the replications status of the object (as indicated in the system metadata) is set to *QUEUED*. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception. The nodeRef, status, and failure parameters are transmitted as part of the HTTP request body encoded as a MIME Multipart/form-data encoded payload.
   * - PUT /replicaMetadata/{pid}
     - :func:`CNReplication.updateReplicationMetadata`
     - Replaces the replica with matching nodeRef in the system metadata of the specified object.  Adds a new replica if the nodeRef of passed in Replica is not already present.  Changes the date sys meta modified. Successful completion of the operation is indicated by returning a HTTP status of 200. Failure of the operation MUST be indicated by returning an appropriate exception.
   * - PUT /replicaPolicies/{pid}
     - :func:`CNReplication.setReplicationPolicy`
     - Updates the replication policy entry for an object by updating the system metadata. Successful completion of the operation is indicated by returning a HTTP status of 200. Failure of the operation MUST be indicated by returning an appropriate exception.
   * - GET /replicaAuthorizations/{pid}
     - :func:`CNReplication.isNodeAuthorized`
     - Verifies that a replication event was initiated by a CN by comparing the target node's identifiying subject with a known list of scheduled replication tasks. Successful completion of the operation is indicated by returning a HTTP status of 200. Failure of the operation MUST be indicated by returning an appropriate exception.
   * - PUT /removeReplicaMetadata/{pid}
     - :func:`CNReplication.deleteReplicationMetadata`
     - Removes the replication information for the specified node from the object system metadata identified by *pid*. Removal of replication metadata is necessary if the Member Node goes offline permanently or for an extended period, or when it is deeemed prudent to migrate an object from one node to another to address resource management issues. This method is normally only called by Coordinating Nodes.
   * - PUT /node/{nodeid}
     - :func:`CNRegister.updateNodeCapabilities`
     - For updating the capabilities of the specified node. Most information is replaced by information in the new node, however, the node identifier, nodeType, ping, syncrhonization.lastHarvested, and synchronization.lastCompleteHarvest are preserved from the existing entry.  Services in the old record not included in the new Node will be removed. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.
   * - POST /node
     - :func:`CNRegister.register`
     - Register a new node in the system. If the node already exists, then a :exc:`IdentifierNotUnique` exception MUST be returned.
