.. list-table:: REST URLs implemented on Member Nodes.
   :widths: 10 10 30
   :header-rows: 1

   * - Path
     - Method
     - Description
   * - GET /monitor/ping
     - :func:`MNCore.ping`
     - Low level "are you alive" operation. A valid ping response is indicated by a HTTP status of 200.  The Member Node should perform some minimal internal functionality testing before answering. However, ping checks will be frequent (every few minutes) so the internal functionality test should not be high impact.
   * - GET /log
     - :func:`MNCore.getLogRecords`
     - Retrieve log information from the Member Node for the specified date range and even type. This method is used primarily by the log aggregator to generate aggregate statistics for nodes, objects, and the methods of access.
   * - GET /monitor/object
     - :func:`MNCore.getObjectStatistics`
     - Returns the number of objects stored on the Member Node at the time the call is serviced. The count may be restricted by simple filters (starts with)applied to a particular object format or PID. Optional simple restriction filters may be used in the request to limit the number of records in the response. If filters for both pid and object format are present, the response matches the logical AND of the filters. Access control rules are not applied to the count, so the actual record count may differ from the number of records that are accessible through other calls such as :func:`MN.listObjects`, however the response MUST be indicative of the number of objects available through the DataONE service interfaces. .. Note:: Functionality of this method has been simplfiied from the 0.5 description so that the response reflects the current state of the Member Node. Historical information should be collated by a monitoring service if necessary. This change was made to reduce the operational requirements for Member Node services.
   * - GET /  or  GET /node
     - :func:`MNCore.getCapabilities`
     - Returns a document describing the capabilities of the Member Node.
   * - GET /object/{pid}
     - :func:`MNRead.get`
     - Retrieve an object identified by *pid* from the node. The response must contain the bytes of the indicated object, and the checksum of the bytes retrieved must match the :attr:`SystemMetadata.checksum` recorded in the  :class:`Types.SystemMetadata` if the object is science data. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` must be raised even if the object exists on another node in the DataONE system. Also implmented by Coordinating Nodes as :func:`CN_crud.get`.
   * - GET /meta/{pid}
     - :func:`MNRead.getSystemMetadata`
     - Describes the science metadata or data object (and likely other objects in the future) identified by *pid* by returning the associated system metadata object. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` must be raised even if the object exists on another node in the DataONE system.
   * - HEAD /object/{pid}
     - :func:`MNRead.describe`
     - This method provides a lighter weight mechanism than :func:`MN_read.getSystemMetadata` for a client to determine basic properties of the referenced object. The response should indicate properties that are typically returned in a HTTP HEAD request: the date late modified, the size of the object, the type of the object (the :attr:`SystemMetadata.objectFormat`). The principal indicated by *token* must have read privileges on the object, otherwise :exc:`Exceptions.NotAuthorized` is raised. If the object does not exist on the node servicing the request, then :exc:`Exceptions.NotFound` must be raised even if the object exists on another node in the DataONE system. Note that this method is likely to be called frequently and so efficiency should be taken into consideratin during implementation.
   * - GET /checksum/{pid}[?checksumAlgorithm={checksumAlgorithm}]
     - :func:`MNRead.getChecksum`
     - Returns a :class:`Types.Checksum` for the specified object using an accepted hashing algorithm. The result is used to determine if two instances referenced by a PID are identical, hence it is necessary that MNs can ensure that the returned checksum is valid for the referenced object either by computing it on the fly or by using a cached value that is certain to be correct.
   * - GET /object[?starttime={startTime}&endtime={endTime}&objectformat={objectFormat}&replicastatus={replicaStatus}&start={start}&count={count}]
     - :func:`MNRead.listObjects`
     - Retrieve the list of objects present on the MN that match the calling parameters. This method is required to support the process of :term:`Member Node synchronization`. At a minimum, this method should be able to return a list of objects that match::   startTime <= SystemMetadata.dateSysMetadataModified but is expected to also support date range (by also specifying *endTime*), and should also support slicing of the matching set of records by indicating the starting *index* of the response (where 0 is the index of the first item) and the *count* of elements to be returned.
   * - POST /error
     - :func:`MNRead.synchronizationFailed`
     - This is a callback method used by a CN to indicate to a MN that it cannot complete synchronization of the science metadata identified by *pid*. When called, the MN should take steps to record the problem description and notify an administrator or the data owner of the issue.
   * - GET /isAuthorized/{pid}?action={action}
     - :func:`MNAuthorization.isAuthorized`
     - Test if the user identified by the provided token has authorization for operation on the specified object. A successful operation is indicated by a return HTTP status of 200. Failure is indicated by an exception such as :exc:`NotAuthorized` being returned. .. Note:: Should perhaps add convenience methods for "canRead()" and "canWrite()" to verify that a user is able to read / write an object.
   * - PUT /accessRules/{pid}
     - :func:`MNAuthorization.setAccessPolicy`
     - Sets the access permissions for an object identified by *pid*. A successful operation is indicated by a return HTTP status of 200. Failure is indicated by an exception such as :exc:`NotAuthorized` being returned.
   * - POST /object/{pid}
     - :func:`MNStorage.create`
     - Adds a new object to the Member Node, where the object is either a data object or a science metadata object. This method is called by clients to create new data objects on Member Nodes. The *pid* must not exist in the DataONE system or should have been previously reserved using  :func:`CN_crud.reserveIdentifier`.
   * - PUT /object/{pid}
     - :func:`MNStorage.update`
     - This method is called by clients to update objects on Member Nodes.  Updates an existing object by creating a new object identified by *newPid* on the Member Node which explicitly obsoletes the object identified by *pid* through appropriate changes to the SystemMetadata of *pid* and *newPid*.  The *pid* of the object being obsoleted is passed in as a parameter, and the Member Node should record the update by storing the :attr:`SystemMetadata.obsoletes` and :attr:`SystemMetadata.obsoletedBy` fields for the respective objects in their system metadata. The Member Node MUST check or set the values of :attr:`SystemMetadata.obsoletes` and :attr:`SystemMetadata.obsoletedBy` so that they accurately represent the relationship between the new and old objects. If the client sets these values and they are incorrect, then an :exc:`InvalidSystemMetadata` MUST be raised.  The Member Node MUST also set :attr:`SystemMetadata.dateSysMetadataModified`. The modified system metadata entries must then be available in :func:`MN_read.listObjects` to ensure that a Coordinating Node will pick up the changes when filtering on :attr:`SystmeMetadata.dateSysMetadataModified`.
   * - DELETE /object/{pid}
     - :func:`MNStorage.delete`
     - Deletes an object from the Member Node, where the object is either a data object or a science metadata object. This method is called by clients to delete objects on Member nodes. Member Nodes MUST check that the caller is authorized to perform this function. If the object does not exist on the node servicing the request, then an :exc:`Exceptions.NotFound` exception is raised. The message body of the exception SHOULD contain a hint as to the location of the :func:`CN_crud.resolve` method.
   * - POST /replicate
     - :func:`MNReplication.replicate`
     - Called by a Coordinating Node to request that the Member Node create a copy of the specified object by retrieving it from another Member Nodeode and storing it locally so that it can be made accessible to the DataONE system.   A successful operation is indicated by a HTTP status of 200 on the response.  Failure of the operation MUST be indicated by returning an appropriate exception.


.. list-table:: REST URLs implemented on Coordinating Nodes.
   :widths: 10 10 30
   :header-rows: 1

   * - Path
     - Method
     - Description
   * - POST /object/{pid}
     - :func:`CNCore.create`
     - Used internally within a Coordinating Node to add a new object to the object store. This method is not publicly exposed by a Coordinating Node.
   * - GET /formats
     - :func:`CNCore.listFormats`
     - Returns a list of all object formats registered in the DataONE Object Format Vocabulary.
   * - GET /formats/{fmtid}
     - :func:`CNCore.getFormat`
     - Returns the object format registered in the DataONE Object Format Vocabulary for the given format identifier.
   * - GET /log?fromdate={fromDate}[&todate={toDate}&event={event}&start={start}&count={count}]
     - :func:`CNCore.getLogRecords`
     - Retrieves consolidated log information for the specified date range (inclusive) for the entire DataONE infrastructure
   * - POST /reserve
     - :func:`CNCore.reserveIdentifier`
     - Reserves the identifier that is unique and can not be used by any other sessions. Future calls to :func:`MN_storage.create` and :func:`MN_storage.update` that reference this ID must originate from the :term:`session` in which the identifier was reserved, otherwise an error is raised on those methods.
   * - POST /generate
     - :func:`CNCore.generateIdentifier`
     - Given a scheme and optional fragment, generates an identifier with that scheme and fragment that is unique.
   * - GET /node
     - :func:`CNCore.listNodes`
     - Returns a list of nodes that have been registered with the DataONE infrastructure.
   * - POST /meta
     - :func:`CNCore.registerSystemMetadata`
     - Provides a mechanism for adding system metadata independently of its associated object, such as when adding system metadata for data objects. This method is used internally by Coordinating Nodes.
   * - GET /reserve/{pid}
     - :func:`CNCore.hasReservation`
     - Checks to determine if the caller (as determined by session) has the reservation (i.e. is the owner) of the specified PID.
   * - GET /object/{pid}
     - :func:`CNRead.get`
     - Retrieves the object identified by *pid* from the node. If the object is not present on the node, then an :exc:`Exceptions.NotFound` error is raised (regardless of whether the object exists on another node in the DataONE system).
   * - GET /meta/{pid}
     - :func:`CNRead.getSystemMetadata`
     - Returns the :term:`system metadata` that contains DataONE specific information about the object identified by *pid*. Note that authoritative copies of system metadata are only available from the Coordinating Nodes.
   * - GET /resolve/{pid}
     - :func:`CNRead.resolve`
     - Implemented by CNs, returns the nodes (MNs or CNs) known to hold copies of the object identified by *pid*. The object resolution process is intended to provide a simple mechanism for a client to discover from which node(s) a particular object may be retrieved, and this information is returned as a list of node identifiers. Details about method interfaces (i.e. REST URLs) exposed by a particular node can be determined by examining the response from the *node* collection. For convenience, the :func:`MN_read.get` URL is included in the response as is the base URL of the node REST services. Note also that the same functionality as *resolve()* can be implemented by retrieving a copy of the system metadata for the object and utilizing the node registry to discover the base URL from which the client can construct the *get()* URL. Resolve is provided for efficiency since the response size is much smaller.
   * - GET /assertRelation/{pidOfSubject}?relationship={relationship}&pidofobject={pidOfObject}
     - :func:`CNRead.assertRelation`
     - Tests that the specified relationship between *pidOfSubject* and *pidOfObject* exists. A passing assertion is indicated by returning a response with a HTTP status of 200. Failed assertion MUST be indicated by returning an appropriate exception such as :exc:`NotAuthorized`.
   * - GET /checksum/{pid}
     - :func:`CNRead.getChecksum`
     - Returns the checksum for the specified object as reported in the system metadata. Note that the signature of this method differs from :func:`MNRead.getChecksum` as that method takes an optional algorithm parameter.
   * - GET /object?querytype={queryType}&query={query}
     - :func:`CNRead.search`
     - Search the metadata catalog and return identifiers of metadata records that match the criteria.
   * - PUT /owner/{pid}
     - :func:`CNAuthorization.setOwner`
     - Changes ownership (RightsHolder) of the specified object to the :term:`subject` specified by `userId`
   * - GET /isAuthorized/{pid}
     - :func:`CNAuthorization.isAuthorized`
     - Test if the user identified by the provided token has authorization for operation on the specified object. .. Note:: Should perhaps add convenience methods for "canRead()" and "canWrite()" to verify that a user is able to read / write an object. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception such as :exc:`NotAuthorized`.
   * - PUT /accessRules/{pid}
     - :func:`CNAuthorization.setAccessPolicy`
     - Sets the access permissions for an object identified by *pid*. Triggers a change to the system metadata modified time stamp. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception such as :exc:`NotAuthorized`.
   * - POST /accounts
     - :func:`CNIdentity.registerAccount`
     - Create a new :term:`subject` in the DataONE system. Note that there should probably be a lot more metadata captured about the new user, and there should be a mechanism for specifying the default access control rules for the new account.
   * - PUT /accounts
     - :func:`CNIdentity.updateAccount`
     - Update an existing :term:`subject` in the DataONE system. The target subject is determined from the X509Certificate. Note that there should probably be a policy for verifying the details that change via this method.
   * - POST /accounts/{subject}
     - :func:`CNIdentity.verifyAccount`
     - Verify that the Person data associated with this Subject is a true representation of the real world person. This service can only be called by users who have an administrative role for the domain of users in question. A successful completion of this operation is indicated by returning a HTTP status of 200. An exeption MUST be returned if the account verification is not successful.
   * - GET /accounts/{subject}
     - :func:`CNIdentity.getSubjectInfo`
     - Get the information about a Person (their equivalent identities, and the Groups to which they belong) or the Group (including members).
   * - GET /accounts?query={query}[&start={start}&count={count}]
     - :func:`CNIdentity.listSubjects`
     - List the subjects, including users, groups, and systems, that match search criteria. The list can be restricted to subjects whose identifier matches certain substrings, and the size of the resultset can be paged through.
   * - POST /accounts/map
     - :func:`CNIdentity.mapIdentity`
     - Map the two authenticated identities, asserting that they represent the same subject. Mapping identities is a two-step process wherein a map request is made by a primary Subject and a subsequent (confirmation) map request is made by the secondary Subject. This ensures that mappings are performed only by those that have authority to do so. Successful completion of therequest is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - POST /accounts/mapconfirm
     - :func:`CNIdentity.confirmMapIdentity`
     - Confirms a previously initiated identity mapping. If subject A asserts that B is the same identity through :func:`CNIdentity.mapIdentity`, then this method is called by B to confirm that assertion. A successful request is indicated by returning a HTTP status of 200. A failed request MUST be indicated by returning an appropriate exception and setting the response HTTP status accordingly.
   * - POST /groups/{groupName}
     - :func:`CNIdentity.createGroup`
     - Create a group with the given name. Groups are lists of subjects that allow all members of the group to be referenced by listing solely the subject name of the group.  Group names must be unique within the DataONE system, and can only be modified by their creator.
   * - PUT /groups/{groupName}
     - :func:`CNIdentity.addGroupMembers`
     - Add members to the named group. Group members can be added by the original creator of the group, otherwise a NotAuthorized exception is thrown.  Group members are provided as a list of subjects to be added to the group. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.
   * - DELETE /groups/{groupName}
     - :func:`CNIdentity.removeGroupMembers`
     - Remove members to the named group. Group members can be removed by the original creator of the group, otherwise a NotAuthorized exception is thrown.  Group members are provided as a list of subjects to be removed from the group. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.
   * - POST /notify
     - :func:`CNReplication.setReplicationStatus`
     - Update the replication status of the system metadata, ensuring that the change is appropriate for the given state of system metadata.  For example, a MN can not change the status to *COMPLETED* unless the CN previously requested replication of the object and the replications status of the object (as indicated in the system metadata) is set to *QUEUED*. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.
   * - PUT /meta/replication/{pid}
     - :func:`CNReplication.updateReplicationMetadata`
     - Full replacement of replication metadata in the system metadata for the specified object, changes date sys meta modified Successful completion of the operation is indicated by returning a HTTP status of 200. Failure of the operation MUST be indicated by returning an appropriate exception.
   * - PUT /meta/policy/{pid}
     - :func:`CNReplication.setReplicationPolicy`
     - Updates the replication policy entry for an object by updating the system metadata. Successful completion of the operation is indicated by returning a HTTP status of 200. Failure of the operation MUST be indicated by returning an appropriate exception.
   * - GET /authorized/replication/{pid}
     - :func:`CNReplication.isReplicationAuthorized`
     - Verifies that a replication event was initiated by a CN by comparing the target node's identifiying subject with a known list of scheduled replication tasks. Successful completion of the operation is indicated by returning a HTTP status of 200. Failure of the operation MUST be indicated by returning an appropriate exception.
   * - PUT /node/{nodeid}
     - :func:`CNRegister.updateNodeCapabilities`
     - Update the capabilities document for the specified node. Successful completion of this operation is indicated by a HTTP response status code of 200. Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.
   * - POST /node
     - :func:`CNRegister.register`
     - Register a new node in the system. If the node already exists, then a :exc:`IdentifierNotUnique` exception MUST be returned.
