..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CN_query`
   :widths: 10 10 30
   :header-rows: 1

   * - REST
     - Function
     - Parameters
   * - :ref:`CN_query.search`
     - :func:`search`
     - (:class:`token<Types.AuthToken>`, :class:`query<Types.QueryType>`) ``->``
       :class:`Types.ObjectList`
   * - :ref:`CN_query.getLogRecords`
     - :func:`getLogRecords`
     - (:class:`token<Types.AuthToken>`, :class:`fromDate<Types.DateTime>`,
       :class:`toDate<Types.DateTime>`) ``->`` :class:`Types.LogRecords`




.. function:: search(token,query) -> ObjectList

   Search the metadata catalog and return identifiers of metadata records that
   match the criteria.

   :Use Cases:

     :doc:`UC02 </design/UseCases/02_uc>`, :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: MN :ref:`CN_query.search`

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param query: The criteria for matching the characteristics of the metadata
     objects of interest.

   :type query: :class:`Types.QueryType`

   :returns: A list of objects that match the specified search criteria

   :rtype: :class:`Types.ObjectList`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4290)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4310)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4280)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4300)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4281)``




.. function:: getLogRecords(token,fromDate,toDate) -> LogRecords

   Retrieves consolidated log information for the specified date range
   (inclusive) for the entire DataONE infrastructure

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: MN :ref:`CN_query.getLogRecords`

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param fromDate: Starting time for records in response

   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response

   :type toDate: :class:`Types.DateTime`

   :returns:

   :rtype: :class:`Types.LogRecords`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

.. TODO::
    Define the response structure and access control rules

.. TODO::
    getLogRecords should really be able to respond to a query rather than just a
    simple date range


