..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_core`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /monitor/ping``
     - :func:`ping`
     - () ``->`` :class:`Types.Boolean`
   * - Tier 1
     - ``GET /log``
     - :func:`getLogRecords`
     - (:class:`token<Types.AuthToken>`, :class:`fromDate<Types.DateTime>`,
       :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`) ``->``
       :class:`Types.LogRecords`
   * - Tier 1
     - n/a
     - :func:`log`
     - (:class:`typeOfOperation<Types.Event>`,
       :class:`targetGuid<Types.Identifier>`,
       :class:`requestorIdentitity<Types.Principal>`,
       :class:`dateOfRequest<Types.DateTime>`) ``->``
   * - Tier 1
     - ``GET /monitor/object``
     - :func:`getObjectStatistics`
     - (:class:`token<Types.AuthToken>`, :class:`[time]<Types.DateTime>`,
       :class:`[format]<Types.ObjectFormat>`, :class:`[day]<Types.Integer>`,
       :class:`[pid]<Types.Identifier>`) ``->`` :class:`Types.MonitorList`
   * - Tier 1
     - ``GET /monitor/event``
     - :func:`getOperationStatistics`
     - (:class:`token<Types.AuthToken>`, :class:`[time]<Types.DateTime>`,
       :class:`[requestor]<Types.Principal>`, :class:`[day]<Types.Integer>`,
       :class:`[event]<Types.Event>`, :class:`[eventTime]<Types.DateTime>`,
       :class:`[format]<Types.ObjectFormat>`) ``->`` :class:`Types.MonitorList`
   * - Tier 1
     - ``GET /monitor/status``
     - :func:`getStatus`
     - () ``->`` :class:`Types.StatusResponse`
   * - Tier 1
     - ``GET /  or  GET /node``
     - :func:`getCapabilities`
     - () ``->`` :class:`Types.NodeList`




.. function:: ping() -> Boolean

   Low level "are you alive" operation. Response is simple ACK, but may be
   reasonable to overload with a couple of flags that could indicate
   availability of new data or change in capabilities.

   The Member Node should perform some minimal internal functionality testing
   before answering. However, ping checks will be frequent (every few minutes)
   so the internal functionality test should not be high impact.

   :Use Cases:

     :doc:`UC10 </design/UseCases/10_uc>`

   :REST URL: ``GET /monitor/ping``

   :returns: Null body or Exception

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2041)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2042)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2043)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2044)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2045)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2046)``


.. include:: ../examples/ping.txt



----

.. function:: getLogRecords(token,fromDate,[toDate],[event]) -> LogRecords

   Retrieve log information from the MN for the specified date range
   (inclusive).

   :REST URL: ``GET /log``

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param fromDate: Starting time for records in response

   :type fromDate: :class:`Types.DateTime`

   :param toDate: End time for records in response. If not specified, then
     defaults to now.

   :type toDate: :class:`Types.DateTime`

   :param event: Return only log records for the specified type of event.
     Default is all.

   :type event: :class:`Types.Event`

   :returns:

   :rtype: :class:`Types.LogRecords`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1460)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1480)``

     The request parameters were malformed or an invalid date range was
     specified.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1470)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1461)``



----

.. function:: log(typeOfOperation,targetGuid,requestorIdentitity,dateOfRequest) -> 

   This method is used exclusively internally by a MN. It really isn't part of
   external the API that must be implemented. However, a MN will need to
   implement some sort of logging infrastructure so that it can respond to
   :func:`MN_core.getLogRecords()`.

   :Use Cases:

     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC06 </design/UseCases/06_uc>`,
     :doc:`UC04 </design/UseCases/04_uc>`, :doc:`UC09 </design/UseCases/09_uc>`,
     :doc:`UC16 </design/UseCases/16_uc>`, :doc:`UC37 </design/UseCases/37_uc>`

   :REST URL: N/A

   :param typeOfOperation: Enumerated value

   :type typeOfOperation: :class:`Types.Event`

   :param targetGuid: The target of the operation

   :type targetGuid: :class:`Types.Identifier`

   :param requestorIdentitity: Who invoked the operation

   :type requestorIdentitity: :class:`Types.Principal`

   :param dateOfRequest: Time stamp

   :type dateOfRequest: :class:`Types.DateTime`

   :returns:

   :rtype: 

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1500)``

     Define the type of the Log Event


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1510)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1501)``



----

.. function:: getObjectStatistics(token,[time],[format],[day],[pid]) -> MonitorList

   Called by the monitoring system to find how many objects are stored on the
   MN, cumulative or for each day in a given range.

   :REST URL: ``GET /monitor/object``

   :param token: Identity with authority to retrieve the statistics.

   :type token: :class:`Types.AuthToken`

   :param time: An ISO8601 compatible DateTime range specifying the time range
     for which to return object statistics.

   :type time: :class:`Types.DateTime`

   :param format: Limit to objects of given format.

   :type format: :class:`Types.ObjectFormat`

   :param day: Flag that causes a separate set of statistics to be returned for
     each day. Without this flag, a single, cumulative set of statistics is
     returned.

   :type day: :class:`Types.Integer`

   :param pid: Filter on identifier (with wildcards)

   :type pid: :class:`Types.Identifier`

   :returns: List of statistics.

   :rtype: :class:`Types.MonitorList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2060)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2061)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2062)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2063)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2064)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2065)``


.. include:: ../examples/getObjectStatistics.txt



----

.. function:: getOperationStatistics(token,[time],[requestor],[day],[event],[eventTime],[format]) -> MonitorList

   Called by the monitoring system to find how many operations have been
   performed on the MN, cumulative or for each day in a given range.

   :REST URL: ``GET /monitor/event``

   :param token: Identity with authority to retrieve the statistics.

   :type token: :class:`Types.AuthToken`

   :param time: An ISO8601 compatible DateTime range specifying the time range
     for which to return operation statistics.

   :type time: :class:`Types.DateTime`

   :param requestor: Limit to operations performed by given requestor identity.

   :type requestor: :class:`Types.Principal`

   :param day: A non-zero value causes a separate set of statistics to be
     returned for each day, otherwise a single, cumulative set of statistics is
     returned. Default=0

   :type day: :class:`Types.Integer`

   :param event: Enumerated value

   :type event: :class:`Types.Event`

   :param eventTime: An ISO8601 compatible DateTime range specifying the time
     range that that objects were created for which to return operation
     statistics.

   :type eventTime: :class:`Types.DateTime`

   :param format: Limit to events involving objects of the specified format.

   :type format: :class:`Types.ObjectFormat`

   :returns: List of statistics.

   :rtype: :class:`Types.MonitorList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2080)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2081)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2082)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2083)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2084)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2085)``


.. include:: ../examples/getOperationStatistics.txt



----

.. function:: getStatus() -> StatusResponse

   This function is similar to :func:`MN_health.ping` but returns a more
   complete status which may include information such as planned service
   outages.

   This method provide a mechanism for notification to Coordinating Nodes at a
   higher frequency than through setting properties in the node registry
   information.

   The response to a *getStatus* request is currently undefined, but will be a
   structure containing information that can be used by the Coordinating Nodes
   for notification of pending outages, software changes, or other significant
   events as described in :doc:`/design/UseCases/10_uc`.

   :Use Cases:

     :doc:`UC10 </design/UseCases/10_uc>`

   :REST URL: ``GET /monitor/status``

   :returns: Undefined

   :rtype: :class:`Types.StatusResponse`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2100)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2101)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2102)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2103)``

   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=2104)``

   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=2105)``



----

.. function:: getCapabilities() -> NodeList

   Returns a document describing the capabilities of the Member Node.

   :REST URL: ``GET /  or  GET /node``

   :returns: The technical capabilities of the Member Node

   :rtype: :class:`Types.NodeList`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2160)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2161)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2162)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2163)``



----