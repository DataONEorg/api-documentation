..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Methods for CN component
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /monitor/ping``
     - :func:`CNCore.ping`
     - () ``->`` null
   * - Tier 1
     - ``POST /object``
     - :func:`CNCore.create`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /formats``
     - :func:`CNCore.listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - ``GET /formats/{formatId}``
     - :func:`CNCore.getFormat`
     - (:class:`formatId<Types.ObjectFormatIdentifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - ``GET /log?[fromDate={fromDate}][&toDate={toDate}][&event={event}][&pidFilter={pidFilter}][&start={start}][&count={count}]``
     - :func:`CNCore.getLogRecords`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`, ``[pidFilter]``, ``[start]``, ``[count]``) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``POST /reserve``
     - :func:`CNCore.reserveIdentifier`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``POST /generate``
     - :func:`CNCore.generateIdentifier`
     - (:class:`session<Types.Session>`, ``scheme``, ``[fragment]``) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - ``GET /checksum``
     - :func:`CNCore.listChecksumAlgorithms`
     - () ``->`` :class:`Types.ChecksumAlgorithmList`
   * - 
     - ``PUT /obsoletedBy/{pid}``
     - :func:`CNCore.setObsoletedBy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`obsoletedByPid<Types.Identifier>`, ``serialVersion``) ``->`` boolean
   * - Tier 1
     - ``GET /node``
     - :func:`CNCore.listNodes`
     - () ``->`` :class:`Types.NodeList`
   * - Tier 1
     - ``POST /meta``
     - :func:`CNCore.registerSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - 
     - ``GET /reserve/{pid}?subject={subject}``
     - :func:`CNCore.hasReservation`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`, :class:`pid<Types.Identifier>`) ``->`` boolean

   * - Tier 1
     - ``GET /object/{pid}``
     - :func:`CNRead.get`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - ``GET /meta/{pid}``
     - :func:`CNRead.getSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.SystemMetadata`
   * - Tier 1
     - ``HEAD /object/{pid}``
     - :func:`CNRead.describe`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.DescribeResponse`
   * - Tier 1
     - ``GET /resolve/{pid}``
     - :func:`CNRead.resolve`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.ObjectLocationList`
   * - Tier 1
     - ``GET /checksum/{pid}``
     - :func:`CNRead.getChecksum`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Checksum`
   * - Tier 1
     - ``GET /object[?fromDate={fromDate}&toDate={toDate}&formatId= {formatId}&replicaStatus={replicaStatus}&start={start}&count={count}]``
     - :func:`CNRead.listObjects`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[formatId]<Types.ObjectFormatIdentifier>`, ``[replicaStatus]``, ``[start=0]``, ``[count=1000]``) ``->`` :class:`Types.ObjectList`
   * - Tier 1
     - ``GET /search/{queryType}/{query}``
     - :func:`CNRead.search`
     - (:class:`session<Types.Session>`, ``queryType``, ``query``) ``->`` :class:`Types.ObjectList`
   * - Tier 2
     - ``PUT /owner/{pid}``
     - :func:`CNAuthorization.setRightsHolder`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`userId<Types.Subject>`, ``serialVersion``) ``->`` :class:`Types.Identifier`
   * - Tier 2
     - ``GET /isAuthorized/{pid}?action={action}``
     - :func:`CNAuthorization.isAuthorized`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`action<Types.Permission>`) ``->`` boolean
   * - Tier 2
     - ``PUT /accessRules/{pid}``
     - :func:`CNAuthorization.setAccessPolicy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`accessPolicy<Types.AccessPolicy>`, ``serialVersion``) ``->`` boolean
   * - Tier 2
     - ``POST /accounts``
     - :func:`CNIdentity.registerAccount`
     - (:class:`session<Types.Session>`, :class:`person<Types.Person>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - ``PUT /accounts/{subject}``
     - :func:`CNIdentity.updateAccount`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`, :class:`person<Types.Person>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - ``PUT /accounts/verification/{subject}``
     - :func:`CNIdentity.verifyAccount`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - ``GET /accounts/{subject}``
     - :func:`CNIdentity.getSubjectInfo`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.SubjectInfo`
   * - Tier 2
     - ``GET /accounts?query={query}[&status={status}&start={start}&count={count}]``
     - :func:`CNIdentity.listSubjects`
     - (:class:`session<Types.Session>`, ``query``, ``status``, ``start``, ``count``) ``->`` :class:`Types.SubjectInfo`
   * - Tier 2
     - ``POST /accounts/map``
     - :func:`CNIdentity.mapIdentity`
     - (:class:`session<Types.Session>`, :class:`primarySubject<Types.Subject>`, :class:`secondarySubject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - ``DELETE /accounts/map/{subject}``
     - :func:`CNIdentity.removeMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - ``POST /accounts/pendingmap``
     - :func:`CNIdentity.requestMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - ``PUT /accounts/pendingmap/{subject}``
     - :func:`CNIdentity.confirmMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - ``GET /accounts/pendingmap/{subject}``
     - :func:`CNIdentity.getPendingMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.SubjectInfo`
   * - Tier 2
     - ``DELETE /accounts/pendingmap/{subject}``
     - :func:`CNIdentity.denyMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - ``POST /groups``
     - :func:`CNIdentity.createGroup`
     - (:class:`session<Types.Session>`, :class:`group<Types.Group>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - ``PUT /groups``
     - :func:`CNIdentity.updateGroup`
     - (:class:`session<Types.Session>`, :class:`group<Types.Group>`) ``->`` boolean
   * - Tier 4
     - ``PUT /replicaNotifications/{pid}``
     - :func:`CNReplication.setReplicationStatus`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`nodeRef<Types.NodeReference>`, :class:`status<Types.ReplicationStatus>`, :class:`failure<Types.BaseException>`) ``->`` boolean
   * - Tier 4
     - ``PUT /replicaMetadata/{pid}``
     - :func:`CNReplication.updateReplicationMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`replicaMetadata<Types.Replica>`, ``serialVersion``) ``->`` boolean
   * - Tier 4
     - ``PUT /replicaPolicies/{pid}``
     - :func:`CNReplication.setReplicationPolicy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`policy<Types.ReplicationPolicy>`, ``serialVersion``) ``->`` boolean
   * - Tier 4
     - ``GET /replicaAuthorizations/{pid}?targetNodeSubject={targetNodeSubject}``
     - :func:`CNReplication.isNodeAuthorized`
     - (:class:`session<Types.Session>`, :class:`targetNodeSubject<Types.Subject>`, :class:`pid<Types.Identifier>`) ``->`` boolean
   * - 
     - ``PUT /removeReplicaMetadata/{pid}``
     - :func:`CNReplication.deleteReplicationMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`nodeId<Types.NodeReference>`, ``serialVersion``) ``->`` boolean
   * - Tier 2
     - ``PUT /node/{nodeid}``
     - :func:`CNRegister.updateNodeCapabilities`
     - (:class:`session<Types.Session>`, :class:`nodeid<Types.NodeReference>`, :class:`node<Types.Node>`) ``->`` boolean
   * - Tier 2
     - ``POST /node``
     - :func:`CNRegister.register`
     - (:class:`session<Types.Session>`, :class:`node<Types.Node>`) ``->`` :class:`Types.NodeReference`

