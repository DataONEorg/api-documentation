..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Methods for CN component
   :widths: 3 3 10 10 30
   :header-rows: 1

   * - Tier
     - Version
     - REST
     - Function
     - Parameters
   * - Tier 1
     - 1.0, (2.0)
     - ``GET /monitor/ping``
     - :func:`CNCore.ping`
     - () ``->`` null
   * - Tier 1
     - 1.0, 2.0
     - ``POST /object``
     - :func:`CNCore.create`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /formats``
     - :func:`CNCore.listFormats`
     - () ``->`` :class:`Types.ObjectFormatList`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /formats/{formatId}``
     - :func:`CNCore.getFormat`
     - (:class:`formatId<Types.ObjectFormatIdentifier>`) ``->`` :class:`Types.ObjectFormat`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /log?[fromDate={fromDate}][&toDate={toDate}][&event={event}][&idFilter={idFilter}][&start={start}][&count={count}]``
     - :func:`CNCore.getLogRecords`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event, string>`, ``[idFilter]``, ``[start]``, ``[count]``) ``->`` :class:`Types.Log`
   * - Tier 1
     - 1.0, 2.0
     - ``POST /reserve``
     - :func:`CNCore.reserveIdentifier`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - 1.0, (2.0)
     - ``POST /generate``
     - :func:`CNCore.generateIdentifier`
     - (:class:`session<Types.Session>`, ``scheme``, ``[fragment]``) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - 1.0, (2.0)
     - ``GET /checksum``
     - :func:`CNCore.listChecksumAlgorithms`
     - () ``->`` :class:`Types.ChecksumAlgorithmList`
   * - 
     - 1.0, 2.0
     - ``PUT /obsoletedBy/{pid}``
     - :func:`CNCore.setObsoletedBy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`obsoletedByPid<Types.Identifier>`, ``serialVersion``) ``->`` boolean
   * - Tier 3
     - 1.0, (2.0)
     - ``DELETE /object/{id}``
     - :func:`CNCore.delete`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 3
     - 1.0, 2.0
     - ``PUT /archive/{id}``
     - :func:`CNCore.archive`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /node``
     - :func:`CNCore.listNodes`
     - () ``->`` :class:`Types.NodeList`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /``
     - :func:`CNCore.getCapabilities`
     - () ``->`` :class:`Types.Node`
   * - Tier 1
     - 1.0, 2.0
     - ``POST /meta``
     - :func:`CNCore.registerSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 1
     - 2.0
     - ``PUT /meta``
     - :func:`CNCore.updateSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` boolean
   * - 
     - 1.0, 2.0
     - ``GET /reserve/{id}?subject={subject}``
     - :func:`CNCore.hasReservation`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`, :class:`id<Types.Identifier>`) ``->`` boolean

   * - Tier 1
     - 1.0, 2.0
     - ``GET /object/{id}``
     - :func:`CNRead.get`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /meta/{id}``
     - :func:`CNRead.getSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.SystemMetadata`
   * - Tier 1
     - 1.0, 2.0
     - ``HEAD /object/{id}``
     - :func:`CNRead.describe`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.DescribeResponse`
   * - Tier 1
     - 1.0, 2.0
     - ``GET /resolve/{id}``
     - :func:`CNRead.resolve`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`) ``->`` :class:`Types.ObjectLocationList`
   * - Tier 1
     - 1.0, (2.0)
     - ``GET /checksum/{pid}``
     - :func:`CNRead.getChecksum`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Checksum`
   * - Tier 1
     - 1.0, (2.0)
     - ``GET /object[?fromDate={fromDate}&toDate={toDate}&identifier={identifier}&formatId={formatId}&nodeId={nodeId}&start={start}&count={count}]``
     - :func:`CNRead.listObjects`
     - (:class:`session<Types.Session>`, :class:`[fromDate]<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[formatId]<Types.ObjectFormatIdentifier>`, :class:`[identifier]<Types.Identifier>`, ``[start=0]``, ``[count=1000]``, :class:`[nodeId]<Types.NodeReference>`) ``->`` :class:`Types.ObjectList`
   * - Tier 1
     - 1.0, (2.0)
     - ``GET /search/{queryType}/{query}``
     - :func:`CNRead.search`
     - (:class:`session<Types.Session>`, ``queryType``, ``query``) ``->`` :class:`Types.ObjectList`
   * - Tier 1
     - 1.1, (2.0)
     - ``GET /query/{queryEngine}/{query}``
     - :func:`CNRead.query`
     - (:class:`session<Types.Session>`, ``queryEngine``, ``query``) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - 1.1, (2.0)
     - ``GET /query/{queryType}``
     - :func:`CNRead.getQueryEngineDescription`
     - (:class:`session<Types.Session>`, ``queryEngine``) ``->`` :class:`Types.QueryEngineDescription`
   * - Tier 1
     - 1.1, (2.0)
     - ``GET /query``
     - :func:`CNRead.listQueryEngines`
     - (:class:`session<Types.Session>`) ``->`` :class:`Types.QueryEngineList`
   * - Tier 1
     - 2.0
     - ``POST /synchronize``
     - :func:`CNRead.synchronize`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` boolean
   * - Tier 2
     - 1.0, 2.0
     - ``PUT /owner/{id}``
     - :func:`CNAuthorization.setRightsHolder`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`, :class:`userId<Types.Subject>`, ``serialVersion``) ``->`` :class:`Types.Identifier`
   * - Tier 2
     - 1.0, 2.0
     - ``GET /isAuthorized/{id}?action={action}``
     - :func:`CNAuthorization.isAuthorized`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`, :class:`action<Types.Permission>`) ``->`` boolean
   * - Tier 2
     - 1.0, 2.0
     - ``PUT /accessRules/{id}``
     - :func:`CNAuthorization.setAccessPolicy`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`, :class:`accessPolicy<Types.AccessPolicy>`, ``serialVersion``) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``POST /accounts``
     - :func:`CNIdentity.registerAccount`
     - (:class:`session<Types.Session>`, :class:`person<Types.Person>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - 1.0, (2.0)
     - ``PUT /accounts/{subject}``
     - :func:`CNIdentity.updateAccount`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`, :class:`person<Types.Person>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - 1.0, (2.0)
     - ``PUT /accounts/verification/{subject}``
     - :func:`CNIdentity.verifyAccount`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``GET /accounts/{subject}``
     - :func:`CNIdentity.getSubjectInfo`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.SubjectInfo`
   * - Tier 2
     - 1.0, (2.0)
     - ``GET /accounts?query={query}[&status={status}&start={start}&count={count}]``
     - :func:`CNIdentity.listSubjects`
     - (:class:`session<Types.Session>`, ``query``, ``status``, ``start``, ``count``) ``->`` :class:`Types.SubjectInfo`
   * - Tier 2
     - 1.0, (2.0)
     - ``POST /accounts/map``
     - :func:`CNIdentity.mapIdentity`
     - (:class:`session<Types.Session>`, :class:`primarySubject<Types.Subject>`, :class:`secondarySubject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``DELETE /accounts/map/{subject}``
     - :func:`CNIdentity.removeMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``POST /accounts/pendingmap``
     - :func:`CNIdentity.requestMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``PUT /accounts/pendingmap/{subject}``
     - :func:`CNIdentity.confirmMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``GET /accounts/pendingmap/{subject}``
     - :func:`CNIdentity.getPendingMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` :class:`Types.SubjectInfo`
   * - Tier 2
     - 1.0, (2.0)
     - ``DELETE /accounts/pendingmap/{subject}``
     - :func:`CNIdentity.denyMapIdentity`
     - (:class:`session<Types.Session>`, :class:`subject<Types.Subject>`) ``->`` boolean
   * - Tier 2
     - 1.0, (2.0)
     - ``POST /groups``
     - :func:`CNIdentity.createGroup`
     - (:class:`session<Types.Session>`, :class:`group<Types.Group>`) ``->`` :class:`Types.Subject`
   * - Tier 2
     - 1.0, (2.0)
     - ``PUT /groups``
     - :func:`CNIdentity.updateGroup`
     - (:class:`session<Types.Session>`, :class:`group<Types.Group>`) ``->`` boolean
   * - Tier 4
     - 1.0, (2.0)
     - ``PUT /replicaNotifications/{pid}``
     - :func:`CNReplication.setReplicationStatus`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`nodeRef<Types.NodeReference>`, :class:`status<Types.ReplicationStatus>`, :class:`failure<Types.BaseException>`) ``->`` boolean
   * - Tier 4
     - 1.0, (2.0)
     - ``PUT /replicaMetadata/{pid}``
     - :func:`CNReplication.updateReplicationMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`replicaMetadata<Types.Replica>`, ``serialVersion``) ``->`` boolean
   * - Tier 4
     - 1.0, 2.0
     - ``PUT /replicaPolicies/{id}``
     - :func:`CNReplication.setReplicationPolicy`
     - (:class:`session<Types.Session>`, :class:`id<Types.Identifier>`, :class:`policy<Types.ReplicationPolicy>`, ``serialVersion``) ``->`` boolean
   * - Tier 4
     - 1.0, (2.0)
     - ``GET /replicaAuthorizations/{pid}?targetNodeSubject={targetNodeSubject}``
     - :func:`CNReplication.isNodeAuthorized`
     - (:class:`session<Types.Session>`, :class:`targetNodeSubject<Types.Subject>`, :class:`pid<Types.Identifier>`) ``->`` boolean
   * - 
     - 1.0, (2.0)
     - ``PUT /removeReplicaMetadata/{pid}``
     - :func:`CNReplication.deleteReplicationMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`nodeId<Types.NodeReference>`, ``serialVersion``) ``->`` boolean
   * - Tier 2
     - 1.0, 2.0
     - ``PUT /node/{nodeid}``
     - :func:`CNRegister.updateNodeCapabilities`
     - (:class:`session<Types.Session>`, :class:`nodeid<Types.NodeReference>`, :class:`node<Types.Node>`) ``->`` boolean
   * - Tier 2
     - 1.0, 2.0
     - ``GET /node/{nodeid}``
     - :func:`CNRegister.getNodeCapabilities`
     - (:class:`nodeid<Types.NodeReference>`) ``->`` :class:`Types.Node`
   * - Tier 2
     - 1.0, 2.0
     - ``POST /node``
     - :func:`CNRegister.register`
     - (:class:`session<Types.Session>`, :class:`node<Types.Node>`) ``->`` :class:`Types.NodeReference`
   * - Tier 1
     - 2.0
     - ``GET /views/{theme}/{id}``
     - :func:`CNView.view`
     - (:class:`session<Types.Session>`, ``theme``, :class:`id<Types.Identifier>`) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - 2.0
     - ``GET /views``
     - :func:`CNView.listViews`
     - (:class:`session<Types.Session>`) ``->`` :class:`Types.OptionList`
   * - Tier 2
     - 2.0
     - ``GET /diag/subject``
     - :func:`CNDiagnostic.echoCredentials`
     - (:class:`session<Types.Session>`) ``->`` :class:`Types.SubjectInfo`
   * - Tier 1
     - 2.0
     - ``POST /diag/sysmeta``
     - :func:`CNDiagnostic.echoSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.SystemMetadata`
   * - Tier 1
     - 2.0
     - ``POST /diag/object``
     - :func:`CNDiagnostic.echoIndexedObject`
     - (:class:`session<Types.Session>`, ``queryEngine``, :class:`sysmeta<Types.SystemMetadata>`, ``object``) ``->`` :class:`Types.OctetStream`

