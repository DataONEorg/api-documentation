..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_storage`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 3
     - ``POST /object/{pid}``
     - :func:`create`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`,
       ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->``
       :class:`Types.Identifier`
   * - Tier 3
     - ``PUT /object/{pid}``
     - :func:`update`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`,
       ``object``, :class:`newPid<Types.Identifier>`,
       :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 3
     - ``DELETE /object/{pid}``
     - :func:`delete`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`) ``->``
       :class:`Types.Identifier`




.. function:: create(token,pid,object,sysmeta) -> Identifier

   Adds a new object to the Member Node, where the object is either a data
   object or a science metadata object. This method is called by clients to
   create new data objects on Member Nodes.

   The *pid* must not exist in the DataONE system or must have been previously
   reserved using  :func:`CN_crud.reserveIdentifier`.

   :Use Cases:

     :doc:`UC04 </design/UseCases/04_uc>`, :doc:`UC09 </design/UseCases/09_uc>`,
     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``POST /object/{pid}``

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param pid: The identifier that should be used in DataONE to identify and
     access the object. This is an Unicode string that follows the constraints
     on identifiers described in :doc:`/design/PIDs`. If the identifier is
     already in use, :exc:`Exceptions.IdentifierNotUnique` will be raised and
     the client should try again with a different, unique identifier.

   :type pid: :class:`Types.Identifier`

   :param object: The data bytes that are to be added to the Member Node.

   :type object: bytes

   :param sysmeta: The system metadata document that provides basic information
     about the object, including a reference to its identifier, access control
     information, etc. Attributes of the sysmeta that are the responsibility of
     the client **must** be set.

   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the
     system.

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1100)``

     The provided identity does not have permission to WRITE to the Member Node.


   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=1120)``

     The requested identifier is already used by another object and therefore
     can not be used for this object. Clients should choose a new identifier
     that is unique and retry the operation or use
     :func:`CN_crud.reserveIdentifier` to reserve one.


   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=1140)``

     The MN can not deal with the content specified in the data package.


   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=1160)``

     The MN is unable to execute the transfer because it does not have
     sufficient storage space for example.


   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=1180)``

     The supplied system metadata is invalid. This could be because some
     required field is not set, the metadata document is malformed, or the value
     of some field is not valid.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1190)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1110)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1101)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1102)``


.. include:: ../examples/create.txt



----

.. function:: update(token,pid,object,newPid,sysmeta) -> Identifier

   Updates an existing object by creating a new object identified by *newPid* on
   the Member Node which explicitly obsoletes the object identified by *pid*
   through appropriate changes to the SystemMetadata of *pid* and *newPid*.

   This method is called by clients to update objects on Member Nodes.

   The *pid* of the object being obsoleted is passed in as a parameter, and the
   Member Node should record the update by storing the
   :attr:`SystemMetadata.obsoletes` and :attr:`SystemMetadata.obsoletedBy`
   fields for the respective objects in their system metadata.

   The modified system metadata entries must then be available in
   :func:`MN_read.listObjects` to ensure that a Coordinating Node will pick up
   the changes when filtering on :attr:`SystmeMetadata.dateSysMetadataModified`.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``PUT /object/{pid}``

   :param token: The authentication token returned by :func:`CN_auth.login` or
     :func:`CN_auth.sessionRequest`.

   :type token: :class:`Types.AuthToken`

   :param pid: The identifier of the object that is being updated. If this
     identifier does not exist in the system, an error is raised and the
     operation does not cause any changes to the objects or their metadata.

   :type pid: :class:`Types.Identifier`

   :param object: The bytes of the data or science metadata object that will be
     deprecating the exsting object.

   :type object: bytes

   :param newPid: The identifier that will become the replacement identifier for
     the existing object after the update.

   :type newPid: :class:`Types.Identifier`

   :param sysmeta: A System Metadata document describing *object*. The
     :attr:`SystemMetadata.obsoletes` field *must* contain the identifier of the
     object being obsoleted and the Member Node will raise an InvalidRequest
     exception if the attribute value does not match the *pid* in the request.
     Other required client provided fields as described for
     :class:`Types.SystemMetadata` must be filled.

   :type sysmeta: :class:`Types.SystemMetadata`

   :returns: The identifier that was used to insert the document into the
     system, which should be the same as *newPid*.

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1200)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=1220)``

     The requested identifier is already used by another object and therefore
     can not be used for this object.  Clients should choose a new identifier
     that is unique and retry the operation.


   :raises Exceptions.UnsupportedType: ``(errorCode=400, detailCode=1240)``

     The MN can not deal with the object provided.


   :raises Exceptions.InsufficientResources: ``(errorCode=413, detailCode=1260)``

     The MN is unable to execute the transfer because it does not have
     sufficient storage space for example.


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1280)``

     The update operation failed because the object which was supposed to be
     updated in the system (indicated via the *obsoletedPid* parameter) is not
     present in the DataONE system, so update is an illegal operation.


   :raises Exceptions.InvalidSystemMetadata: ``(errorCode=400, detailCode=1300)``

     The supplied system metadata is invalid. This could be because some
     required field is not set, the metadata document is malformed, or the value
     of some field is not valid.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1310)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1210)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1201)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1202)``



----

.. function:: delete(token,pid) -> Identifier

   Deletes an object from the Member Node, where the object is either a data
   object or a science metadata object. This method is called by clients to
   delete objects on Member nodes. Member Nodes must check that the caller is
   authorized to perform this function.

   If the object does not exist on the node servicing the request, then an
   :exc:`Exceptions.NotFound` exception is raised. The message body of the
   exception should contain a hint as to the location of the
   :func:`CN_crud.resolve` method.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``DELETE /object/{pid}``

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param pid: The identifier of the object to be deleted.

   :type pid: :class:`Types.Identifier`

   :returns: The identifier that was used to delete the document from the
     system.

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1320)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1340)``

     The delete operation failed because the object is not present on the node
     servicing the request.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1350)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1330)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1321)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1322)``

.. TODO::
    As DataONE is to be an archival system, we need to determine what the
    semantics of the DELETE function really should be. Can any user delete their
    objects at any time? What if they have published and referenced the
    identifier in past? Should DELETE simply be a mechanism to move the object
    out of commonly found search mechanisms? What about copyrighted or illegal
    content that is uploaded?



----