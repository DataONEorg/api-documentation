..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CN_auth`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 2
     - ``PUT /owner/{pid}``
     - :func:`setOwner`
     - (:class:`cert<Types.X509Certificate>`, :class:`pid<Types.Identifier>`,
       :class:`userId<Types.Principal>`) ``->`` :class:`Types.Identifier`
   * - Tier 2
     - ``POST /accounts``
     - :func:`newAccount`
     - (:class:`cert<Types.X509Certificate>`, :class:`person<Types.Person>`)
       ``->`` :class:`Types.Principal`
   * - Tier 2
     - ``POST /accounts/{principal}``
     - :func:`verifyAccount`
     - (:class:`cert<Types.X509Certificate>`,
       :class:`principal<Types.Principal>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``GET /accounts/{principal}``
     - :func:`getPrincipalInfo`
     - (:class:`cert<Types.X509Certificate>`, :class:`query<Types.String>`,
       ``start``, ``count``) ``->`` :class:`Types.PrincipalList`
   * - Tier 2
     - ``GET /accounts``
     - :func:`listPrincipals`
     - (:class:`cert<Types.X509Certificate>`, :class:`query<Types.String>`,
       ``start``, ``count``) ``->`` :class:`Types.PrincipalList`
   * - Tier 2
     - ``POST /accounts/map``
     - :func:`mapIdentity`
     - (:class:`token1<Types.AuthToken>`, :class:`token2<Types.AuthToken>`)
       ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``POST /groups/{groupName}``
     - :func:`createGroup`
     - (:class:`cert<Types.X509Certificate>`,
       :class:`groupName<Types.Principal>`) ``->`` :class:`Types.Identifier`
   * - Tier 2
     - ``PUT /groups/{groupName}``
     - :func:`addGroupMembers`
     - (:class:`cert<Types.X509Certificate>`,
       :class:`groupName<Types.Principal>`,
       :class:`members<Types.PrincipalList>`) ``->`` :class:`Types.Identifier`
   * - Tier 2
     - ``DELETE /groups/{groupName}``
     - :func:`removeGroupMembers`
     - (:class:`cert<Types.X509Certificate>`,
       :class:`groupName<Types.Principal>`,
       :class:`members<Types.PrincipalList>`) ``->`` :class:`Types.Identifier`
   * - Tier 2
     - ``GET /isAuthorized/{pid}``
     - :func:`isAuthorized`
     - (:class:`cert<Types.X509Certificate>`, :class:`pid<Types.Identifier>`,
       :class:`operation<Types.Event>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``PUT /accessRules/{pid}``
     - :func:`setAccess`
     - (:class:`cert<Types.X509Certificate>`, :class:`pid<Types.Identifier>`,
       :class:`accessPolicy<Types.AccessPolicy>`) ``->`` :class:`Types.Boolean`




.. function:: setOwner(cert,pid,userId) -> Identifier

   Changes ownership (RightsHolder) of the specified object to the
   :term:`principal` specified by `userId`

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``PUT /owner/{pid}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param pid: Identifier of the object to be modified

   :type pid: :class:`Types.Identifier`

   :param userId: The principal that will be taking ownership of the specified
     object.

   :type userId: :class:`Types.Principal`

   :returns: Identifier of the object that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4480)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4440)``

     The supplied principal does not have permission to change ownership of the
     object


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4460)``

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4441)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4442)``



----

.. function:: newAccount(cert,person) -> Principal

   Create a new :term:`principal` in the DataONE system. Note that there should
   probably be a lot more metadata captured about the new user, and there should
   be a mechanism for specifying the default access control rules for the new
   account.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``POST /accounts``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param person: Information about the Person to be registered with the
     account, including the real name and email address for the individual.  The
     Principal with the Person must match the subject of the X.509 certificate
     associated with the authenticated SSL session via client-side
     authentication, and must not have been registered previously.

   :type person: :class:`Types.Person`

   :returns: The new principal in the DataONE system.  This may be a simple
     identifier.

   :rtype: :class:`Types.Principal`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4530)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=4500)``

     The chosen identity already exists in the system


   :raises Exceptions.InvalidCredentials: ``(errorCode=401, detailCode=4520)``

     Raised if the supplied credentials are invalid, such as an invalid X.509
     certificate.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4501)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4502)``



----

.. function:: verifyAccount(cert,principal) -> Boolean

   Verify that the Person data associated with this Principal is a true
   representation of the real world person.

   This service can only be called byt users who have an administrative role for
   the domain of users in question.

   :REST URL: ``POST /accounts/{principal}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param principal: The Principal identifier of the Person to be verified.
     After this service is called for a principal by an authorized user, the
     account is marked as verified by this user.

   :type principal: :class:`Types.Principal`

   :returns: True if the account verification succeeds, otherwise false.

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4550)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4540)``

     This error is raised if the person attempting to validate the account is
     not authorized to verify accounts.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4541)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4555)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4542)``



----

.. function:: getPrincipalInfo(cert,query,start,count) -> PrincipalList

   Get the information about a Person, their equivalent identities, and the
   Groups to which they belong.

   :REST URL: ``GET /accounts/{principal}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param query: A query string criteria to be matched using a case-insensitive
     substring match against the identifier for the principal, the givenName or
     familyName of users, and the groupName of groups.  The function returns the
     union of all successful matches against these fields.

   :type query: :class:`Types.String`

   :param start: The starting record number for the records to be returned.

   :type start: integer

   :param count: The number of records to be returned.

   :type count: integer

   :returns: The list of people and groups that match the query.

   :rtype: :class:`Types.PrincipalList`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2290)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2270)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2260)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2261)``



----

.. function:: listPrincipals(cert,query,start,count) -> PrincipalList

   List the principals, including users, groups, and systems, that match search
   criteria.

   The list can be restricted to principals whose identifier matches certain
   substrings, and the size of the resultset can be paged through.

   :REST URL: ``GET /accounts``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param query: A query string criteria to be matched using a case-insensitive
     substring match against the identifier for the principal, the givenName or
     familyName of users, and the groupName of groups.  The function returns the
     union of all successful matches against these fields.

   :type query: :class:`Types.String`

   :param start: The starting record number for the records to be returned.

   :type start: integer

   :param count: The number of records to be returned.

   :type count: integer

   :returns: The list of people and groups that match the query.

   :rtype: :class:`Types.PrincipalList`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2290)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2270)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2260)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2261)``



----

.. function:: mapIdentity(token1,token2) -> Boolean

   Map the two authenticated identities, asserting that they represent the same
   principal.

   The two identities are represented as AuthToken objects, which allows the CN
   to determine if both identities have been properly authenticated, which
   demonstrates that the user has control of both identities.

   :REST URL: ``POST /accounts/map``

   :param token1: The authentication token returned by :func:`CN_auth.login` or
     :func:`CN_auth.sessionRequest` tat is associated with a session. Used to
     identify the caller to enable authorization decisions.

   :type token1: :class:`Types.AuthToken`

   :param token2: The authentication token associated with a session. Used to
     identify the caller to enable authorization decisions.

   :type token2: :class:`Types.AuthToken`

   :returns: True if the map was successfully created, false otherwise.

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2390)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2370)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2360)``

     The supplied principal does not have permission to map these two identities


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2340)``

     The specified principal does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2361)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2342)``



----

.. function:: createGroup(cert,groupName) -> Identifier

   Create a group with the given name.

   Groups are lists of principals that allow all members of the group to be
   referenced by listing solely the subject name of the group.  Group names must
   be unique within the DataONE system, and can only be modified by their
   creator.

   :REST URL: ``POST /groups/{groupName}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param groupName: The name of the group to be created.

   :type groupName: :class:`Types.Principal`

   :returns: Identifier of the group that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2490)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2470)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2460)``

     The supplied principal does not have permission to create a group


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2440)``

     The specified principal does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2461)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2442)``

   :raises Exceptions.IdentifierNotUnique: ``(errorCode=409, detailCode=2400)``

     A group by this name already exists




----

.. function:: addGroupMembers(cert,groupName,members) -> Identifier

   Add members to the named group.

   Group members can be added by the original creator of the group, otherwise a
   NotAuthorized exception is thrown.  Group members are provided as a list of
   principals to be added to the group.

   :REST URL: ``PUT /groups/{groupName}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param groupName: The identifier of the group to be modified.

   :type groupName: :class:`Types.Principal`

   :param members: The list of members to be added to the group.

   :type members: :class:`Types.PrincipalList`

   :returns: Identifier of the group that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2590)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2570)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2560)``

     The supplied principal does not have permission to add to a group


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2540)``

     The specified group does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2561)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2542)``



----

.. function:: removeGroupMembers(cert,groupName,members) -> Identifier

   Remove members to the named group.

   Group members can be removed by the original creator of the group, otherwise
   a NotAuthorized exception is thrown.  Group members are provided as a list of
   principals to be removed from the group.

   :REST URL: ``DELETE /groups/{groupName}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param groupName: The identifier of the group to be modified.

   :type groupName: :class:`Types.Principal`

   :param members: The list of members to be removed from the group.

   :type members: :class:`Types.PrincipalList`

   :returns: Identifier of the group that was modified

   :rtype: :class:`Types.Identifier`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2690)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=2670)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2660)``

     The supplied principal does not have permission to remove from a group


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=2640)``

     The specified group does not exist in the DataONE system


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2661)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2642)``

.. TODO::
    Evaluate the REST endpoint for this method and determine if DELETE is the
    appropriate http method.



----

.. function:: isAuthorized(cert,pid,operation) -> Boolean

   Test if the user identified by the provided token has authorization for
   operation on the specified object.

   .. Note:: Should perhaps add convenience methods for "canRead()" and
     "canWrite()" to verify that a user is able to read / write an object.

   .. Note:: The token and operation parameters are not currently encoded in the
     REST URL, so unclear how they should be passed in.

   :Use Cases:

     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC02 </design/UseCases/02_uc>`,
     :doc:`UC36 </design/UseCases/36_uc>`, :doc:`UC37 </design/UseCases/37_uc>`

   :REST URL: ``GET /isAuthorized/{pid}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param pid: The identifer of the resource for which access is being checked.

   :type pid: :class:`Types.Identifier`

   :param operation: The type of operation which is being requested for the
     given pid.

   :type operation: :class:`Types.Event`

   :returns: True if the operation is allowed

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1760)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1840)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1800)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1820)``

     This error is raised if the request comes from a black listed source (e.g.
     a temporary block may be imposed on a source that calls this method too
     many times within some time interval)


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1780)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1761)``



----

.. function:: setAccess(cert,pid,accessPolicy) -> Boolean

   Sets the access permissions for an object identified by *pid*.

   .. Note:: The token and accessPolicy parameters are not currently encoded in
     the REST URL, so unclear how they should be passed in.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``PUT /accessRules/{pid}``

   :param cert: X.509 Certificate, passed to the system via SSL client-side
     authentication, and used to identiy and validate the identity of the
     Principal making the call.  The X.509 certificate should be traceable to
     the CILogon service, and provides various attributes for authorization
     decisions.  If the X.509 certificate is not provided, then the request
     should be considered to have originated from the DataONE 'Public' user.

   :type cert: :class:`Types.X509Certificate`

   :param pid: The object for which access control is being edited.

   :type pid: :class:`Types.Identifier`

   :param accessPolicy: The desired privileges to be assigned to the object.

   :type accessPolicy: :class:`Types.AccessPolicy`

   :returns: True if the operation succeeds, otherwise false.

   :rtype: :class:`Types.Boolean`

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4410)``

     The supplied token is invalid


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4430)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4400)``

     The specified object does not exist in the DataONE system


   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4420)``

     The :term:`principal` does not have permission to alter access control
     rules for the object.


   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4401)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4402)``

.. TODO::
    Should permissions cascade? e.g. Should setting permission on a Data Package
    cascade to the contained objects as well (the experiment metadata and data)?

.. TODO::
    .. Note:: Setting access rules on a CN implies that the rules are propogated
      to the CNs and to all MNs holding a copy of the object



----