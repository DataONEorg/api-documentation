..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Methods for MN component
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /monitor/ping``
     - :func:`MNCore.ping`
     - () ``->`` :class:`Types.Boolean`
   * - Tier 1
     - ``GET /log``
     - :func:`MNCore.getLogRecords`
     - (:class:`session<Types.Session>`, :class:`fromDate<Types.DateTime>`, :class:`[toDate]<Types.DateTime>`, :class:`[event]<Types.Event>`, ``[start=0]``, ``[count=1000]``) ``->`` :class:`Types.Log`
   * - Tier 1
     - ``GET /monitor/object``
     - :func:`MNCore.getObjectStatistics`
     - (``[format]``, ``[pid]``) ``->`` :class:`Types.ObjectStatistics`
   * - Tier 1
     - ``GET /monitor/event``
     - :func:`MNCore.getOperationStatistics`
     - (:class:`session<Types.Session>`, ``[period]``, :class:`[requestor]<Types.Subject>`, :class:`[event]<Types.Event>`, :class:`[format]<Types.ObjectFormat>`) ``->`` :class:`Types.MonitorList`
   * - Tier 1
     - ``GET /monitor/status``
     - :func:`MNCore.getStatus`
     - () ``->`` :class:`Types.StatusResponse`
   * - Tier 1
     - ``GET /  or  GET /node``
     - :func:`MNCore.getCapabilities`
     - () ``->`` :class:`Types.Node`

   * - Tier 1
     - ``GET /object/{pid}``
     - :func:`MNRead.get`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.OctetStream`
   * - Tier 1
     - ``GET /meta/{pid}``
     - :func:`MNRead.getSystemMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.SystemMetadata`
   * - Tier 1
     - ``HEAD /object/{pid}``
     - :func:`MNRead.describe`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.DescribeResponse`
   * - Tier 1
     - ``GET /checksum/{pid}[?checksumAlgorithm={checksumAlgorithm}]``
     - :func:`MNRead.getChecksum`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``[checksumAlgorithm]``) ``->`` :class:`Types.Checksum`
   * - Tier 1
     - ``GET /object[?starttime={startTime}&endtime={endTime}&objectformat={objectFormat}&replicastatus={replicaStatus}&start={start}&count={count}]``
     - :func:`MNRead.listObjects`
     - (:class:`session<Types.Session>`, :class:`[startTime]<Types.DateTime>`, :class:`[endTime]<Types.DateTime>`, :class:`[objectFormat]<Types.ObjectFormat>`, ``[replicaStatus]``, ``[start=0]``, ``[count=1000]``) ``->`` :class:`Types.ObjectList`
   * - Tier 1
     - ``POST /error``
     - :func:`MNRead.synchronizationFailed`
     - (:class:`session<Types.Session>`, :class:`message<Types.Exception>`) ``->``
   * - Tier 2
     - ``GET /isAuthorized/{pid}?action={action}``
     - :func:`MNAuthorization.isAuthorized`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`action<Types.Permission>`) ``->`` :class:`Types.Boolean`
   * - Tier 2
     - ``PUT /accessRules/{pid}``
     - :func:`MNAuthorization.setAccessPolicy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`accessPolicy<Types.AccessPolicy>`) ``->`` :class:`Types.Boolean`
   * - Tier 3
     - ``POST /object/{pid}``
     - :func:`MNStorage.create`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 3
     - ``PUT /object/{pid}``
     - :func:`MNStorage.update`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, ``object``, :class:`newPid<Types.Identifier>`, :class:`sysmeta<Types.SystemMetadata>`) ``->`` :class:`Types.Identifier`
   * - Tier 3
     - ``DELETE /object/{pid}``
     - :func:`MNStorage.delete`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`) ``->`` :class:`Types.Identifier`
   * - Tier 4
     - ``POST /replicate``
     - :func:`MNReplication.replicate`
     - (:class:`session<Types.Session>`, :class:`sysmeta<Types.SystemMetadata>`, :class:`sourceNode<Types.NodeReference>`) ``->`` :class:`Types.Boolean`

