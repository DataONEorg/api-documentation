..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`MN_read`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 1
     - ``GET /object/{pid}``
     - :func:`get`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`) ``->``
       :class:`Types.OctetStream`
   * - Tier 1
     - ``GET /meta/{pid}``
     - :func:`getSystemMetadata`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`) ``->``
       :class:`Types.SystemMetadata`
   * - Tier 1
     - ``HEAD /object/{pid}``
     - :func:`describe`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`) ``->``
       :class:`Types.DescribeResponse`
   * - Tier 1
     - ``GET /checksum/{pid}``
     - :func:`getChecksum`
     - (:class:`token<Types.AuthToken>`, :class:`pid<Types.Identifier>`,
       ``[checksumAlgorithm]``) ``->`` :class:`Types.Checksum`
   * - Tier 1
     - ``GET /object``
     - :func:`listObjects`
     - (:class:`token<Types.AuthToken>`, :class:`[startTime]<Types.DateTime>`,
       :class:`[endTime]<Types.DateTime>`,
       :class:`[objectFormat]<Types.ObjectFormat>`, ``[replicaStatus]``,
       ``[start=0]``, ``[count=1000]``) ``->`` :class:`Types.ObjectList`
   * - Tier 1
     - ``POST /error``
     - :func:`synchronizationFailed`
     - (:class:`token<Types.AuthToken>`, :class:`message<Types.Exception>`)
       ``->``




.. function:: get(token,pid) -> OctetStream

   Retrieve an object identified by *pid* from the node.

   The response must contain the bytes of the indicated object, and the checksum
   of the bytes retrieved must match the :attr:`SystemMetadata.checksum`
   recorded in the  :class:`Types.SystemMetadata` if the object is science data.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   Also implmented by Coordinating Nodes as :func:`CN_crud.get`.

   :Use Cases:

     :doc:`UC01 </design/UseCases/01_uc>`, :doc:`UC06 </design/UseCases/06_uc>`,
     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``GET /object/{pid}``

   :param token: The authentication token.

   :type token: :class:`Types.AuthToken`

   :param pid: The identifier for the object to be retrieved.

   :type pid: :class:`Types.Identifier`

   :returns: Bytes of the specified object. For data objects, this will be the
     actual bytes of data. For metadata objects, this will be the representation
     of the object as provided by the Member Node.

   :rtype: :class:`Types.OctetStream`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1000)``

     The provided identity does not have READ permission on the object.


   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1020)``

     The object specified by *pid* does not exist at this node. The description
     should include a reference to the resolve method.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1030)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1010)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1001)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1002)``


.. include:: ../examples/get.txt

.. TODO::
    There may be multiple representations of content (e.g. metadata as XML, RDF,
    or some other format).  May need to add another parameter to specify the
    format, or perhaps rely on HTTP content negotiation for this.

    Should there be a separate identifier for different representations of the
    same content?

.. TODO::
    For Science Metadata, only the CNs and the original Member Node can
    guarantee that the returned object will provide the same hash as recorded in
    the System Metadata for the object.  This needs to be verified.



----

.. function:: getSystemMetadata(token,pid) -> SystemMetadata

   Describes the science metadata or data object (and likely other objects in
   the future) identified by *pid* by returning the associated system metadata
   object.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   :Use Cases:

     :doc:`UC06 </design/UseCases/06_uc>`, :doc:`UC37 </design/UseCases/37_uc>`,
     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``GET /meta/{pid}``

   :param token: The authentication token returned by ``login()``.

   :type token: :class:`Types.AuthToken`

   :param pid: Identifier for the science data or science metedata object of
     interest.

   :type pid: :class:`Types.Identifier`

   :returns: System metadata object describing the object.

   :rtype: :class:`Types.SystemMetadata`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1040)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1041)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1060)``

     There is no data or science metadata identified by the given *pid* on the
     node where the request was serviced. The error message should provide a
     hint to use the :func:`CN_crud.resolve` mechanism.


   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1080)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1090)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1050)``


.. include:: ../examples/getSystemMetadata.txt



----

.. function:: describe(token,pid) -> DescribeResponse

   This method provides a lighter weight mechanism than
   :func:`MN_read.getSystemMetadata` for a client to determine basic properties
   of the referenced object. The response should indicate properties that are
   typically returned in a HTTP HEAD request: the date late modified, the size
   of the object, the type of the object (the
   :attr:`SystemMetadata.objectFormat`).

   The principal indicated by *token* must have read privileges on the object,
   otherwise :exc:`Exceptions.NotAuthorized` is raised.

   If the object does not exist on the node servicing the request, then
   :exc:`Exceptions.NotFound` must be raised even if the object exists on
   another node in the DataONE system.

   Note that this method is likely to be called frequently and so efficiency
   should be taken into consideratin during implementation.

   :Use Cases:

     :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``HEAD /object/{pid}``

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param pid: Identifier for the object in question.

   :type pid: :class:`Types.Identifier`

   :returns: A set of values providing a basic description of the object.

   :rtype: :class:`Types.DescribeResponse`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1360)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1380)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1390)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1370)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1361)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1362)``


.. include:: ../examples/describe.txt



----

.. function:: getChecksum(token,pid,[checksumAlgorithm]) -> Checksum

   Returns a :class:`Types.Checksum` for the specified object using an accepted
   hashing algorithm. The result is used to determine if two instances
   referenced by a PID are identical, hence it is necessary that MNs can ensure
   that the returned checksum is valid for the referenced object either by
   computing it on the fly or by using a cached value that is certain to be
   correct.

   :REST URL: ``GET /checksum/{pid}``

   :param token: The authentication token returned by ``login()``

   :type token: :class:`Types.AuthToken`

   :param pid: The identifier of the object the operation is being performed on.

   :type pid: :class:`Types.Identifier`

   :param checksumAlgorithm: The name of an algorithm that will be used to
     compute a checksum of the bytes of the object. This value is drawn from a
     DataONE controlled list of values as indicted in the
     :class:`Types.SystemMetadata`. If not specified, then the system wide
     default checksum algorithm should be used.

   :type checksumAlgorithm: string

   :returns: The checksum value originally computed for the specified object.

   :rtype: :class:`Types.Checksum`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1400)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=1420)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1402)``

     A supplied parameter was invalid, most likely an unsupported checksum
     algorithm was specified, in which case the error message should include an
     enumeration of supported checksum algorithms.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1410)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1430)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1401)``



----

.. function:: listObjects(token,[startTime],[endTime],[objectFormat],[replicaStatus],[start=0],[count=1000]) -> ObjectList

   Retrieve the list of objects present on the MN that match the calling
   parameters. This method is required to support the process of :term:`Member
   Node synchronization`. At a minimum, this method should be able to return a
   list of objects that match::



     startTime <= SystemMetadata.dateSysMetadataModified



   but is expected to also support date range (by also specifying *endTime*),
   and should also support slicing of the matching set of records by indicating
   the starting *index* of the response (where 0 is the index of the first item)
   and the *count* of elements to be returned.

   :Use Cases:

     :doc:`UC06 </design/UseCases/06_uc>`, :doc:`UC16 </design/UseCases/16_uc>`

   :REST URL: ``GET /object``

   :param token: The authentication token.

   :type token: :class:`Types.AuthToken`

   :param startTime: Specifies the beginning of the time range from which to
     return object (>=). Queries against
     :attr:`SystemMetadata.dateSysMetadataModified`

   :type startTime: :class:`Types.DateTime`

   :param endTime: Specifies the end of the time range to which to return object
     (<=). Queries against :attr:`SystemMetadata.dateSysMetadataModified`

   :type endTime: :class:`Types.DateTime`

   :param objectFormat: Restrict results to the specified object format.

   :type objectFormat: :class:`Types.ObjectFormat`

   :param replicaStatus: Indicates if replicated objects should be returned in
     the list (i.e. any entries present in the :attr:`SystemMetadata.replica`).
     If ``0``, then no objects that have been replicated should be returned. If
     ``1``, then any objects can be returned, regardless of replication status.
     The default value is ``1``.



   :type replicaStatus: replicaStatus

   :param start=0: The zero-based index of the first value, relative to the
     first record of the resultset that matches the parameters.

   :type start=0: integer

   :param count=1000: The maximum number of entries that should be returned in
     the response. The Member Node may return less entries than specified in
     this value.

   :type count=1000: integer

   :returns: The list of PIDs that match the query criteria. If none match, an
     empty list is returned.

   :rtype: :class:`Types.ObjectList`

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=1520)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=1540)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1560)``

     Raised if some functionality requested is not implemented. In the case of
     an optional request parameter not being supported, the errorCode should be
     400. If the requested format (through HTTP Accept headers) is not
     supported, then the standard HTTP 406 error code should be returned.


   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=1580)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=1530)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=1521)``


.. include:: ../examples/listObjects.txt



----

.. function:: synchronizationFailed(token,message) -> 

   This is a callback method used by a CN to indicate to a MN that it cannot
   complete synchronization of the science metadata identified by *pid*. When
   called, the MN should take steps to record the problem description and notify
   an administrator or the data owner of the issue.

   :Use Cases:

     :doc:`UC06 </design/UseCases/06_uc>`

   :REST URL: ``POST /error``

   :param token: An authentication token generated by the CN to verify that a CN
     is making the call.

   :type token: :class:`Types.AuthToken`

   :param message: An instance of the :exc:`Exceptions.SynchronizationFailed`
     exception with body appropriately filled.

   :type message: :class:`Types.Exception`

   :returns: Null body or Exception

   :rtype: 

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=2160)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=2161)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=2162)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=2163)``



----