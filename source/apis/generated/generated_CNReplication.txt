..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNReplication`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 4
     - ``POST /notify``
     - :func:`setReplicationStatus`
     - (:class:`cert<Types.X509Certificate>`, :class:`pid<Types.Identifier>`, :class:`status<Types.ReplicationStatus>`) ``->`` :class:`Types.Boolean`




.. function:: setReplicationStatus(cert,pid,status) -> Boolean

   Update the replication status of the system metadata, ensuring that the change is appropriate for the given state of system metadata.  For example, a MN can not change the status to *COMPLETED* unless the CN previously requested replication of the object and the replications status of the object (as indicated in the system metadata) is set to *QUEUED*.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``POST /notify``
   :param cert: X.509 Certificate, passed to the system via SSL client-side authentication, and used to identify and validate the identity of the Subject making the call. The X.509 certificate should be traceable to the CILogon service, and provides various attributes for authorization decisions.  If the X.509 certificate is not provided, then the request should be considered to have originated from the DataONE 'Public' user.
   :type cert: :class:`Types.X509Certificate`

   :param pid: Identifier of the object to be replicated between Member Nodes
   :type pid: :class:`Types.Identifier`

   :param status: Replication status. See system metadata schema for possible values.
   :type status: :class:`Types.ReplicationStatus`

   :returns: True if the operation is allowed and expected, otherwise an exception should be raised.
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4700)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4701)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4710)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4720)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4730)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4740)``


