..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNReplication`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 4
     - ``POST /notify``
     - :func:`setReplicationStatus`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`status<Types.ReplicationStatus>`) ``->`` :class:`Types.Boolean`
   * - Tier 4
     - ``PUT /meta/replication/{pid}``
     - :func:`updateReplicationMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`replicaMetadata<Types.Replica>`) ``->`` :class:`Types.Boolean`
   * - 
     - ``PUT /meta/policy/{pid}``
     - :func:`setReplicationPolicy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`policy<Types.ReplicationPolicy>`) ``->`` :class:`Types.Boolean`




.. function:: setReplicationStatus(session,pid,status) -> Boolean

   Update the replication status of the system metadata, ensuring that the change is appropriate for the given state of system metadata.  For example, a MN can not change the status to *COMPLETED* unless the CN previously requested replication of the object and the replications status of the object (as indicated in the system metadata) is set to *QUEUED*.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``POST /notify``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object to be replicated between Member Nodes
   :type pid: :class:`Types.Identifier`

   :param status: Replication status. See system metadata schema for possible values.
   :type status: :class:`Types.ReplicationStatus`

   :returns: True if the operation is allowed and expected, otherwise an exception should be raised.
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4700)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4701)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4710)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4720)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4730)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4740)``




.. function:: updateReplicationMetadata(session,pid,replicaMetadata) -> Boolean

   Full replacement of replication metadata in the system metadata for the specified object, changes date sys meta modified

   :REST URL: ``PUT /meta/replication/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param replicaMetadata:
   :type replicaMetadata: :class:`Types.Replica`

   :returns: True on success
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4850)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4851)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4852)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4853)``




.. function:: setReplicationPolicy(session,pid,policy) -> Boolean

   Updates the replication policy entry for an object by updating the system metadata.

   :REST URL: ``PUT /meta/policy/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param policy:
   :type policy: :class:`Types.ReplicationPolicy`

   :returns: True on success
   :rtype: :class:`Types.Boolean`

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4880)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4881)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4882)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4883)``


