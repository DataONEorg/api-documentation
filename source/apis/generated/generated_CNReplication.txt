..
  Warning: this file is automatically generated.  Edits will be lost


.. list-table:: Functions defined in :mod:`CNReplication`
   :widths: 3 10 10 30
   :header-rows: 1

   * - Tier
     - REST
     - Function
     - Parameters
   * - Tier 4
     - ``POST /notify``
     - :func:`setReplicationStatus`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`nodeRef<Types.NodeReference>`, :class:`status<Types.ReplicationStatus>`) ``->`` boolean
   * - Tier 4
     - ``PUT /meta/replication/{pid}``
     - :func:`updateReplicationMetadata`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`replicaMetadata<Types.Replica>`) ``->`` boolean
   * - Tier 4
     - ``PUT /meta/policy/{pid}``
     - :func:`setReplicationPolicy`
     - (:class:`session<Types.Session>`, :class:`pid<Types.Identifier>`, :class:`policy<Types.ReplicationPolicy>`) ``->`` boolean
   * - Tier 4
     - ``GET /replicationAuthorized/{pid}``
     - :func:`isNodeAuthorized`
     - (:class:`session<Types.Session>`, :class:`targetNodeSubject<Types.Subject>`, :class:`pid<Types.Identifier>`, :class:`executePermission<Types.Permission>`) ``->`` boolean




.. function:: setReplicationStatus(session,pid,nodeRef,status) -> boolean

   Update the replication status of the system metadata, ensuring that the change is appropriate for the given state of system metadata.  For example, a MN can not change the status to *COMPLETED* unless the CN previously requested replication of the object and the replications status of the object (as indicated in the system metadata) is set to *QUEUED*.

   Successful completion of this operation is indicated by a HTTP response status code of 200.

   Unsuccessful completion of this operation MUST be indicated by returning an appropriate exception.

   :Use Cases:
     :doc:`UC09 </design/UseCases/09_uc>`
   :REST URL: ``POST /notify``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the public user if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid: Identifier of the object to be replicated between Member Nodes
   :type pid: :class:`Types.Identifier`

   :param nodeRef: Reference to the Node which made the setReplicationStatus call. If this is a Member Node, the checksum must be compared with that of the authoritative Member Node. If not, this step can be ignored as the call is not signifying a replication is complete.
   :type nodeRef: :class:`Types.NodeReference`

   :param status: Replication status. See system metadata schema for possible values.
   :type status: :class:`Types.ReplicationStatus`

   :returns: True if the operation is allowed and expected, otherwise an exception should be raised.
   :rtype: boolean

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4700)``

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4701)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4710)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4720)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4730)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4740)``




.. function:: updateReplicationMetadata(session,pid,replicaMetadata) -> boolean

   Full replacement of replication metadata in the system metadata for the specified object, changes date sys meta modified

   Successful completion of the operation is indicated by returning a HTTP status of 200.

   Failure of the operation MUST be indicated by returning an appropriate exception.

   :REST URL: ``PUT /meta/replication/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param replicaMetadata:
   :type replicaMetadata: :class:`Types.Replica`

   :returns: True on success
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4850)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4851)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4852)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4853)``




.. function:: setReplicationPolicy(session,pid,policy) -> boolean

   Updates the replication policy entry for an object by updating the system metadata.

   Successful completion of the operation is indicated by returning a HTTP status of 200.

   Failure of the operation MUST be indicated by returning an appropriate exception.

   :REST URL: ``PUT /meta/policy/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param pid:
   :type pid: :class:`Types.Identifier`

   :param policy:
   :type policy: :class:`Types.ReplicationPolicy`

   :returns: True on success
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4880)``

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4881)``

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4882)``

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4883)``

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4884)``

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4885)``




.. function:: isNodeAuthorized(session,targetNodeSubject,pid,executePermission) -> boolean

   Verifies that a replication event was initiated by a CN by comparing the target node's identifiying subject with a known list of scheduled replication tasks.

   Successful completion of the operation is indicated by returning a HTTP status of 200.

   Failure of the operation MUST be indicated by returning an appropriate exception.

   :REST URL: ``GET /replicationAuthorized/{pid}``
   :param session: Session information that contains the identity of the calling user as retrieved from the X.509 certificate which must be traceable to the CILogon service. The subject of the session defaults to the :term:`public user` if the certificate was not provided with the request.
   :type session: :class:`Types.Session`

   :param targetNodeSubject: The subject that identifies the target node, with a value extracted from the X.509 certificate passed in during the call to CNReplication.replicate().
   :type targetNodeSubject: :class:`Types.Subject`

   :param pid: The identifier of the object to be replicated.
   :type pid: :class:`Types.Identifier`

   :param executePermission: The value of the permission to be checked, in this case Permission.EXECUTE
   :type executePermission: :class:`Types.Permission`

   :returns: True on success
   :rtype: boolean

   :raises Exceptions.NotImplemented: ``(errorCode=501, detailCode=4870)``

     The method functionality is not implemented.

   :raises Exceptions.NotAuthorized: ``(errorCode=401, detailCode=4871)``

     Replication of PID is not authorized for the subject listed.

   :raises Exceptions.ServiceFailure: ``(errorCode=500, detailCode=4872)``

     An internal server error occurred.

   :raises Exceptions.InvalidRequest: ``(errorCode=400, detailCode=4873)``

     The replication request is invalid.

   :raises Exceptions.NotFound: ``(errorCode=404, detailCode=4874)``

     The PID does not exist as an existing object.

   :raises Exceptions.InvalidToken: ``(errorCode=401, detailCode=4875)``

     The session information is invalid.


