Coordinating Node APIs for V0.3
-------------------------------

These APIs are implemented by Coordinating Nodes for version 0.3. This is a
reduced set of functionality compared to the full set of APIs envisioned for
Coordinating Nodes.


Authentication API
~~~~~~~~~~~~~~~~~~

Methods for authentication and authorization.

.. todo:: 
   The authentication and authorization requirements for V0.3 are minimal due
   to using network configuration for authentication. What, if any,
   authentication or authorization mechanisms are required for admin access.

.. module:: CN_authorization_0_3
   :synopsis: Methods for authentication and authorization


Query API
~~~~~~~~~

The Query API handles searches of science metadata and system metadata; also
exposes log records held by CNs. This log-related functionality probably needs
to be split out into the Logging and Alert API (not yet defined).

.. module:: CN_query_0_3
   :synopsis: 
     Handles queries against science metadata, system metdata, and log
     records held by CNs

::

  getLogRecords(token, fromDate, toDate) -> logRecords
  search(token, query) -> list of GUIDs


.. function:: getLogRecords (token, fromDate, toDate) -> logRecords

   Retrieves consolidated log information for the specified date range
   (inclusive) for the entire DataONE infrastructure.

   :param token: authentication token

   :param fromDate: 
     specified by appropriate standard (ISO? W3C?)

   :param toDate: 
     specified by appropriate standard (ISO? W3C?)

   :returns:
     the set of log records specified; format is not yet specified; the set of
     records may be empty

   .. todo:: Format of the consolidated log records need to be specified.


.. function:: search (token, query) -> list of metadata GUIDs

   Search the metadata catalog and return GUIDs of metadata records that meet
   the criteria.

   :param token: authentication token; ignored for V0.3

   :param query: The criteria for matching the characteristics of the metadata
     objects of interest. The structure of this query is described in
     :doc:querying_content.

   .. todo: Details of query specification for `search(token, query)` needs to
     be worked out.


CRUD API
~~~~~~~~

V0.3 Read operations for Coordinating Nodes.

.. module:: CN_crud_0_3
   :synopsis: Read operations for Coordinating Nodes
   
::

  getSystemMetadata(token, GUID) -> systemMetadata
  get(token, GUID) -> metadata
  resolve(token, GUID) -> systemMetadata???
  create(systemMetadataGUID, systemMetadata, scienceMetadataGUID, scienceMetadata)
  
.. exception:: NotFound

.. exception:: InvalidMetadataType

.. exception:: InvalidArgument

.. exception:: ObjectNotHere

.. function:: getSystemMetadata(token, GUID) -> system metadata

   Describes the science metadata or data object identified by the GUID 
   by returing the system metadata object associated with the GUID.

  :param token: authentication token; ignored for V0.3

  :param GUID: Identifier for the science data or science metedata object of interest.

  :returns: System metadata object describing the object.

  :raises NotFound: There is no data or science metadata identified by the given GUID. 
  
  :raises InvalidArgument: The GUID requested identifies a system metadata object. 


.. function:: get (token, GUID) -> metadata

   Retrieves the science metedata or system metadata object identified by the given GUID. 
   If the object identified by the GUID is a data object, then an error is raised.

  :param token: authentication token; ignored for V0.3

  :param GUID: The identifier for the science metadata or system metadata object to be retrieved.

  :returns:
    For system metadata objects, the system metadata itself is returned. For
    science metadata objects, this will be the exact byte stream of the science
    metadata oject, as is was original ingested.

  :raises NotFound: The object specified by GUID does not exist.

  :raises ObjectNotHere: The object specified by the GUID is a data object and
    is not present on this (or any) CN. This response could be accompanied by
    the results of a standard resolve() method call to provide more information
    about the object.

   .. todo::
      This method name could be changed since it has different semantics than
      the method of the same name on MNs.
      
      
.. function:: resolve(token, identifier) -> list of nodes

   Given an identifier, returns information that a client can use to retrieve
   the identified target object form the DataONE system. The target may reside
   on a MN or a CN. The actual content returned will be specific to the type
   of interface implemented, and is described in detail in the documentation
   for the implementation (e.g. REST implementation might differ from SOAP
   implementation).
   
    :param token: authentication token; ignored for V0.3
   
    :param identifier: Identifier for the object in question
   
    :returns: A list of nodes known to contain copies of the target object

   .. todo::
     It seems that returning just a simple list of URLs for the service
     endpoints of the relevant MNs is not sufficient. Some sort of MN
     identifier also needs to be returned so that the caller can ask further
     information about MN (which would include the endpoint URL for the MN API
     implementation). Is there a use case that involves asking a CN for
     metadata describing a MN?

   :raises NotFound: There is no data object identified by the given GUID.

   :raises InvalidArgument: The GUID requested identifies a science metadata
     object or a system metadata object.


.. function:: create(systemMetadataGUID, systemMetadata,
                     scienceMetadataGUID, scienceMetadata)

   This is a method used internally by the CN, not exposed to MNs or the
   world. Stores the two given objects (systemMetadata and scienceMetadata) in a
   single atomic action. This method is used as part of the synchronization of
   science metadata between a MN and the CN.

  :param systemMetadataGUID: the GUID of the system metadata

  :param systemMetadata:
   The system metadata describing the data package (data and science metadata)

  :param scienceMetaDataGUID: the GUID of the science metadata

  :param scienceMetadata: the science metadata portion of the data package

  :raises InvalidMetadataType: 
    the science metadata is not of a type supported by the D1 system



Replication API
~~~~~~~~~~~~~~~

The Replication API handles replication of data and science metadata content
among Member Nodes. Such replication is not part of V0.3 functionality, so
there are no Replication API methods required.



Synchronization API
~~~~~~~~~~~~~~~~~~~

The Synchronization API manages synchronization of system metadata and science
metadata among CNs. Since this will be handled out-of-band with respect to the
CN APIs for V0.3, there are no Synchronization API methods required for V0.3.



Register API
~~~~~~~~~~~~

Register API methods manage registration of Member Nodes and is not
implemented for for V0.3. Instead, registry information about MNs is managed
manually.



Server Authentication API
~~~~~~~~~~~~~~~~~~~~~~~~~

Server authentication is handled by network configuration for V0.3. No API calls
are required.



State of Health API
~~~~~~~~~~~~~~~~~~~

The Health API contains methods for determining the status of the DataONE
infrastructure, including both the CNs and MNs.

.. module:: CN_health_0_3
   :synopsis: Methods for reporting on the state of health of a CN and on the
   entire DataONE infrastructure

:: 

  generateReport(token) -> statusReport

.. function:: generateReport(token) -> statusReport

   .. note:: 
      This method is used by Use Case 10 "MN Status Reports" for V0.3. However
      instead of a complete set of detailed status reports, the V0.3
      implementation of the use case will utilize thee the
      ``MN_health_0_3.heartbeat()`` method to compile very basic information
      about the MNs. Later versions of this method will use the richer
      ``MN_health.getStatus(token)`` method.

   Returns a status report for all of the registered Member Nodes. The
   information returned is used to give administrators information necessary to
   maintain the infrastructure.

   :param token: Identity with authority to generate reports.
   
   :rtype: Status report, ideally in XML + stylsheet or at least XHTML.

.. raw:: latex

   \newpage
