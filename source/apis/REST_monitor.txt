Monitor Collection
~~~~~~~~~~~~~~~~~~

The ``/monitor`` collection represents various performance and utilization
metrics of Member Nodes. It is exposed by Member Nodes.

.. _MN_health.ping:

``GET /monitor/ping``
.....................

Low level "are you alive" operation. Response is simple ACK, but may be
reasonable to overload with a couple of flags that could indicate availability
of new data or change in capabilities.

The Member Node should perform some minimal internal functionality testing
before answering. However, ping checks will be frequent (every few minutes) so
the internal functionality test should not be high impact.

Implemented by the methods:

- :func:`MN_health.ping`

**Parameters**

This call takes no parameters.

**Response**

The response should be a valid HTTP response with a blank or arbitrary body.
Only the HTTP header information is considered by the requestor. A successful
response must have a HTTP status code of 200. In case of an error condition,
the appropriate HTTP status code must be set, and an exception or error
information *may* be returned in the response.

**Example**

Example of ping request and response for a Member Node. Lines prefixed with
">" indicate outgoing information, lines prefixed with "<" show content
returned from the server. Note that the actual response headers may vary, the
only *required* header is the first status line. However, in order to fully
support clients that may cache the response, the *Date*, *Expires*, and
*Cache-Control* headers should also be included.

::

  curl -v http://my.membernode.org/mn/monitor/ping
  
  > GET / HTTP/1.1
  > User-Agent: curl/7.19.7 (universal-apple-darwin10.0) libcurl/7.19.7 OpenSSL/0.9.8l zlib/1.2.3
  > Host: my.membernode.org
  > Accept: */*
  > 
  < HTTP/1.1 200 OK
  < Date: Thu, 09 Dec 2010 20:57:21 GMT
  < Expires: -1
  < Cache-Control: private, max-age=0
  < Content-Type: text/html; charset=utf-8
  < 
  

.. _MN_health.getStatus:

``GET /monitor/status``
.......................

This function is similar to :func:`MN_health.ping` but returns a more complete
status which may include information such as planned service outages.

This method provide a mechanism for notification to Coordinating Nodes at a
higher frequency than through setting properties in the node registry
information.

Implemented by the following methods:

- :func:`MN_health.getStatus`

**Parameters**

This call takes no parameters.

**Response**

The response to a *getStatus* request is currently undefined, but will be a
structure containing information that can be used by the Coordinating Nodes
for notification of pending outages, software changes, or other significant
events as described in :doc:`/design/UseCases/10_uc`.

**Example**

TBD.

.. _MN_health.getObjectStatistics:

``GET /monitor/object``
.......................

Called by the monitoring system to find how many objects are stored on the MN,
cumulative or for each day in a given range.

Implemented by the methods:

- :func:`MN_health.getObjectStatistics`


**Parameters**

:day: 

  (optional) Flag that causes the number of objects that were created to be
  reported for each day in which one or more objects were created. Without
  this flag the total number of objects is reported.

:pid: (optional) (wildcards supported) Filter on identifier.

:url: 

  (optional) (wildcards supported) Filter on URL. The URL points to the object
  bytes when GMN is used as a DataONE adapter for an existing repository.

:format: (optional) (wildcards supported) Filter on objectFormat.

:time: 

  (optional) (range operators supported) Filter on created date-time ranges.
  Date-times must be ISO8601 compatible.


**Response**

:class:`Types.MonitorList`.

The response format defaults to text/xml and is the only format currently
supported. Other formats such as JSON may be supported in the future.

**Examples**

Retrieve a count of all objects on MN::

  curl -X GET -H "Accept: text/xml" http://mn1.dataone.org/monitor/object

  <?xml version="1.0" ?>
  <ns1:monitorList xmlns:ns1="http://dataone.org/service/types/monitorList/0.1">
    <monitorInfo>
      <date>2010-07-23</date>
      <count>100</count>
    </monitorInfo>
  </ns1:monitorList>


Retrieve a count of objects based on EML that were created for each
day in 1980 (arguments are on separate lines for readability)::

  curl -X GET -H "Accept: text/xml" http://mn1.dataone.org
    /monitor/object
    ?day
    &time_ge=1980-01-01
    &time_lt=1981-01-01
    &format=eml:*
  
  <?xml version="1.0" ?>
  <ns1:monitorList xmlns:ns1="http://dataone.org/service/types/monitorList/0.1">
    <monitorInfo>
      <date>1980-01-19</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-02-08</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-03-22</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-04-20</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-05-06</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-08-29</date>
      <count>1</count>
    </monitorInfo>
  </ns1:monitorList>


.. _MN_health.getOperationStatistics:

``GET /monitor/event``
......................

Returns the number of object related events that have occurred.

Implemented by the methods:

- :func:`MN_health.getOperationStatistics`

Returns :class:`Types.MonitorList`


**Parameters**

:day: (optional) Flag that causes the number of object related events to be reported for each day in which one or more events occurred. Without this flag, the number of events is cumulative.

:pid: (optional) (wildcards supported) Filter on identifier.

:format: (optional) (wildcards supported) Filter on objectFormat.

:created: (optional) (range operators supported) Filter on create date-time ranges.
  Date-times must be ISO8601 compatible.

:eventtime: (optional) (range operators supported) Filter on event date-time.
  Date-times must be ISO8601 compatible.

:ip_address: (optional) (wildcards supported) Filter on IP address.

:event: (optional) (wildcards supported) Filter on operation type.


**Response**

:class:`Types.MonitorList`.

The response format defaults to text/xml and is the only format currently
supported. Other formats such as JSON may be supported in the future.


**Examples**

Retrieve a cumulative count of all object related events on MN::

  curl -X GET -H "Accept: text/xml" http://mn1.dataone.org/monitor

  <?xml version="1.0" ?>
  <ns1:monitorList xmlns:ns1="http://dataone.org/service/types/monitorList/0.1">
    <monitorInfo>
      <date>2010-07-23</date>
      <count>100</count>
    </monitorInfo>
  </ns1:monitorList>


Retrieve a count of object related events for all objects based on EML for
each day in 1980 (arguments are on separate lines for readability)::

  curl -X GET -H "Accept: text/xml" http://mn1.dataone.org
    /monitor
    ?day
    &time_ge=1980-01-01
    &time_lt=1981-01-01
    &format=eml:*
  
  <?xml version="1.0" ?>
  <ns1:monitorList xmlns:ns1="http://dataone.org/service/types/monitorList/0.1">
    <monitorInfo>
      <date>1980-01-19</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-02-08</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-03-22</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-04-20</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-05-06</date>
      <count>1</count>
    </monitorInfo>
    <monitorInfo>
      <date>1980-08-29</date>
      <count>1</count>
    </monitorInfo>
  </ns1:monitorList>
