Data Types in CICore
--------------------

.. module:: Types
   :synopsis: Catalog of data types (structures) used by the DataONE cicore.

**Quick Reference**

- :class:`Types.AccessPolicy`
- :class:`Types.AccessRule`
- :class:`Types.OctetStream`
- :class:`Types.Integer`
- :class:`Types.Boolean`
- :class:`Types.ChecksumAlgorithm`
- :class:`Types.Checksum`
- :class:`Types.DateTime`
- :class:`Types.DescribeResponse`
- :class:`Types.Event`
- :class:`Types.Group`
- :class:`Types.IdentifierFormat`
- :class:`Types.Identifier`
- :class:`Types.LogEntry`
- :class:`Types.Log`
- :class:`Types.MonitorList`
- :class:`Types.MonitorInfo`
- :class:`Types.Node`
- :class:`Types.NodeHealth`
- :class:`Types.NodeList`
- :class:`Types.NodeReference`
- :class:`Types.ObjectFormatIdentifier`
- :class:`Types.ObjectFormat`
- :class:`Types.ObjectFormatList`
- :class:`Types.ObjectList`
- :class:`Types.ObjectLocationList`
- :class:`Types.ObjectLocation`
- :class:`Types.ObjectStatistics`
- :class:`Types.OperationStatistics`
- :class:`Types.Permission`
- :class:`Types.Person`
- :class:`Types.PingResponse`
- :class:`Types.Subject`
- :class:`Types.SubjectList`
- :class:`Types.Query`
- :class:`Types.Status`
- :class:`Types.SystemMetadata`
- :class:`Types.X509Certificate`


**Overview Diagram**

.. image:: images/classes_combined.png

..
  @startuml images/classes_combined.png
  class AccessPolicy {
    + allow : AccessRule[0..*]
  }
  AccessPolicy o-- AccessRule
  
  class AccessRule {
    + subject : Subject[1..*]
    + permission : Permission[1..*]
    + resource : Identifier[1..*]
  }
  AccessRule o-- Subject
  AccessRule o-- Permission
  AccessRule o-- Identifier

  enum ChecksumAlgorithm
  ChecksumAlgorithm : SHA-1
  ChecksumAlgorithm : SHA-224
  ChecksumAlgorithm : SHA-356
  ChecksumAlgorithm : SHA-384
  ChecksumAlgorithm : SHA-512
  ChecksumAlgorithm : MD5

  class Checksum {
      +algorithm : ChecksumAlgorithm
      +value : string
  }
  Checksum -- ChecksumAlgorithm

  class DescribeResponse {
    +DataONE-ObjectFormat : ObjectFormat
    +Content-Length : integer
    +Last-Modified : DateTime
    +DataONE-Checksum : Checksum
  }
  DescribeResponse -- ObjectFormat
  DescribeResponse -- Checksum
  DescribeResponse -- DateTime

  enum Event
  Event : CREATE
  Event : READ
  Event : UPDATE
  Event : DELETE
  Event : REPLICATE
  Event : CHANGEOWNER

  class Group {
    + subject : Subject
    + groupName : NonEmptyString
    + hasMember : Subject[0..*]
  }
  Group o-- Subject
  Group -- NonEmptystring

  NonEmptyString <|-- Identifier

  enum IdentifierFormat
  IdentifierFormat : OID
  IdentifierFormat : LSID
  IdentifierFormat : UUID
  IdentifierFormat : LSRN
  IdentifierFormat : DOI
  IdentifierFormat : URI
  IdentifierFormat : STRING

  class LogEntry {
    + entryID : Identifier
    + identifier : Identifier
    + ipAddress : string
    + userAgent : string
    + subject : Subject
    + event : Event
    + dateLogged : DateTime
    + memberNode : NodeReference
  }
  LogEntry -- Identifier
  LogEntry -- Subject
  LogEntry -- Event
  LogEntry -- DateTime
  LogEntry -- NodeReference

  class Log {
    + start : integer
    + count : integer
    + total : integer
    + logEntry : LogEntry[0..]
  }
  Log o-- LogEntry

  NonEmptyString <|-- NodeReference

  class Node {
    name : NonEmptyString
    description : NonEmptyString
    baseURL : anyURI
    services : Services[0..1]
    synchronization : Synchronization[0..1]
    health : Nodehealth[0..1]
    replicate : boolean
    synchronize : boolean
    type : NodeType
    environment : Environment[0..1]
  }
  Node -- NonEmptyString
  Node o-- Services
  Node o-- Synchronization
  Node o-- NodeHealth
  Node -- NodeType
  Node o-- Environment

  class NodeHealth {
    ping : Ping
    status : Status
  }
  NodeHealth -- Ping
  NodeHealth -- Status

  class NodeList {
    node : Node[1..*]
  }
  NodeList o-- Node
  
  NonEmptyString <|-- ObjectFormatIdentifier

  class ObjectFormat {
    fmtid : ObjectFormatIdentifier
    formatName : string
  }
  ObjectFormat -- ObjectFormatIdentifier

  class ObjectFormatList {
    start : integer
    count : integer
    total : integer
    objectFormat : ObjectFormat[1..*]
  }
  ObjectFormatList o-- ObjectFormat

  class ObjectInfo {
    + identifier : Identifier
  }
  ObjectInfo -- Identifier
  DescribeResponse <|-- ObjectInfo
  
  class ObjectList {
    objectInfo : ObjectInfo[0..*]
  }
  ObjectList o-- ObjectInfo

  class ObjectLocation {
    + nodeIdentifier : Identifier
    + baseURL : anyURI
    + url : anyURI
    + preference : integer[0..1]
  }
  ObjectLocation -- Identifier

  class ObjectLocationList {
    + identifier : Identifier
    + locations : ObjectLocation[0..*]
  }
  ObjectLocationList o-- ObjectLocation
  ObjectLocationList -- Identifier

  enum Permission
  Permission : READ
  Permission : WRITE
  Permission : CHANGEPERMISSION
  Permission : EXECUTE

  class Person {
    + subject : Subject
    + givenName : NonEmptyString
    + familyName : NonEmptyString
    + email : NonEmptyString
    + isMemberOf : Subject
    + equivalentIdentity : Subject[0..*]
  }
  Person o-- Subject
  Person -- NonEmptyString

  NonEmptyString <|-- Subject

  class SubjectList {
    + person : Person[0..*]
    + group : Group[0..*]
  }
  SubjectList o-- Person
  SubjectList o-- Group

  class SystemMetadata {
    + identifier : Identifier
    + objectFormat : ObjectFormat
    + size : integer
    + submitter : Subject
    + rightsHolder : Subject
    + accessPolicy : AccessPolicy[0..*]
    + replicationPolicy : ReplicationPolicy[0..*]
    + obsoletes : Identifier[0..*]
    + obsoletedBy : Identifier[0..*]
    + derivedFrom : Identifier[0..*]
    + describes : Identifier[0..*]
    + describedBy : Identifier[0..*]
    + checksum : Checksum
    + embargoExpires : dateTime
    + dateUploaded : dateTime
    + dateSysMetadataModified : dateTime
    + originMemberNode : NodeReference
    + authoritativeMemberNode : NodeReference
    + replica : Replica[0...*]
  }
  SystemMetadata o-- Identifier
  SystemMetadata -- ObjectFormat
  SystemMetadata -- Subject
  SystemMetadata o-- AccessPolicy
  SystemMetadata o-- ReplicationPolicy
  SystemMetadata -- Checksum
  SystemMetadata -- NodeReference

  @enduml



.. Note:: Here we use the Sphinx ``class`` directives to identify data
  structures. This is not meant to imply that these structures are implemented
  as classes - it is merely a convenience mechanism for documentation.



..                                    ######
.. class:: AccessPolicy

  A set of rules that specifies as a whole the allowable permissions that a
  given user or system has for accessing a resource, including both data and
  metadata resources and service resources. An access policy consists of a
  sequence of allow rules that grant permissions to principals, which can be
  individual users, groups of users, symbolic users, or systems and services.

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- AccessPolicy -->
     :end-before: <!-- AccessRule -->

  .. image:: images/class_accesspolicy.png

  .. 
    @startuml images/class_accesspolicy.png
    class AccessPolicy {
      + allow : AccessRule[0..*]
    }
    AccessPolicy o-- AccessRule    
    @enduml



..                                    ######
.. class:: AccessRule

  A rule that is used to allow a :term:`subject` to perform an action (such as
  read or write) on an object in DataONE. Rules are three-tuples (subject,
  permission, resource) specifying which permissions are allowed for the
  subjects(s) for the resource(s) listed. Access control rules are specified by
  the OriginMemberNode when the object is first registered in DataONE. If no
  rules are specified at that time, then the object is deemed to be private and
  the only user with access to the object (read, write, or otherwise) is the
  RightsHolder.
  
  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- AccessRule -->
     :end-before: <!-- AuthToken  -->

  .. image:: images/class_accessrule.png

  ..
    @startuml images/class_accessrule.png
    class AccessRule {
      + subject : Subject[1..*]
      + permission : Permission[1..*]
      + resource : Identifier[1..*]
    }
    AccessRule o-- Subject
    AccessRule o-- Permission
    AccessRule o-- Identifier
    @enduml



..                                    ######
.. class:: AuthenticationSystem

  Place holder for support of multiple authentication services for a single
  user.



..                                    ######
.. class:: AuthToken

  An AuthToken is an Identifier that is used to reference an authenticated
  AuthSession that has been established via the act of authenticating a
  subject with a Coordinating Node. The AuthToken identifier follows the
  same formatting and content rules as the Identifier class, and should be
  representable in simple 7-bit ASCII or as a UTF-8 string. The value SHOULD
  additionally be constrained to be less than 8K in order to be transportable
  in typical HTTP header fields. The AuthToken represents an AuthSession,
  which is tied to an authenticated Principal and can only be used for
  requests from a particular Address.



..                                    ######
.. class:: OctetStream

   A series of 8-bit bytes which combined together form a digital object.
   *OctetStream* is used to transfer object bytes such as the response to
   :func:`MN_read.get`.



..                                    ######
.. class:: Integer

   A simple integer. The range of expected values should be described with the
   accompanying API call.

   The Integer type is serialized over XML using the predefined XMLSchema
   *integer_* type, the value space of which is the infinite series
   {...,-2,-1,0,1,2,...}.
   
.. _integer: http://www.w3.org/TR/xmlschema-2/#integer



..                                    ######
.. class:: Boolean

   .. Method cross ref OK

   A boolean response is commonly used in the DataONE service APIs to indicate
   success or otherwise of an operation. For operations that are called 
   through the service interfaces, a positive boolean response (i.e. True) is
   indicated by returning a HTTP response with a status code of "200". The 
   body of the message may contain additional content, but this should be 
   ignored by the receiver.

   A False or failure response must return an appropriate Error message and 
   must set the appropriate HTTP status code on the response to indicate a 
   failure.

   The Boolean type is serialized over XML using the predefined XMLSchema
   `boolean`_ type, an instance of which can have the following legal literals
   {true, false, 1, 0}.

.. _boolean: http://www.w3.org/TR/xmlschema-2/#boolean



..                                    ######
.. class:: Capabilities

  This class has been deprecated by :class:`Node`



..                                    ######
.. class:: ChecksumAlgorithm

  An enumeration of checksum types supported by the DataONE infrastructure.

  The default checksum is *SHA-1*.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Checksum Algorithm -->
     :end-before: <!-- ComponentName -->

  .. image:: images/class_checksumalgorithm.png

  ..
    @startuml images/class_checksumalgorithm.png
    enum ChecksumAlgorithm
      ChecksumAlgorithm : SHA-1
      ChecksumAlgorithm : SHA-224
      ChecksumAlgorithm : SHA-356
      ChecksumAlgorithm : SHA-384
      ChecksumAlgorithm : SHA-512
      ChecksumAlgorithm : MD5
    @enduml



..                                    ######
.. class:: Checksum

  Represents the value of a computed checksum.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
       :language: xml
       :start-after: <!-- Checksum -->
       :end-before: <!-- Component -->

  .. image:: images/class_checksum.png

  ..
    @startuml images/class_checksum.png
    class Checksum {
      +algorithm : ChecksumAlgorithm
      +value : string
    }
    Checksum -- ChecksumAlgorithm
    @enduml



.. class:: DateTime

  A string that completely identifies a specific time.

  - Must include date and time
  - If not specified, then the time zone is 0, i.e. GMT

  Valid representations include:
  
  - `HTTP Full Date`_ format. e.g. `Sun, 06 Nov 1994 08:49:37 GMT`
  - `YYYY-MM-DDTHH:MM:SS.mmmmmm`
  - `YYYYMMDDTHHMMSS.mmmmmm`
  - `YYYY-MM-DDTHH:MM:SS.mmmmmm+HH:MM`
  - `YYYYMMDDTHHMMSS.mmmmmm+HHMM`

  The milliseconds may be left off if that precision is not available.

  See also the `XMLSchema dateTime`_ type which is used for serializing DateTime
  values in XML transmitted between DataONE components.

.. _HTTP Full Date: http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1

.. _XMLSchema dateTime: http://www.w3.org/TR/xmlschema-2/#dateTime



..                                    ######
.. class:: DescribeResponse  

  .. method cross ref OK

  The :func:`MN_read.describe` method provides a low cost hint about the type,
  size and state of an object.

  The *DescribeResponse* is returned from the server in a HTTP HEAD response,
  and hence the values must be represented in the HTTP response headers. There
  is no XML serialization of a *DescribeResponse*.

  .. image:: images/class_describeresponse.png

  ..
    @startuml images/class_describeresponse.png
    class DescribeResponse {
      +DataONE-ObjectFormat : ObjectFormat
      +Content-Length : integer
      +Last-Modified : DateTime
      +DataONE-Checksum : Checksum
    }
    DescribeResponse -- ObjectFormat
    DescribeResponse -- Checksum
    DescribeResponse -- DateTime
    @enduml

  .. attribute:: DataONE-ObjectFormat

     The value of the :attr:`SystemMetadata.objectFormat` entry available in
     the :class:`SystemMetadata`.

  .. attribute:: Content-Length

     Size of the object in bytes, the value of :attr:`SystemMetadata.size`
     from :class:`SystemMetadata`.

  .. attribute:: Last-Modified

     A :class:`DateTime` value that indicates when the :term:`system metadata`
     associated with the object was last modified, i.e. the value of
     :attr:`SystemMetadata.dateSysMetadataModified` for the object.

  .. attribute:: DataONE-Checksum

     The ChecksumAlgorithm and Checksum value of the object being examined. The
     algorithm and checksum values are separated by a single comma with the
     algorithm first.


  Example of a HEAD response on object "ABC123"::

    curl -I http://mn1.dataone.org/mn/object/ABC123

    HTTP/1.1 200 OK
    Last-Modified: Wed, 16 Dec 2009 13:58:34 GMT
    Content-Length: 10400
    Content-Type: application/octet-stream
    DataONE-ObjectFormat: eml://ecoinformatics.org/eml-2.0.1
    DataONE-Checksum: SHA-1,2e01e17467891f7c933dbaa00e1459d23db3fe4f


.. include:: types_errors.txt


..                                    ######
.. class:: Event

  .. method cross ref OK

  The controlled list of events that are logged, which will include 'CREATE',
  'UPDATE', 'DELETE', 'READ', 'REPLICATE' events

  .. image:: images/class_event.png

  ..
    @startuml images/class_event.png
    enum Event
    Event : CREATE
    Event : READ
    Event : UPDATE
    Event : DELETE
    Event : REPLICATE
    Event : CHANGEOWNER
    @enduml

  As represented in XML Schema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Event Enumeration -->
     :end-before: <!-- Environment Enumeration -->


..                                    ######
.. class:: Group

  Group represents metadata about a Subject that is a group of other Subjectss
  and that can be used by clients and nodes for displaying AccessPolicy
  information.

  .. attribute:: Subject

     The unique identifier of the group.

  .. attribute:: GroupName

     The name of the Group.

  .. attribute:: hasMember

     A Subject that is a member of this group, expressed using the
     unique identifier for that Subject.

  As represented in XML Schema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Group -->
     :end-before: <!-- Identifier  -->

  .. image:: images/class_group.png

  .. 
     @startuml images/class_group.png
     class Group {
       + subject : Subject
       + groupName : NonEmptyString
       + hasMember : Subject[0..*]
     }
     Group o-- Subject
     Group -- NonEmptystring
     @enduml



..                                    ######
.. class:: PingResponse

  The response from :func:`MN_health.ping`. This is currently (2010-10-21) a
  HTTP response with status code 200 and no payload.



..                                    ######
.. class:: StatusResponse

  The response from :func:`MN_health.getStatus`. This is currently
  (2010-10-21) undefined. This opertation *may* replace ping() on closer
  evaluation of the design notes.



..                                    ######
.. class:: IdentifierFormat

  Initially an enumerated list of strings that specify different types of identifiers.

  As represented in XML Schema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Identifier Format enumeration -->
     :end-before: <!-- Service Name -->

  .. images:: image/class_identifierformat.png

  ..
    @startuml images/class_identifierformat.png
    enum IdentifierFormat
    IdentifierFormat : OID
    IdentifierFormat : LSID
    IdentifierFormat : UUID
    IdentifierFormat : LSRN
    IdentifierFormat : DOI
    IdentifierFormat : URI
    IdentifierFormat : STRING
    @enduml


..                                    ######
.. class:: Identifier

  An :term:`identifier` (:term:`PID`) in the DataONE system. This is
  equivalent to a Unicode string of printable characters, excluding
  whitespace. All representations of identifiers must be encoded in 7-bit
  ASCII or UTF-8.

  Identifiers have a maximum length of 800 characters. Some discussion on this
  is described in `ticket 577`_.

  As represented in XML Schema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Identifier  -->
     :end-before: <!--  Log -->

  .. image:: images/class_identifier.png

  ..
     @startuml images/class_identifier.png
     NonEmptyString <|-- Identifier
     @enduml


.. _ticket 577: https://redmine.dataone.org/issues/577



..                                    ######
.. class:: LogEntry

  A single log entry as reported by a Member Node or Coordinating Node through
  the getLogRecords methods.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
       :language: xml
       :start-after: <!-- Log Entry -->
       :end-before: <!-- Monitor Info -->

  .. image:: images/class_logentry.png

  .. 
    @startuml images/class_logentry.png
    class LogEntry {
      + entryID : Identifier
      + identifier : Identifier
      + ipAddress : string
      + userAgent : string
      + subject : Subject
      + event : Event
      + dateLogged : DateTime
      + memberNode : NodeReference
    }
    LogEntry -- Identifier
    LogEntry -- Subject
    LogEntry -- Event
    LogEntry -- DateTime
    LogEntry -- NodeReference
    @enduml



..                                    ######
.. class:: Log

  .. method cross ref ok

  Represents a collection of LogEntry elements, used to transfer log information
  between DataONE components.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!--  Log -->
     :end-before: <!-- Log Entry -->

  .. image:: images/class_log.png

  .. 
    @startuml images/class_log.png
    class Log {
      + start : integer
      + count : integer
      + total : integer
      + logEntry : LogEntry[0..*]
    }
    Log o-- LogEntry
    @enduml

  .. attribute:: start

     The zero based index of the first logEntry in the list relative to the
     first available.

  .. attribute:: count

     The number of logEntry values present in the message.

  .. attribute:: total

     The total number of logEntry values available on the server.

  .. attribute:: logEntry

     A list of zero or more instances of :class:`Types.LogEntry`.



..                                    ######
.. class:: MonitorList

  A list of MonitorInfo instances.

  ::

    message MonitorList {
      repeated LogRecord entry = 0;
    }



..                                    ######
.. class:: MonitorInfo

  A single log entry as reported by a Member Node or Coordinating Node through
  the getMonitorInfos methods.

  :: 

    message MonitorInfo {
      required DateTime time = 0;
      required uint64 size = 1;
    }



..                                    ######
.. class:: Node

  A set of values that describe a node, its Internet location, the services it
  supports and its replication policy.

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Node -->
     :end-before: <!-- Node Health -->

  .. image:: images/class_node.png

  ..
    @startuml images/class_node.png
    class Node {
      name : NonEmptyString
      description : NonEmptyString
      baseURL : anyURI
      services : Services[0..1]
      synchronization : Synchronization[0..1]
      health : Nodehealth[0..1]
      replicate : boolean
      synchronize : boolean
      type : NodeType
      environment : Environment[0..1]
    }
    Node -- NonEmptyString
    Node o-- Services
    Node o-- Synchronization
    Node o-- NodeHealth
    Node -- NodeType
    Node o-- Environment
    @enduml



..                                    ######
.. class:: NodeHealth

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Node Health -->
     :end-before: <!-- Node List -->

  .. image:: images/class_nodehealth.png

  ..
    @startuml images/class_nodehealth.png
    class NodeHealth {
      ping : Ping
      status : Status
    }
    NodeHealth -- Ping
    NodeHealth -- Status
    @enduml
   

..                                    ######
.. class:: NodeList

  A list of Node entries that is returned by :func:`cn_register.listNodes()`.

  NodeList is described in :mod:`NodeList`.


  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Node List -->
     :end-before: <!-- Object Info -->

  .. image:: images/class_nodelist.png

  ..
    @startuml images/class_nodelist.png
    class NodeList {
      node : Node[1..*]
    }
    NodeList o-- Node
    @enduml


..                                    ######
.. class:: NodeReference

  Member Node identifier drawn from the DataONE :mod:`cn_register <registry service>`.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- NodeReference -->
     :end-before: <!-- Node Type Enumeration -->

  .. image:: images/class_nodereference.png

  .. 
    @startuml images/class_nodereference.png
    NonEmptyString <|-- NodeReference
    @enduml


..                                    ######
.. class:: ObjectFormatIdentifier

  A string used to identify an instance of :class:`Types.ObjectFormat` and MUST
  be unique within an instance of :class:`Types.ObjectFormatList`.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Object Format Identifier -->
     :end-before: <!-- Permission = permitted action -->

  .. image:: images/class_objectformatidentifier.png
  
  ..
    @startuml images/class_objectformatidentifier.png
    NonEmptyString <|-- ObjectFormatIdentifier
    @enduml


..                                    ######
.. class:: ObjectFormat

  One value from the DataONE Object Format Vocabulary, which is returned by :func:`CN_crud.getFormat()`.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Object Format -->
     :end-before: <!--  Object Format List -->
  
  .. attribute:: identifier
    
     Unique identifer representing the object format.
     
  .. attribute:: formatName
  
     A human readable name that describes the object format

  .. image:: images/class_objectformat.png

  ..
    @startuml images/class_objectformat.png
    class ObjectFormat {
      fmtid : ObjectFormatIdentifier
      formatName : string
    }
    ObjectFormat -- ObjectFormatIdentifier
    @enduml



..                                    ######
.. class:: ObjectFormatList

  A list of ObjectFormat entries that is returned by :func:`CN_crud.listFormats()`.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!--  Object Format List -->
     :end-before: <!-- Object Info -->
  
  ::
  
    message ObjectFormatList
    {
      required int start = 0;
      required int count = 1;
      required int total = 2;
      repeated ObjectFormat objectFormat = 3;
    }
  
  .. attribute:: start
  
     An integer that indicates zero-based offset of the first entry in
     objectFormat from the start of the list of entries from which this 
     list was drawn (such as the results of :func:`CN_crud.listFormats`)
  
  .. attribute:: count
  
     The total number of entries returned in :attr:`objectFormat`.
  
  .. attribute:: total
  
     The total number of entries in the list from which this list was drawn.
  
  
  .. attribute:: objectFormat
  
     The ObjectFormat structure for each object format listed.

   .. image:: images/class_objectformatlist.png

   ..
     @startuml images/class_objectformatlist.png
     class ObjectFormatList {
       start : integer
       count : integer
       total : integer
       objectFormat : ObjectFormat[1..*]
     }
     ObjectFormatList o-- ObjectFormat
     @enduml



..                                    ######
.. class:: ObjectList

  A list of object descriptions. This provides more information than the
  :class:`IdentifierList` by adding an identifier to the
  :class:`DescribeResponse`.
  
  As represented in XMLSchema:
  
  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Object Info -->
     :end-before: <!-- Object Location -->
 
  .. image:: images/class_objectlist.png

  .. 
    @startuml images/class_objectlist.png
    class ObjectInfo {
      + identifier : Identifier
    }
    ObjectInfo -- Identifier
    DescribeResponse <|-- ObjectInfo
    
    class ObjectList {
      objectInfo : ObjectInfo[0..*]
    }
    ObjectList o-- ObjectInfo
    @enduml

  .. attribute:: identifier

     Identifier of the object in the describe response.

  .. attribute:: start

     An integer that indicates zero-based offset of the first entry in
     objectInfo from the start of the list of entries from which this list was
     drawn (such as the results of :func:`CN_query.search` or
     :func:`MN_replication.listObjects`)

  .. attribute:: count

     The total number of entries returned in :attr:`objectInfo`.

  .. attribute:: total

     The total number of entries in the list from which this list was drawn.

  .. attribute:: objectInfo

     List of ObjectInfo structures, which are an extension of :class:`DescribeResponse`



..                                    ######
.. class:: ObjectLocationList

   A list of nodes and node service base URLs known to hold a copy of an
   object.

   As represented in XMLSchema:

   .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
      :language: xml
      :start-after: <!-- Object Location -->
      :end-before: <!-- Object Location List -->

  .. attribute:: identifier

     The identifier that this ObjectLocationList refers to (e.g. the identifier
     for the science metadata or data object).

  .. attribute:: locations

     List of ``ObjectLocation`` entries that indicate the nodes on which the
     object is located.

  .. image:: images/class_objectlocationlist.png

  ..
    @startuml images/class_objectlocationlist.png
      class ObjectLocationList {
        + identifier : Identifier
        + locations : ObjectLocation[0..*]
      }
      ObjectLocationList o-- ObjectLocation
      ObjectLocationList -- Identifier
    @enduml



..                                    ######
.. class:: ObjectLocation

   Portion of an ObjectLocationList indicating the node from which the object
   can be retrieved. 

   As represented in XMLSchema:

   .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
      :language: xml
      :start-after: <!-- Object Location -->
      :end-before: <!-- Object Location List -->

  .. attribute:: nodeIdentifier

     A node identifier. Node identifiers follow the same composition rules as
     other identifiers in the system and no meaning should be implied from the
     construct other than as a unique identifier for the node.

  .. attribute:: baseURL

     The current base URL for services implemented on the target node. For example:
     ``http://mn1.dataone.org/mn/``

  .. attribute:: url

    The full URL for retrieving the object bytes. For example, if identifer
    was "ABX154", and the node had a base URL of ``http://mn1.dataone.org/mn``
    then the value would be ``http://mn1.dataone.org/mn/object/ABX154``

  .. attribute:: preference

     A weighting parameter that provides a hint to the caller for the relative
     preference for nodes from which the content should be retrieved. Higher
     values have higher preference. Values are only relative to each other in
     a particular response. Nodes with equal weight get equal values.

  .. image:: images/class_objectlocation.png

  .. 
    @startuml images/class_objectlocation.png
    class ObjectLocation {
      + nodeIdentifier : Identifier
      + baseURL : anyURI
      + url : anyURI
      + preference : integer[0..1]
    }
    ObjectLocation -- Identifier
    @enduml



..                                    ######
.. class:: ObjectStatistics

   A summary of object use information intended primarily for the monitoring service.



..                                    ######
.. class:: Permission

  A string value indicating the set of actions that can be performed on a
  resource as specified in an access policy.  The set of permissions include
  the ability to read a resource, modify a resource (write), and to change
  the set of access control policies for a resource (changePermission).  In
  addition, there is a permission that controls ability to execute a service
  (execute). Permissions are cumulative, in that higher level permissions
  include all of the priveledges of lower levels (e.g., given write access, one
  also implicitly has read access).

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Permission = permitted action -->
     :end-before: <!-- QueryType = named types of search query formats -->

  .. image:: images/class_permission.png

  .. 
    @startuml images/class_permission.png
    enum Permission
    Permission : READ
    Permission : WRITE
    Permission : CHANGEPERMISSION
    Permission : EXECUTE
    @enduml



..                                    ######
.. class:: OperationStatistics

   A summary of operation calls intended primarily for the monitoring service.



..                                    ######
.. class:: Person

  Person represents metadata about a Principal that is a person and that 
  can be used by clients and nodes for displaying AccessPolicy information.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Person -->
     :end-before: <!-- Ping -->

  .. attribute:: subject

     The unique identifier for the person.

  .. attribute:: givenName

     The given name of the Person.

  .. attribute:: familyName

     The family name of the Person.

  .. attribute:: email

     The email address of the Person.

  .. attribute:: isMemberOf

     A group or role in which the Principal is a member, expressed using the
     unique Principal identifier for that group.

  .. attribute:: equivalentIdentity

     An alternative but equivalent identity for the principal that has been
     used in alternate identity systems.

  .. image:: images/class_person.png

  ..
    @startuml images/class_person.png
    class Person {
      + subject : Subject
      + givenName : NonEmptyString
      + familyName : NonEmptyString
      + email : NonEmptyString
      + isMemberOf : Subject
      + equivalentIdentity : Subject[0..*]
    }
    Person o-- Subject
    Person -- NonEmptyString
    @enduml



..                                    ######
.. class:: PingResponse

  The response from :func:`MN_health.ping`



..                                    ######
.. class:: Subject

  Person (user), Group, or Organization, or System.

  The formal name identifying a user or group from the DataONE Identity
  Management Service. The subject is represented by a unique, persistent,
  non-reassignable identifier string that follows the same constraints as the
  Identifier.

  Used by :mod:`SystemMetadata`

  As represented in XMLSchema:
  
  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Subject = user identity -->
     :end-before: <!-- SubjectList -->

  .. image:: images/class_subject.png

  ..
    @startuml images/class_subject.png
    NonEmptyString <|-- Subject
    @enduml



..                                    ######
.. class:: SubjectList

  A List of Subjects, including both persons and groups, that is returned
  from the listSubjects service.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- SubjectList -->
     :end-before: <!-- Definition of the SystemMetdata element -->

  .. image:: images/class_subjectlist.png

  ..
    @startuml images/class_subjectlist.png
    class SubjectList {
      + person : Person[0..*]
      + group : Group[0..*]
    }
    SubjectList o-- Person
    SubjectList o-- Group
    @enduml



.. class:: Query

   Queries are used to identify a subset of objects from a collection. The
   form of query used by the DataONE system is likely to evolve significantly
   as the project proceeds. The query specification listed here applies to the
   prototype implementations (i.e. pre-version 1.0).

   ::
    
     enum FilterTypeEnum 
     {
       NVP = 1;
       SOLR = 3;
       EARTHGRID = 4;
     }
     
     enum LogicalOperator
     {
       LOP_OR = 0;
       LOP_AND = 1;
     }

     message NameValuePair
     {
       required string name = 0;
       required string value= 1;
     }

     message NameValuePairFilter
     {
       optional LogicalOperator LOP = 1 [default = LOP_AND];
       repeated NameValuePair nvpair = 2;
     }

     message SOLRFilter
     {
       required string filter = 0;
       optional string facetFilter = 1;
     }

     message EarthGridFilter
     {
       required string filter = 0;
     }




..                                    ######
.. class:: Status

  The response from :func:`MN_health.getStatus`


..                                    ######
.. class:: SystemMetadata

  A set of low level information about an object in the DataONE system.
  SystemMetadata is described in :mod:`SystemMetadata`.

  As represented in XMLSchema:

  .. LiteralInclude:: /d1_schemas/dataoneTypes.xsd
     :language: xml
     :start-after: <!-- Definition of the SystemMetdata element -->
     :end-before: <!-- ****************************

  .. image:: images/class_systemmetadata.png

  ..
    @startuml images/class_systemmetadata.png
    class SystemMetadata {
      + identifier : Identifier
      + objectFormat : ObjectFormat
      + size : integer
      + submitter : Subject
      + rightsHolder : Subject
      + accessPolicy : AccessPolicy[0..*]
      + replicationPolicy : ReplicationPolicy[0..*]
      + obsoletes : Identifier[0..*]
      + obsoletedBy : Identifier[0..*]
      + derivedFrom : Identifier[0..*]
      + describes : Identifier[0..*]
      + describedBy : Identifier[0..*]
      + checksum : Checksum
      + embargoExpires : dateTime
      + dateUploaded : dateTime
      + dateSysMetadataModified : dateTime
      + originMemberNode : NodeReference
      + authoritativeMemberNode : NodeReference
      + replica : Replica[0...*]
    }
    SystemMetadata o-- Identifier
    SystemMetadata -- ObjectFormat
    SystemMetadata -- Subject
    SystemMetadata o-- AccessPolicy
    SystemMetadata o-- ReplicationPolicy
    SystemMetadata -- Checksum
    SystemMetadata -- NodeReference
    @enduml



.. class:: X509Certificate

   A public certificate conforming to the X.509 standard that is used in
   two-phase authentication.



.. _Protocol Buffer Language: http://code.google.com/apis/protocolbuffers/docs/overview.html

