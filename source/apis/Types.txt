..
   WARNING! This file is automatically generated. Edits will be lost.

Data Types in CICore
--------------------

.. module:: Types
   :synopsis: Catalog of data types (structures) used by the DataONE cicore.

**Quick Reference**

- :class:`Types.AccessPolicy`
- :class:`Types.AccessRule`
- :class:`Types.Checksum`
- :class:`Types.ChecksumAlgorithm`
- :class:`Types.CrontabEntry`
- :class:`Types.Event`
- :class:`Types.Group`
- :class:`Types.Identifier`
- :class:`Types.Log`
- :class:`Types.LogEntry`
- :class:`Types.MonitorInfo`
- :class:`Types.MonitorList`
- :class:`Types.Node`
- :class:`Types.NodeList`
- :class:`Types.NodeReference`
- :class:`Types.NodeState`
- :class:`Types.NodeType`
- :class:`Types.NonEmptyString`
- :class:`Types.NonEmptyString800`
- :class:`Types.ObjectFormat`
- :class:`Types.ObjectFormatIdentifier`
- :class:`Types.ObjectFormatList`
- :class:`Types.ObjectInfo`
- :class:`Types.ObjectList`
- :class:`Types.ObjectLocation`
- :class:`Types.ObjectLocationList`
- :class:`Types.Permission`
- :class:`Types.Person`
- :class:`Types.Ping`
- :class:`Types.Replica`
- :class:`Types.ReplicationPolicy`
- :class:`Types.ReplicationStatus`
- :class:`Types.Schedule`
- :class:`Types.Service`
- :class:`Types.ServiceMethodRestriction`
- :class:`Types.ServiceName`
- :class:`Types.ServiceVersion`
- :class:`Types.Services`
- :class:`Types.Session`
- :class:`Types.Slice`
- :class:`Types.Subject`
- :class:`Types.SubjectInfo`
- :class:`Types.SubjectList`
- :class:`Types.Synchronization`
- :class:`Types.SystemMetadata`



.. image:: images/classes_combined.png


..
  @startuml images/classes_combined.png
  ChecksumAlgorithm --|> xs.string

  CrontabEntry --|> xs.token

  enum Event
    Event : create
    Event : read
    Event : update
    Event : delete
    Event : replicate
    Event : synchronization_failed
    Event : replication_failed

  enum NodeState
    NodeState : up
    NodeState : down
    NodeState : unknown

  enum NodeType
    NodeType : mn
    NodeType : cn
    NodeType : Monitor

  NonEmptyString --|> xs.string

  ObjectFormatIdentifier --|> NonEmptyString

  NonEmptyString800 --|> NonEmptyString

  enum Permission
    Permission : read
    Permission : write
    Permission : changePermission
    Permission : execute
    Permission : replicate

  enum ReplicationStatus
    ReplicationStatus : queued
    ReplicationStatus : requested
    ReplicationStatus : completed
    ReplicationStatus : invalidated

  ServiceName --|> NonEmptyString

  ServiceVersion --|> NonEmptyString

  class AccessPolicy {
    + allow : AccessRule[1..*]
  }
  AccessPolicy .. AccessRule

  class AccessRule {
    + subject : Subject[1..*]
    + permission : Permission[1..*]
  }
  AccessRule .. Subject
  AccessRule .. Permission

  class Checksum {
    + algorithm : ChecksumAlgorithm
  }
  Checksum .. ChecksumAlgorithm
  Checksum --|> xs.string

  class Group {
    + subject : Subject[1..1]
    + groupName : NonEmptyString[1..1]
    + hasMember : Subject[0..*]
  }
  Group .. Subject
  Group .. NonEmptyString

  class Identifier {
  }
  Identifier --|> NonEmptyString800

  class Log {
    + logEntry : LogEntry[0..*]
  }
  Log .. LogEntry
  Log --|> Slice

  class LogEntry {
    + entryId : Identifier[1..1]
    + identifier : Identifier[1..1]
    + ipAddress : xs.string[1..1]
    + userAgent : xs.string[1..1]
    + subject : Subject[1..1]
    + event : Event[1..1]
    + dateLogged : xs.dateTime[1..1]
    + memberNode : NodeReference[1..1]
  }
  LogEntry .. Identifier
  LogEntry .. xs.string
  LogEntry .. Subject
  LogEntry .. Event
  LogEntry .. xs.dateTime
  LogEntry .. NodeReference

  class MonitorInfo {
    + date : xs.date[1..1]
    + count : xs.int[1..1]
  }
  MonitorInfo .. xs.date
  MonitorInfo .. xs.int

  class MonitorList {
    + monitorInfo : MonitorInfo[0..*]
  }
  MonitorList .. MonitorInfo

  class Node {
    + identifier : NodeReference[1..1]
    + name : NonEmptyString[1..1]
    + description : NonEmptyString[1..1]
    + baseURL : xs.anyURI[1..1]
    + services : Services[0..1]
    + synchronization : Synchronization[0..1]
    + ping : Ping[0..1]
    + subject : Subject[0..*]
    + contactSubject : Subject[1..*]
    + replicate : xs.boolean[1.. 1]
    + synchronize : xs.boolean[1.. 1]
    + type : NodeType[1.. 1]
    + state : NodeState[1.. 1]
  }
  Node .. NodeReference
  Node .. NonEmptyString
  Node .. xs.anyURI
  Node .. Services
  Node .. Synchronization
  Node .. Ping
  Node .. Subject
  Node .. xs.boolean
  Node .. NodeType
  Node .. NodeState

  class NodeList {
    + node : Node[1..*]
  }
  NodeList .. Node

  class NodeReference {
  }
  NodeReference --|> NonEmptyString

  class ObjectFormat {
    + formatId : ObjectFormatIdentifier[1..1]
    + formatName : xs.string[1..1]
    + formatType : xs.string[1..1]
  }
  ObjectFormat .. ObjectFormatIdentifier
  ObjectFormat .. xs.string

  class ObjectFormatList {
    + objectFormat : ObjectFormat[1..*]
  }
  ObjectFormatList .. ObjectFormat
  ObjectFormatList --|> Slice

  class ObjectInfo {
    + identifier : Identifier[1..1]
    + formatId : ObjectFormatIdentifier[1..1]
    + checksum : Checksum[1..1]
    + dateSysMetadataModified : xs.dateTime[1..1]
    + size : xs.unsignedLong[1..1]
  }
  ObjectInfo .. Identifier
  ObjectInfo .. ObjectFormatIdentifier
  ObjectInfo .. Checksum
  ObjectInfo .. xs.dateTime
  ObjectInfo .. xs.unsignedLong

  class ObjectList {
    + objectInfo : ObjectInfo[0..*]
  }
  ObjectList .. ObjectInfo
  ObjectList --|> Slice

  class ObjectLocation {
    + nodeIdentifier : NodeReference[1..1]
    + baseURL : xs.anyURI[1..1]
    + url : xs.anyURI[1..1]
    + preference : xs.int[0..1]
  }
  ObjectLocation .. NodeReference
  ObjectLocation .. xs.anyURI
  ObjectLocation .. xs.int

  class ObjectLocationList {
    + identifier : Identifier[1..1]
    + objectLocation : ObjectLocation[0..*]
  }
  ObjectLocationList .. Identifier
  ObjectLocationList .. ObjectLocation

  class Person {
    + subject : Subject[1..1]
    + givenName : NonEmptyString[1..*]
    + familyName : NonEmptyString[1..1]
    + email : NonEmptyString[0..*]
    + isMemberOf : Subject[0..*]
    + equivalentIdentity : Subject[0..*]
    + verified : xs.boolean[0..1]
  }
  Person .. Subject
  Person .. NonEmptyString
  Person .. xs.boolean

  class Ping {
    + success : xs.boolean[0..1]
    + lastSuccess : xs.dateTime[0..1]
  }
  Ping .. xs.boolean
  Ping .. xs.dateTime

  class Replica {
    + replicaMemberNode : NodeReference[1..1]
    + replicationStatus : ReplicationStatus[1..1]
    + replicaVerified : xs.dateTime[1..1]
  }
  Replica .. NodeReference
  Replica .. ReplicationStatus
  Replica .. xs.dateTime

  class ReplicationPolicy {
    + preferredMemberNode : NodeReference[0..*]
    + blockedMemberNode : NodeReference[0..*]
    + replicationAllowed : xs.boolean[0.. 1]
    + numberReplicas : xs.int[0.. 1]
  }
  ReplicationPolicy .. NodeReference
  ReplicationPolicy .. xs.boolean
  ReplicationPolicy .. xs.int

  class Service {
    + restriction : ServiceMethodRestriction[0..*]
    + name : ServiceName[1.. 1]
    + version : ServiceVersion[1.. 1]
    + available : xs.boolean[0.. 1]
  }
  Service .. ServiceMethodRestriction
  Service .. ServiceName
  Service .. ServiceVersion
  Service .. xs.boolean

  class ServiceMethodRestriction {
    + allowed : SubjectList[1..1]
    + name : xs.NMTOKEN[0.. 1]
    + rest : xs.token[1.. 1]
  }
  ServiceMethodRestriction .. SubjectList
  ServiceMethodRestriction .. xs.NMTOKEN
  ServiceMethodRestriction .. xs.token

  class Services {
    + service : Service[1..*]
  }
  Services .. Service

  class Session {
    + subject : Subject[1..1]
    + subjectInfo : SubjectInfo[0..1]
  }
  Session .. Subject
  Session .. SubjectInfo

  class Schedule {
    + hour : CrontabEntry[1..1]
    + mday : CrontabEntry[1..1]
    + min : CrontabEntry[1..1]
    + mon : CrontabEntry[1..1]
    + sec : CrontabEntry[1..1]
    + wday : CrontabEntry[1..1]
    + year : CrontabEntry[1..1]
  }
  Schedule .. CrontabEntry

  class Slice {
    + count : xs.int[1..1]
    + start : xs.int[1..1]
    + total : xs.int[1..1]
  }
  Slice .. xs.int

  class Synchronization {
    + schedule : Schedule[1..1]
    + lastHarvested : xs.dateTime[1..1]
    + lastCompleteHarvest : xs.dateTime[1..1]
  }
  Synchronization .. Schedule
  Synchronization .. xs.dateTime

  class Subject {
  }
  Subject --|> NonEmptyString

  class SubjectInfo {
    + person : Person[0..*]
    + group : Group[0..*]
  }
  SubjectInfo .. Person
  SubjectInfo .. Group

  class SubjectList {
    + subject : Subject[0..*]
  }
  SubjectList .. Subject

  class SystemMetadata {
    + serialVersion : xs.unsignedLong[1..1]
    + identifier : Identifier[1..1]
    + formatId : ObjectFormatIdentifier[1..1]
    + size : xs.unsignedLong[1..1]
    + checksum : Checksum[1..1]
    + submitter : Subject[1..1]
    + rightsHolder : Subject[1..1]
    + accessPolicy : AccessPolicy[0..1]
    + replicationPolicy : ReplicationPolicy[0..1]
    + obsoletes : Identifier[0..1]
    + obsoletedBy : Identifier[0..1]
    + dateUploaded : xs.dateTime[1..1]
    + dateSysMetadataModified : xs.dateTime[1..1]
    + originMemberNode : NodeReference[0..1]
    + authoritativeMemberNode : NodeReference[0..1]
    + replica : Replica[0..*]
  }
  SystemMetadata .. xs.unsignedLong
  SystemMetadata .. Identifier
  SystemMetadata .. ObjectFormatIdentifier
  SystemMetadata .. Checksum
  SystemMetadata .. Subject
  SystemMetadata .. AccessPolicy
  SystemMetadata .. ReplicationPolicy
  SystemMetadata .. xs.dateTime
  SystemMetadata .. NodeReference
  SystemMetadata .. Replica

  @enduml



.. include:: Types_include.txt


..                                    ######
.. class:: ChecksumAlgorithm

    The checksum algorithm used to calculate a checksum. DataONE will publish a known list of algorithm names that can be supported, but compliant implementations must support at least SHA-1.

    Valid entries include: SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, MD5

    The default checksum is *SHA-1*.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ChecksumAlgorithm">
         <xs:restriction xmlns:d1="http://ns.dataone.org/service/types/v1" base="xs:string"/>
      </xs:simpleType>


    .. image:: images/class_ChecksumAlgorithm.png

    ..
      @startuml images/class_ChecksumAlgorithm.png

      ChecksumAlgorithm --|> xs.string

      @enduml


..                                    ######
.. class:: CrontabEntry

    A single value in the series that forms a single crontab entry.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="CrontabEntry">
         <xs:restriction base="xs:token">
            <xs:pattern xmlns:d1="http://ns.dataone.org/service/types/v1" value="([\?\*\d]{1,2}[\-,]?)+"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_CrontabEntry.png

    ..
      @startuml images/class_CrontabEntry.png

      CrontabEntry --|> xs.token

      @enduml


..                                    ######
.. class:: Event

    The controlled list of events that are logged, which will include 'CREATE', 'UPDATE', 'DELETE', 'READ', 'REPLICATE', 'SYNCHRONIZATION_FAILED' and 'REPLICATION_FAILED' events.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Event">
         <xs:restriction base="xs:string">
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="create"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="read"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="update"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="delete"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="replicate"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="synchronization_failed"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="replication_failed"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_Event.png

    ..
      @startuml images/class_Event.png

      enum Event
        Event : create
        Event : read
        Event : update
        Event : delete
        Event : replicate
        Event : synchronization_failed
        Event : replication_failed

      @enduml


..                                    ######
.. class:: NodeState

    An indicator of the current node accessibility. Nodes that are marked "down" are inaccessible for service operations, those that are "up" are in the normal accessible state, and "unknown" indicates that the state has not been determined yet.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NodeState">
         <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="up"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="down"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="unknown"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_NodeState.png

    ..
      @startuml images/class_NodeState.png

      enum NodeState
        NodeState : up
        NodeState : down
        NodeState : unknown

      @enduml


..                                    ######
.. class:: NodeType

    The type of this node, which is either "mn" for Member Nodes, and and "cn" for Coordinating Nodes.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NodeType">
         <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="mn"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="cn"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="Monitor"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_NodeType.png

    ..
      @startuml images/class_NodeType.png

      enum NodeType
        NodeType : mn
        NodeType : cn
        NodeType : Monitor

      @enduml


..                                    ######
.. class:: NonEmptyString

    A derived string type with at least length 1 and it must contain non-whitespace.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NonEmptyString">
         <xs:restriction base="xs:string">
            <xs:minLength xmlns:d1="http://ns.dataone.org/service/types/v1" value="1"/>
            <xs:pattern xmlns:d1="http://ns.dataone.org/service/types/v1" value="[\s]*[\S][\s\S]*"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_NonEmptyString.png

    ..
      @startuml images/class_NonEmptyString.png

      NonEmptyString --|> xs.string

      @enduml


..                                    ######
.. class:: ObjectFormatIdentifier

    A string used to identify an instance of :class:`Types.ObjectFormat` and MUST be unique within an instance of :class:`Types.ObjectFormatList`.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectFormatIdentifier">
         <xs:restriction xmlns:d1="http://ns.dataone.org/service/types/v1" base="d1:NonEmptyString"/>
      </xs:simpleType>


    .. image:: images/class_ObjectFormatIdentifier.png

    ..
      @startuml images/class_ObjectFormatIdentifier.png

      ObjectFormatIdentifier --|> NonEmptyString

      @enduml


..                                    ######
.. class:: NonEmptyString800

    An NonEmptyString800 is a NonEmptyString string with a maximum length of 800.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NonEmptyString800">
         <xs:restriction base="d1:NonEmptyString">
            <xs:maxLength xmlns:d1="http://ns.dataone.org/service/types/v1" value="800"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_NonEmptyString800.png

    ..
      @startuml images/class_NonEmptyString800.png

      NonEmptyString800 --|> NonEmptyString

      @enduml


..                                    ######
.. class:: Permission

    A string value indicating the set of actions that can be performed on a resource as specified in an access policy. The set of permissions include the ability to read a resource (read), modify a resource (write), and to change the set of access control policies for a resource (changePermission). In addition, there is a permission that controls ability to execute a service (execute), and a permission that controls the ability of a node to receive a replicate of an object from another node.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Permission">
         <xs:restriction base="xs:string">
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="read"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="write"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="changePermission"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="execute"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="replicate"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_Permission.png

    ..
      @startuml images/class_Permission.png

      enum Permission
        Permission : read
        Permission : write
        Permission : changePermission
        Permission : execute
        Permission : replicate

      @enduml


..                                    ######
.. class:: ReplicationStatus

    A controlled string value indicating the current state of a replica of an object. When an object identified needs to be replicated, it is added to the replication task queue and is marked as 'queued'; a CN node will then pick up that task and request that it be replicated to a MN and marks that it is 'requested'; when a MN finishes replicating the object, it informs the CN that it is finished and it is marked as 'completed'; periodically the CN checks each replica to be sure it is both available and valid (matching checksum with original), and if it is either unavailable in invalid then it marks it as 'invalidated', which indicates that the replication policy needs to be checked again.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ReplicationStatus">
         <xs:restriction base="xs:string">
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="queued"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="requested"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="completed"/>
            <xs:enumeration xmlns:d1="http://ns.dataone.org/service/types/v1" value="invalidated"/>
         </xs:restriction>
      </xs:simpleType>


    .. image:: images/class_ReplicationStatus.png

    ..
      @startuml images/class_ReplicationStatus.png

      enum ReplicationStatus
        ReplicationStatus : queued
        ReplicationStatus : requested
        ReplicationStatus : completed
        ReplicationStatus : invalidated

      @enduml


..                                    ######
.. class:: ServiceName

    The name of a service that is available on a Node.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ServiceName">
         <xs:restriction xmlns:d1="http://ns.dataone.org/service/types/v1" base="d1:NonEmptyString"/>
      </xs:simpleType>


    .. image:: images/class_ServiceName.png

    ..
      @startuml images/class_ServiceName.png

      ServiceName --|> NonEmptyString

      @enduml


..                                    ######
.. class:: ServiceVersion

    The version of a service that is available on a Node, expressed using the symbolic service level that that service implements, such as "v1" or "v2". DataONE services are released only as major service versions; patches to services are not indicated in this version label.

    .. code-block:: xml


      <xs:simpleType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ServiceVersion">
         <xs:restriction xmlns:d1="http://ns.dataone.org/service/types/v1" base="d1:NonEmptyString"/>
      </xs:simpleType>


    .. image:: images/class_ServiceVersion.png

    ..
      @startuml images/class_ServiceVersion.png

      ServiceVersion --|> NonEmptyString

      @enduml


..                                    ######
.. class:: AccessPolicy

    A set of rules that specifies as a whole the allowable permissions that a given user or system has for accessing a resource, including both data and metadata resources and service resources. An access policy consists of a sequence of allow rules that grant permissions to principals, which can be individual users, groups of users, symbolic users, or systems and services.

    .. attribute:: allow

      Type: :class:`Types.AccessRule`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="AccessPolicy">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="allow" type="d1:AccessRule" minOccurs="1" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_AccessPolicy.png

    ..
      @startuml images/class_AccessPolicy.png

      class AccessPolicy {
        + allow : AccessRule[1..*]
      }
      AccessPolicy .. AccessRule

      @enduml


..                                    ######
.. class:: AccessRule

    A rule that is used to allow a :term:`subject` to perform an action (such as read or write) on an object in DataONE. Rules are tuples (subject, permission) specifying which permissions are allowed for the subjects(s). The resource on which the access control rules are being applied is determined by the containing System Metadata document, or in the case of methods such as :func:`CNAuthorization.setAccessPolicy`, by the *pid* in the method parameters.

    Access control rules are specified by the :term:`Origin Member Node` when the object is first registered in DataONE. If no rules are specified at that time, then the object is deemed to be private and the only user with access to the object (read, write, or otherwise) is the :term:`Rights Holder`.

    .. attribute:: subject

      Type: :class:`Types.Subject`

    .. attribute:: permission

      Type: :class:`Types.Permission`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="AccessRule">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="subject" type="d1:Subject" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="permission" type="d1:Permission" minOccurs="1" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_AccessRule.png

    ..
      @startuml images/class_AccessRule.png

      class AccessRule {
        + subject : Subject[1..*]
        + permission : Permission[1..*]
      }
      AccessRule .. Subject
      AccessRule .. Permission

      @enduml


..                                    ######
.. class:: Checksum

    Represents the value of a computed checksum.

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Checksum">
         <xs:simpleContent>
            <xs:extension base="xs:string">
               <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="algorithm" type="d1:ChecksumAlgorithm" use="required"/>
            </xs:extension>
         </xs:simpleContent>
      </xs:complexType>


    .. image:: images/class_Checksum.png

    ..
      @startuml images/class_Checksum.png

      class Checksum {
        + algorithm : ChecksumAlgorithm
      }
      Checksum .. ChecksumAlgorithm
      Checksum --|> xs.string

      @enduml


..                                    ######
.. class:: Group

    Group represents metadata about a Subject that is a group of other Subjects and that can be used by clients and nodes for displaying AccessPolicy information.

    .. attribute:: subject

      Type: :class:`Types.Subject`

      The unique identifier of the group.


    .. attribute:: groupName

      Type: :class:`Types.NonEmptyString`

      The name of the Group.


    .. attribute:: hasMember

      Type: :class:`Types.Subject`

      A Subject that is a member of this group, expressed using the unique identifier for that Subject.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Group">
         <xs:sequence>
            <xs:element name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="groupName" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="hasMember" type="d1:Subject" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_Group.png

    ..
      @startuml images/class_Group.png

      class Group {
        + subject : Subject[1..1]
        + groupName : NonEmptyString[1..1]
        + hasMember : Subject[0..*]
      }
      Group .. Subject
      Group .. NonEmptyString

      @enduml


..                                    ######
.. class:: Identifier

    An :term:`identifier` (:term:`PID`) in the DataONE system. This is equivalent to a Unicode string of printable characters, excluding whitespace. All representations of identifiers must be encoded in 7-bit ASCII or UTF-8.

    Identifiers have a maximum length of 800 characters, and a variety of other properties designed for preservation and longevity. Some discussion on this is described in the `PID documentation`_ and in decision `ticket 577`_.

    .. _ticket 577: https://redmine.dataone.org/issues/577

    .. _PID documentation: http://mule1.dataone.org/ArchitectureDocs-current/design/PIDs.html

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Identifier">
         <xs:simpleContent>
            <xs:extension xmlns:d1="http://ns.dataone.org/service/types/v1" base="d1:NonEmptyString800"/>
         </xs:simpleContent>
      </xs:complexType>


    .. image:: images/class_Identifier.png

    ..
      @startuml images/class_Identifier.png

      class Identifier {
      }
      Identifier --|> NonEmptyString800

      @enduml


..                                    ######
.. class:: Log

    Represents a collection of LogEntry elements, used to transfer log information between DataONE components.

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Log">
         <xs:complexContent>
            <xs:extension base="d1:Slice">
               <xs:sequence>
                  <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="logEntry" type="d1:LogEntry" minOccurs="0" maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_Log.png

    ..
      @startuml images/class_Log.png

      class Log {
        + logEntry : LogEntry[0..*]
      }
      Log .. LogEntry
      Log --|> Slice

      @enduml


..                                    ######
.. class:: LogEntry

    A single log entry as reported by a Member Node or Coordinating Node through the :func:`MNCore.getLogRecords` and :func:`CNCore.getLogRecords` methods.

    .. attribute:: entryId

      Type: :class:`Types.Identifier`

    .. attribute:: identifier

      Type: :class:`Types.Identifier`

    .. attribute:: ipAddress

      Type: :class:`Types.xs.string`

    .. attribute:: userAgent

      Type: :class:`Types.xs.string`

    .. attribute:: subject

      Type: :class:`Types.Subject`

    .. attribute:: event

      Type: :class:`Types.Event`

    .. attribute:: dateLogged

      Type: :class:`Types.xs.dateTime`

    .. attribute:: memberNode

      Type: :class:`Types.NodeReference`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="LogEntry">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="entryId" type="d1:Identifier" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="identifier" type="d1:Identifier" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="ipAddress" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="userAgent" type="xs:string" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="event" type="d1:Event" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="dateLogged" type="xs:dateTime" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="memberNode" type="d1:NodeReference" minOccurs="1" maxOccurs="1"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_LogEntry.png

    ..
      @startuml images/class_LogEntry.png

      class LogEntry {
        + entryId : Identifier[1..1]
        + identifier : Identifier[1..1]
        + ipAddress : xs.string[1..1]
        + userAgent : xs.string[1..1]
        + subject : Subject[1..1]
        + event : Event[1..1]
        + dateLogged : xs.dateTime[1..1]
        + memberNode : NodeReference[1..1]
      }
      LogEntry .. Identifier
      LogEntry .. xs.string
      LogEntry .. Subject
      LogEntry .. Event
      LogEntry .. xs.dateTime
      LogEntry .. NodeReference

      @enduml


..                                    ######
.. class:: MonitorInfo

    A single log entry as reported by a Member Node or Coordinating Node through the getMonitorInfos methods.

    .. attribute:: date

      Type: :class:`Types.xs.date`

    .. attribute:: count

      Type: :class:`Types.xs.int`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="MonitorInfo">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="date" type="xs:date" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="count" type="xs:int" minOccurs="1" maxOccurs="1"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_MonitorInfo.png

    ..
      @startuml images/class_MonitorInfo.png

      class MonitorInfo {
        + date : xs.date[1..1]
        + count : xs.int[1..1]
      }
      MonitorInfo .. xs.date
      MonitorInfo .. xs.int

      @enduml


..                                    ######
.. class:: MonitorList

    .. attribute:: monitorInfo

      Type: :class:`Types.MonitorInfo`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="MonitorList">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="monitorInfo" type="d1:MonitorInfo" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_MonitorList.png

    ..
      @startuml images/class_MonitorList.png

      class MonitorList {
        + monitorInfo : MonitorInfo[0..*]
      }
      MonitorList .. MonitorInfo

      @enduml


..                                    ######
.. class:: Node

    A set of values that describe a member or coordinating node, its Internet location, the services it supports and its replication policy. Several nodes may exist on a single physical device or hostname.

    .. attribute:: identifier

      Type: :class:`Types.NodeReference`

      A unique identifier for the node. This may initially be the same as the baseURL, however this value should not change for future implementations of the same node, whereas the baseURL may change in the future.


    .. attribute:: name

      Type: :class:`Types.NonEmptyString`

      A human readable name of the Node. The name of the node is being used in Mercury currently to assign a path, so format should be consistent with dataone directory naming conventions


    .. attribute:: description

      Type: :class:`Types.NonEmptyString`

      Description of content maintained by this node and any other free style notes. May be we should allow CDATA element with the purpose of using for display


    .. attribute:: baseURL

      Type: :class:`Types.xs.anyURI`

    .. attribute:: services

      Type: :class:`Types.Services`

    .. attribute:: synchronization

      Type: :class:`Types.Synchronization`

    .. attribute:: ping

      Type: :class:`Types.Ping`

    .. attribute:: subject

      Type: :class:`Types.Subject`

      The Subject of this node, which can be repeated as needed. The Node.subject represents the identifier of the node that would be found in X.509 certificates that would be used to securely communicate with this node. Thus, it is an X.509 Distinguished Name that applies to the host on which the Node is operating. When (and if) this hostname changes the new subject for the node would be added to the Node to track the subject that has been used in various access control rules over time.


    .. attribute:: contactSubject

      Type: :class:`Types.Subject`

      The appropriate person or group to contact regarding the disposition, management, and status of this Member Node. The Node.contactSubject is an X.509 Distinguished Name for a person or group that can be used to look up current contact details (e.g., name, email address) for the contact in the DataONE Identity service. DataONE uses the subjectContact to provide notices of interest to DataONE nodes, including information such as policy changes, maintenance updates, node outage notifications, among other information useful for administering a node. Each node that is registered with DataONE must provide at least one subjectContact that has been verified with DataONE.


    .. attribute:: replicate

      Type: :class:`Types.xs.boolean`

    .. attribute:: synchronize

      Type: :class:`Types.xs.boolean`

    .. attribute:: type

      Type: :class:`Types.NodeType`

    .. attribute:: state

      Type: :class:`Types.NodeState`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Node">
         <xs:sequence>
            <xs:element name="identifier" type="d1:NodeReference" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="name" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="description" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="baseURL" type="xs:anyURI" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="services" type="d1:Services" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="synchronization" type="d1:Synchronization" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="ping" type="d1:Ping" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subject" type="d1:Subject" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
            <xs:element name="contactSubject" type="d1:Subject" minOccurs="1" maxOccurs="unbounded">
            </xs:element>
         </xs:sequence>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="replicate" use="required" type="xs:boolean"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="synchronize" use="required" type="xs:boolean"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="type" use="required" type="d1:NodeType"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="state" use="required" type="d1:NodeState"/>
      </xs:complexType>


    .. image:: images/class_Node.png

    ..
      @startuml images/class_Node.png

      class Node {
        + identifier : NodeReference[1..1]
        + name : NonEmptyString[1..1]
        + description : NonEmptyString[1..1]
        + baseURL : xs.anyURI[1..1]
        + services : Services[0..1]
        + synchronization : Synchronization[0..1]
        + ping : Ping[0..1]
        + subject : Subject[0..*]
        + contactSubject : Subject[1..*]
        + replicate : xs.boolean[1.. 1]
        + synchronize : xs.boolean[1.. 1]
        + type : NodeType[1.. 1]
        + state : NodeState[1.. 1]
      }
      Node .. NodeReference
      Node .. NonEmptyString
      Node .. xs.anyURI
      Node .. Services
      Node .. Synchronization
      Node .. Ping
      Node .. Subject
      Node .. xs.boolean
      Node .. NodeType
      Node .. NodeState

      @enduml


..                                    ######
.. class:: NodeList

    A list of Node entries that is returned by :func:`CNCore.listNodes()`.

    NodeList is described in :mod:`NodeList`.

    .. attribute:: node

      Type: :class:`Types.Node`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NodeList">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" maxOccurs="unbounded" name="node" type="d1:Node" minOccurs="1"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_NodeList.png

    ..
      @startuml images/class_NodeList.png

      class NodeList {
        + node : Node[1..*]
      }
      NodeList .. Node

      @enduml


..                                    ######
.. class:: NodeReference

    Member Node identifier drawn from the DataONE :mod:`cn_register &lt;registry service&gt;`.

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="NodeReference">
         <xs:simpleContent>
            <xs:extension xmlns:d1="http://ns.dataone.org/service/types/v1" base="d1:NonEmptyString"/>
         </xs:simpleContent>
      </xs:complexType>


    .. image:: images/class_NodeReference.png

    ..
      @startuml images/class_NodeReference.png

      class NodeReference {
      }
      NodeReference --|> NonEmptyString

      @enduml


..                                    ######
.. class:: ObjectFormat

    One value from the DataONE Object Format Vocabulary, which is returned by :func:`CNCore.getFormat()`.

    An ObjectFormat is the structure returned from the getFormat() method of the CN REST interface. It provides the unique identifier and the name associated with the object format. Future versions may contain additional structured content from external common typing systems.

    .. attribute:: formatId

      Type: :class:`Types.ObjectFormatIdentifier`

      The unique identifier of the object format in the DataONE Object Format Vocabulary. The identifier should comply with DataONE Identifier rules, i.e. no whitespace, only UTF-8 or US-ASCII printable characters.


    .. attribute:: formatName

      Type: :class:`Types.xs.string`

      For objects that are typed using a Document Type Definition, this lists the well-known and accepted named version of the DTD.


    .. attribute:: formatType

      Type: :class:`Types.xs.string`

      A string field indicating whether or not this format is science data(DATA), science metadata(METADATA) or a resource map(RESOURCE). If the format is a self-describing data format that includes science metadata, then the field should also be set to science metadata.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectFormat">
         <xs:sequence>
            <xs:element name="formatId" type="d1:ObjectFormatIdentifier" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="formatName" type="xs:string" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="formatType" type="xs:string" minOccurs="1" maxOccurs="1">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_ObjectFormat.png

    ..
      @startuml images/class_ObjectFormat.png

      class ObjectFormat {
        + formatId : ObjectFormatIdentifier[1..1]
        + formatName : xs.string[1..1]
        + formatType : xs.string[1..1]
      }
      ObjectFormat .. ObjectFormatIdentifier
      ObjectFormat .. xs.string

      @enduml


..                                    ######
.. class:: ObjectFormatList

    An ObjectFormatList is the structure returned from the :func:`CNCore.listFormats()` method of the CN REST interface. It provides a list of named objectformats defined in the DataONE system. Each ObjectFormat returned in the list describes the object format via its name, and future versions may contain additional structured content from common external typing systems.

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectFormatList">
         <xs:complexContent>
            <xs:extension base="d1:Slice">
               <xs:sequence>
                  <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="objectFormat" type="d1:ObjectFormat" minOccurs="1" maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_ObjectFormatList.png

    ..
      @startuml images/class_ObjectFormatList.png

      class ObjectFormatList {
        + objectFormat : ObjectFormat[1..*]
      }
      ObjectFormatList .. ObjectFormat
      ObjectFormatList --|> Slice

      @enduml


..                                    ######
.. class:: ObjectInfo

    .. attribute:: identifier

      Type: :class:`Types.Identifier`

    .. attribute:: formatId

      Type: :class:`Types.ObjectFormatIdentifier`

    .. attribute:: checksum

      Type: :class:`Types.Checksum`

    .. attribute:: dateSysMetadataModified

      Type: :class:`Types.xs.dateTime`

    .. attribute:: size

      Type: :class:`Types.xs.unsignedLong`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectInfo">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="identifier" type="d1:Identifier" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="formatId" type="d1:ObjectFormatIdentifier"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="checksum" type="d1:Checksum" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="dateSysMetadataModified" type="xs:dateTime"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="size" type="xs:unsignedLong"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_ObjectInfo.png

    ..
      @startuml images/class_ObjectInfo.png

      class ObjectInfo {
        + identifier : Identifier[1..1]
        + formatId : ObjectFormatIdentifier[1..1]
        + checksum : Checksum[1..1]
        + dateSysMetadataModified : xs.dateTime[1..1]
        + size : xs.unsignedLong[1..1]
      }
      ObjectInfo .. Identifier
      ObjectInfo .. ObjectFormatIdentifier
      ObjectInfo .. Checksum
      ObjectInfo .. xs.dateTime
      ObjectInfo .. xs.unsignedLong

      @enduml


..                                    ######
.. class:: ObjectList

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectList">
         <xs:complexContent>
            <xs:extension base="d1:Slice">
               <xs:sequence>
                  <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="objectInfo" type="d1:ObjectInfo" minOccurs="0" maxOccurs="unbounded"/>
               </xs:sequence>
            </xs:extension>
         </xs:complexContent>
      </xs:complexType>


    .. image:: images/class_ObjectList.png

    ..
      @startuml images/class_ObjectList.png

      class ObjectList {
        + objectInfo : ObjectInfo[0..*]
      }
      ObjectList .. ObjectInfo
      ObjectList --|> Slice

      @enduml


..                                    ######
.. class:: ObjectLocation

    Portion of an ObjectLocationList indicating the node from which the object can be retrieved.

    .. attribute:: nodeIdentifier

      Type: :class:`Types.NodeReference`

      Identifier of the node (the same identifier used in the node registry for identifying the node.


    .. attribute:: baseURL

      Type: :class:`Types.xs.anyURI`

      The current base URL for services implemented on the target node.


    .. attribute:: url

      Type: :class:`Types.xs.anyURI`

      The full (absolute) URL that can be used to retrieve the object using the get() method of the rest interface.


      For example, if identifer was "ABX154", and the node had a base URL of ``http://mn1.dataone.org/mn`` then the value would be ``http://mn1.dataone.org/mn/object/ABX154``


    .. attribute:: preference

      Type: :class:`Types.xs.int`

      A weighting parameter that provides a hint to the caller for the relative preference for nodes from which the content should be retrieved.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectLocation">
         <xs:sequence>
            <xs:element name="nodeIdentifier" type="d1:NodeReference" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="baseURL" minOccurs="1" maxOccurs="1" type="xs:anyURI">
            </xs:element>
            <xs:element name="url" minOccurs="1" maxOccurs="1" type="xs:anyURI">
            </xs:element>
            <xs:element name="preference" minOccurs="0" maxOccurs="1" type="xs:int">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_ObjectLocation.png

    ..
      @startuml images/class_ObjectLocation.png

      class ObjectLocation {
        + nodeIdentifier : NodeReference[1..1]
        + baseURL : xs.anyURI[1..1]
        + url : xs.anyURI[1..1]
        + preference : xs.int[0..1]
      }
      ObjectLocation .. NodeReference
      ObjectLocation .. xs.anyURI
      ObjectLocation .. xs.int

      @enduml


..                                    ######
.. class:: ObjectLocationList

    An ObjectLocationList is the structure returned from the :func:`CNRead.resolve` method of the CN REST interface. It provides a list of locations from which the specified object can be retrieved.

    .. attribute:: identifier

      Type: :class:`Types.Identifier`

      The identifier of the object being resolved.


    .. attribute:: objectLocation

      Type: :class:`Types.ObjectLocation`

      List of nodes from which the object can be retrieved


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ObjectLocationList">
         <xs:sequence>
            <xs:element name="identifier" type="d1:Identifier" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="objectLocation" type="d1:ObjectLocation" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_ObjectLocationList.png

    ..
      @startuml images/class_ObjectLocationList.png

      class ObjectLocationList {
        + identifier : Identifier[1..1]
        + objectLocation : ObjectLocation[0..*]
      }
      ObjectLocationList .. Identifier
      ObjectLocationList .. ObjectLocation

      @enduml


..                                    ######
.. class:: Person

    Person represents metadata about a Principal that is a person and that can be used by clients and nodes for displaying :class:`Types.AccessPolicy` information.

    .. attribute:: subject

      Type: :class:`Types.Subject`

      The unique identifier for the person.


    .. attribute:: givenName

      Type: :class:`Types.NonEmptyString`

      The given name of the Person.


    .. attribute:: familyName

      Type: :class:`Types.NonEmptyString`

      The family name of the Person.


    .. attribute:: email

      Type: :class:`Types.NonEmptyString`

      The email address of the Person.


    .. attribute:: isMemberOf

      Type: :class:`Types.Subject`

      A group or role in which the Principal is a member, expressed using the unique Principal identifier for that group.


    .. attribute:: equivalentIdentity

      Type: :class:`Types.Subject`

      An alternative but equivalent identity for the principal that has been used in alternate identity systems.


    .. attribute:: verified

      Type: :class:`Types.xs.boolean`

      True if the name and email address of the Person have been verified to ensure that the givenName and familyName represent the real person's legal name, and that the email address is correct for that person and is in the control of the indicated individual. Verification occurs through a established procedure within DataONE as part of the Identity Management system.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Person">
         <xs:sequence>
            <xs:element name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="givenName" type="d1:NonEmptyString" minOccurs="1" maxOccurs="unbounded">
            </xs:element>
            <xs:element name="familyName" type="d1:NonEmptyString" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="email" type="d1:NonEmptyString" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
            <xs:element name="isMemberOf" type="d1:Subject" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
            <xs:element name="equivalentIdentity" type="d1:Subject" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
            <xs:element name="verified" type="xs:boolean" minOccurs="0" maxOccurs="1">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_Person.png

    ..
      @startuml images/class_Person.png

      class Person {
        + subject : Subject[1..1]
        + givenName : NonEmptyString[1..*]
        + familyName : NonEmptyString[1..1]
        + email : NonEmptyString[0..*]
        + isMemberOf : Subject[0..*]
        + equivalentIdentity : Subject[0..*]
        + verified : xs.boolean[0..1]
      }
      Person .. Subject
      Person .. NonEmptyString
      Person .. xs.boolean

      @enduml


..                                    ######
.. class:: Ping

    Store results from the :func:`MNCore.ping` method.

    .. attribute:: success

      Type: :class:`Types.xs.boolean`

      A boolean flag indicating TRUE if the node was reached by the last :func:`MNCore.ping` call, otherwise FALSE


    .. attribute:: lastSuccess

      Type: :class:`Types.xs.dateTime`

      The date time value of the last time a successful ping was performed.


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Ping">
         <xs:attribute name="success" type="xs:boolean">
         </xs:attribute>
         <xs:attribute name="lastSuccess" type="xs:dateTime">
         </xs:attribute>
      </xs:complexType>


    .. image:: images/class_Ping.png

    ..
      @startuml images/class_Ping.png

      class Ping {
        + success : xs.boolean[0..1]
        + lastSuccess : xs.dateTime[0..1]
      }
      Ping .. xs.boolean
      Ping .. xs.dateTime

      @enduml


..                                    ######
.. class:: Replica

    Replica information that forms a part of the SystemMetadata.

    .. attribute:: replicaMemberNode

      Type: :class:`Types.NodeReference`

    .. attribute:: replicationStatus

      Type: :class:`Types.ReplicationStatus`

    .. attribute:: replicaVerified

      Type: :class:`Types.xs.dateTime`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Replica">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="replicaMemberNode" type="d1:NodeReference"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="replicationStatus" type="d1:ReplicationStatus"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="replicaVerified" type="xs:dateTime"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_Replica.png

    ..
      @startuml images/class_Replica.png

      class Replica {
        + replicaMemberNode : NodeReference[1..1]
        + replicationStatus : ReplicationStatus[1..1]
        + replicaVerified : xs.dateTime[1..1]
      }
      Replica .. NodeReference
      Replica .. ReplicationStatus
      Replica .. xs.dateTime

      @enduml


..                                    ######
.. class:: ReplicationPolicy

    Defines the replication policy applied to a particular object.

    .. attribute:: preferredMemberNode

      Type: :class:`Types.NodeReference`

      Nodes listed here have preference over other nodes for replication targets.


    .. attribute:: blockedMemberNode

      Type: :class:`Types.NodeReference`

      The object MUST never be replicated to nodes listed as blockedMemberNodes. Where there is a conflict between a preferredMemberNode and a blockedMemberNode entry, the blockedMemberNode entry prevails.


    .. attribute:: replicationAllowed

      Type: :class:`Types.xs.boolean`

    .. attribute:: numberReplicas

      Type: :class:`Types.xs.int`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ReplicationPolicy">
         <xs:sequence>
            <xs:element name="preferredMemberNode" type="d1:NodeReference" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
            <xs:element name="blockedMemberNode" type="d1:NodeReference" minOccurs="0" maxOccurs="unbounded">
            </xs:element>
         </xs:sequence>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="replicationAllowed" type="xs:boolean"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="numberReplicas" type="xs:int"/>
      </xs:complexType>


    .. image:: images/class_ReplicationPolicy.png

    ..
      @startuml images/class_ReplicationPolicy.png

      class ReplicationPolicy {
        + preferredMemberNode : NodeReference[0..*]
        + blockedMemberNode : NodeReference[0..*]
        + replicationAllowed : xs.boolean[0.. 1]
        + numberReplicas : xs.int[0.. 1]
      }
      ReplicationPolicy .. NodeReference
      ReplicationPolicy .. xs.boolean
      ReplicationPolicy .. xs.int

      @enduml


..                                    ######
.. class:: Service

    The available Dataone Service APIs that are exposed on a Node Name and version of a DataONE software stack component are equivalent to the statusresponselist.xsd name and version. Without a restriction, all service methods are available to all callers. Restrictions may be placed on individual methods of the service to limit the service to a certain set of Subjects.

    .. attribute:: restriction

      Type: :class:`Types.ServiceMethodRestriction`

    .. attribute:: name

      Type: :class:`Types.ServiceName`

    .. attribute:: version

      Type: :class:`Types.ServiceVersion`

    .. attribute:: available

      Type: :class:`Types.xs.boolean`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Service">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="restriction" type="d1:ServiceMethodRestriction" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="name" type="d1:ServiceName" use="required"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="version" type="d1:ServiceVersion" use="required"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="available" type="xs:boolean"/>
      </xs:complexType>


    .. image:: images/class_Service.png

    ..
      @startuml images/class_Service.png

      class Service {
        + restriction : ServiceMethodRestriction[0..*]
        + name : ServiceName[1.. 1]
        + version : ServiceVersion[1.. 1]
        + available : xs.boolean[0.. 1]
      }
      Service .. ServiceMethodRestriction
      Service .. ServiceName
      Service .. ServiceVersion
      Service .. xs.boolean

      @enduml


..                                    ######
.. class:: ServiceMethodRestriction

    Describes the restriction policy for a given method. Only subjects listed in the allowed list are allowed to invoke the method.

    .. attribute:: allowed

      Type: :class:`Types.SubjectList`

    .. attribute:: name

      Type: :class:`Types.xs.NMTOKEN`

    .. attribute:: rest

      Type: :class:`Types.xs.token`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="ServiceMethodRestriction">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="allowed" type="d1:SubjectList" minOccurs="1" maxOccurs="1"/>
         </xs:sequence>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="name" type="xs:NMTOKEN"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="rest" use="required" type="xs:token"/>
      </xs:complexType>


    .. image:: images/class_ServiceMethodRestriction.png

    ..
      @startuml images/class_ServiceMethodRestriction.png

      class ServiceMethodRestriction {
        + allowed : SubjectList[1..1]
        + name : xs.NMTOKEN[0.. 1]
        + rest : xs.token[1.. 1]
      }
      ServiceMethodRestriction .. SubjectList
      ServiceMethodRestriction .. xs.NMTOKEN
      ServiceMethodRestriction .. xs.token

      @enduml


..                                    ######
.. class:: Services

    .. attribute:: service

      Type: :class:`Types.Service`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Services">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="service" type="d1:Service" minOccurs="1" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_Services.png

    ..
      @startuml images/class_Services.png

      class Services {
        + service : Service[1..*]
      }
      Services .. Service

      @enduml


..                                    ######
.. class:: Session

    Information about the authenticated session for a service transaction. Session data is retrieved from the SSL client certificate and populated in the Session object. The subject represents the person or system that authenticated successfully, and the subjectInfo contains a listing of alternate identities (both Persons and Groups) that are also valid identities for this user. The subjectInfo should include at least one Person or Group entry that provides the attributes of the subject that was authenticated.

    .. attribute:: subject

      Type: :class:`Types.Subject`

    .. attribute:: subjectInfo

      Type: :class:`Types.SubjectInfo`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Session">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="subject" type="d1:Subject" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="subjectInfo" type="d1:SubjectInfo" minOccurs="0" maxOccurs="1"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_Session.png

    ..
      @startuml images/class_Session.png

      class Session {
        + subject : Subject[1..1]
        + subjectInfo : SubjectInfo[0..1]
      }
      Session .. Subject
      Session .. SubjectInfo

      @enduml


..                                    ######
.. class:: Schedule

    The schedule on which MnSynchronization will run for a particular run.

    .. attribute:: hour

      Type: :class:`Types.CrontabEntry`

    .. attribute:: mday

      Type: :class:`Types.CrontabEntry`

    .. attribute:: min

      Type: :class:`Types.CrontabEntry`

    .. attribute:: mon

      Type: :class:`Types.CrontabEntry`

    .. attribute:: sec

      Type: :class:`Types.CrontabEntry`

    .. attribute:: wday

      Type: :class:`Types.CrontabEntry`

    .. attribute:: year

      Type: :class:`Types.CrontabEntry`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Schedule">
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="hour" use="required" type="d1:CrontabEntry"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="mday" use="required" type="d1:CrontabEntry"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="min" use="required" type="d1:CrontabEntry"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="mon" use="required" type="d1:CrontabEntry"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="sec" use="required" type="d1:CrontabEntry"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="wday" use="required" type="d1:CrontabEntry"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="year" use="required" type="d1:CrontabEntry"/>
      </xs:complexType>


    .. image:: images/class_Schedule.png

    ..
      @startuml images/class_Schedule.png

      class Schedule {
        + hour : CrontabEntry[1..1]
        + mday : CrontabEntry[1..1]
        + min : CrontabEntry[1..1]
        + mon : CrontabEntry[1..1]
        + sec : CrontabEntry[1..1]
        + wday : CrontabEntry[1..1]
        + year : CrontabEntry[1..1]
      }
      Schedule .. CrontabEntry

      @enduml


..                                    ######
.. class:: Slice

    .. attribute:: count

      Type: :class:`Types.xs.int`

    .. attribute:: start

      Type: :class:`Types.xs.int`

    .. attribute:: total

      Type: :class:`Types.xs.int`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Slice">
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="count" use="required" type="xs:int"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="start" use="required" type="xs:int"/>
         <xs:attribute xmlns:d1="http://ns.dataone.org/service/types/v1" name="total" use="required" type="xs:int"/>
      </xs:complexType>


    .. image:: images/class_Slice.png

    ..
      @startuml images/class_Slice.png

      class Slice {
        + count : xs.int[1..1]
        + start : xs.int[1..1]
        + total : xs.int[1..1]
      }
      Slice .. xs.int

      @enduml


..                                    ######
.. class:: Synchronization

    The process by which data is pulled from membernodes down to the coordinating node

    .. attribute:: schedule

      Type: :class:`Types.Schedule`

    .. attribute:: lastHarvested

      Type: :class:`Types.xs.dateTime`

      The last time the mn sychronization daemon ran and found new data to synchronize


    .. attribute:: lastCompleteHarvest

      Type: :class:`Types.xs.dateTime`

      The last time all the data from a node was pulled from a member node


    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Synchronization">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="schedule" type="d1:Schedule" minOccurs="1" maxOccurs="1"/>
            <xs:element name="lastHarvested" type="xs:dateTime" minOccurs="1" maxOccurs="1">
            </xs:element>
            <xs:element name="lastCompleteHarvest" type="xs:dateTime" minOccurs="1" maxOccurs="1">
            </xs:element>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_Synchronization.png

    ..
      @startuml images/class_Synchronization.png

      class Synchronization {
        + schedule : Schedule[1..1]
        + lastHarvested : xs.dateTime[1..1]
        + lastCompleteHarvest : xs.dateTime[1..1]
      }
      Synchronization .. Schedule
      Synchronization .. xs.dateTime

      @enduml


..                                    ######
.. class:: Subject

    Person (user), Group, or Organization, or System.

    The formal name identifiying a user or group from the DataONE Identity Management Service. The subject is represented by a unique, persistent, non-reassignable identifier string that follows the same constraints as Identifier.

    Used by :mod:`SystemMetadata`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="Subject">
         <xs:simpleContent>
            <xs:extension xmlns:d1="http://ns.dataone.org/service/types/v1" base="d1:NonEmptyString"><!-- Note: Can also be special names:
             verifiedUser: anyone with checked credentials for whom their real name and email has been verified
             authenticatedUser: anyone with checked credentials
             public: anyone, whether authenticated or not
        --></xs:extension>
         </xs:simpleContent>
      </xs:complexType>


    .. image:: images/class_Subject.png

    ..
      @startuml images/class_Subject.png

      class Subject {
      }
      Subject --|> NonEmptyString

      @enduml


..                                    ######
.. class:: SubjectInfo

    A List of subjects, including both Persons and Groups, that is returned from the getSubjectInfo service and listSubjects service.

    .. attribute:: person

      Type: :class:`Types.Person`

    .. attribute:: group

      Type: :class:`Types.Group`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="SubjectInfo">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="person" type="d1:Person" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="group" type="d1:Group" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_SubjectInfo.png

    ..
      @startuml images/class_SubjectInfo.png

      class SubjectInfo {
        + person : Person[0..*]
        + group : Group[0..*]
      }
      SubjectInfo .. Person
      SubjectInfo .. Group

      @enduml


..                                    ######
.. class:: SubjectList

    A list of Subjects used for identity/group management

    .. attribute:: subject

      Type: :class:`Types.Subject`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="SubjectList">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" maxOccurs="unbounded" name="subject" type="d1:Subject" minOccurs="0"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_SubjectList.png

    ..
      @startuml images/class_SubjectList.png

      class SubjectList {
        + subject : Subject[0..*]
      }
      SubjectList .. Subject

      @enduml


..                                    ######
.. class:: SystemMetadata

    A set of low level information about an object in the DataONE system. SystemMetadata is described in :mod:`SystemMetadata`.

    .. attribute:: serialVersion

      Type: :class:`Types.xs.unsignedLong`

    .. attribute:: identifier

      Type: :class:`Types.Identifier`

    .. attribute:: formatId

      Type: :class:`Types.ObjectFormatIdentifier`

    .. attribute:: size

      Type: :class:`Types.xs.unsignedLong`

    .. attribute:: checksum

      Type: :class:`Types.Checksum`

    .. attribute:: submitter

      Type: :class:`Types.Subject`

    .. attribute:: rightsHolder

      Type: :class:`Types.Subject`

    .. attribute:: accessPolicy

      Type: :class:`Types.AccessPolicy`

    .. attribute:: replicationPolicy

      Type: :class:`Types.ReplicationPolicy`

    .. attribute:: obsoletes

      Type: :class:`Types.Identifier`

    .. attribute:: obsoletedBy

      Type: :class:`Types.Identifier`

    .. attribute:: dateUploaded

      Type: :class:`Types.xs.dateTime`

    .. attribute:: dateSysMetadataModified

      Type: :class:`Types.xs.dateTime`

    .. attribute:: originMemberNode

      Type: :class:`Types.NodeReference`

    .. attribute:: authoritativeMemberNode

      Type: :class:`Types.NodeReference`

    .. attribute:: replica

      Type: :class:`Types.Replica`

    .. code-block:: xml


      <xs:complexType xmlns:xs="http://www.w3.org/2001/XMLSchema" name="SystemMetadata">
         <xs:sequence>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="serialVersion" type="xs:unsignedLong" minOccurs="1" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="identifier" type="d1:Identifier"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="formatId" type="d1:ObjectFormatIdentifier"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="size" type="xs:unsignedLong"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="checksum" type="d1:Checksum"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="submitter" type="d1:Subject"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="rightsHolder" type="d1:Subject"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="accessPolicy" type="d1:AccessPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="replicationPolicy" type="d1:ReplicationPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="obsoletes" type="d1:Identifier" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="obsoletedBy" type="d1:Identifier" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="dateUploaded" type="xs:dateTime"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="dateSysMetadataModified" type="xs:dateTime"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="originMemberNode" type="d1:NodeReference" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="authoritativeMemberNode" type="d1:NodeReference" minOccurs="0" maxOccurs="1"/>
            <xs:element xmlns:d1="http://ns.dataone.org/service/types/v1" name="replica" maxOccurs="unbounded" minOccurs="0" type="d1:Replica"/>
         </xs:sequence>
      </xs:complexType>


    .. image:: images/class_SystemMetadata.png

    ..
      @startuml images/class_SystemMetadata.png

      class SystemMetadata {
        + serialVersion : xs.unsignedLong[1..1]
        + identifier : Identifier[1..1]
        + formatId : ObjectFormatIdentifier[1..1]
        + size : xs.unsignedLong[1..1]
        + checksum : Checksum[1..1]
        + submitter : Subject[1..1]
        + rightsHolder : Subject[1..1]
        + accessPolicy : AccessPolicy[0..1]
        + replicationPolicy : ReplicationPolicy[0..1]
        + obsoletes : Identifier[0..1]
        + obsoletedBy : Identifier[0..1]
        + dateUploaded : xs.dateTime[1..1]
        + dateSysMetadataModified : xs.dateTime[1..1]
        + originMemberNode : NodeReference[0..1]
        + authoritativeMemberNode : NodeReference[0..1]
        + replica : Replica[0..*]
      }
      SystemMetadata .. xs.unsignedLong
      SystemMetadata .. Identifier
      SystemMetadata .. ObjectFormatIdentifier
      SystemMetadata .. Checksum
      SystemMetadata .. Subject
      SystemMetadata .. AccessPolicy
      SystemMetadata .. ReplicationPolicy
      SystemMetadata .. xs.dateTime
      SystemMetadata .. NodeReference
      SystemMetadata .. Replica

      @enduml


